
MyServoAmp_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08007898  08007898  00017898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b58  08007b58  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b60  08007b60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b64  08007b64  00017b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000078  08007be0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08007be0  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d7e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027a9  00000000  00000000  00030e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e70  00000000  00000000  000335d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00034440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000240eb  00000000  00000000  00035158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc27  00000000  00000000  00059243  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d589e  00000000  00000000  00065e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  0013b784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800787c 	.word	0x0800787c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800787c 	.word	0x0800787c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b972 	b.w	8000f48 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	4688      	mov	r8, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14b      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8a:	428a      	cmp	r2, r1
 8000c8c:	4615      	mov	r5, r2
 8000c8e:	d967      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b14a      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c96:	f1c2 0720 	rsb	r7, r2, #32
 8000c9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000ca2:	4095      	lsls	r5, r2
 8000ca4:	ea47 0803 	orr.w	r8, r7, r3
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb4:	fa1f fc85 	uxth.w	ip, r5
 8000cb8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cc0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18eb      	adds	r3, r5, r3
 8000cca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cce:	f080 811b 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8118 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000cd8:	3f02      	subs	r7, #2
 8000cda:	442b      	add	r3, r5
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cf0:	45a4      	cmp	ip, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	192c      	adds	r4, r5, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000d04:	3802      	subs	r0, #2
 8000d06:	442c      	add	r4, r5
 8000d08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d0c:	eba4 040c 	sub.w	r4, r4, ip
 8000d10:	2700      	movs	r7, #0
 8000d12:	b11e      	cbz	r6, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xbe>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80eb 	beq.w	8000f02 <__udivmoddi4+0x286>
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d32:	4638      	mov	r0, r7
 8000d34:	4639      	mov	r1, r7
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f783 	clz	r7, r3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d147      	bne.n	8000dd2 <__udivmoddi4+0x156>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd0>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2c4>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	4698      	mov	r8, r3
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000d5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xe8>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 808f 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6e:	1b49      	subs	r1, r1, r5
 8000d70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d74:	fa1f f885 	uxth.w	r8, r5
 8000d78:	2701      	movs	r7, #1
 8000d7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7e:	0c23      	lsrs	r3, r4, #16
 8000d80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb08 f10c 	mul.w	r1, r8, ip
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d90:	18eb      	adds	r3, r5, r3
 8000d92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d9e:	4684      	mov	ip, r0
 8000da0:	1a59      	subs	r1, r3, r1
 8000da2:	b2a3      	uxth	r3, r4
 8000da4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000db0:	fb08 f800 	mul.w	r8, r8, r0
 8000db4:	45a0      	cmp	r8, r4
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x14c>
 8000db8:	192c      	adds	r4, r5, r4
 8000dba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x14a>
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	f200 80b6 	bhi.w	8000f32 <__udivmoddi4+0x2b6>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	eba4 0408 	sub.w	r4, r4, r8
 8000dcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dd0:	e79f      	b.n	8000d12 <__udivmoddi4+0x96>
 8000dd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd6:	40bb      	lsls	r3, r7
 8000dd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ddc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000de0:	fa01 f407 	lsl.w	r4, r1, r7
 8000de4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000df0:	4325      	orrs	r5, r4
 8000df2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df6:	0c2c      	lsrs	r4, r5, #16
 8000df8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dfc:	fa1f fa8e 	uxth.w	sl, lr
 8000e00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e04:	fb09 f40a 	mul.w	r4, r9, sl
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1e 0303 	adds.w	r3, lr, r3
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	f080 8087 	bcs.w	8000f2e <__udivmoddi4+0x2b2>
 8000e20:	429c      	cmp	r4, r3
 8000e22:	f240 8084 	bls.w	8000f2e <__udivmoddi4+0x2b2>
 8000e26:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2a:	4473      	add	r3, lr
 8000e2c:	1b1b      	subs	r3, r3, r4
 8000e2e:	b2ad      	uxth	r5, r5
 8000e30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e34:	fb08 3310 	mls	r3, r8, r0, r3
 8000e38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e40:	45a2      	cmp	sl, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1e 0404 	adds.w	r4, lr, r4
 8000e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4c:	d26b      	bcs.n	8000f26 <__udivmoddi4+0x2aa>
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d969      	bls.n	8000f26 <__udivmoddi4+0x2aa>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4474      	add	r4, lr
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	eba4 040a 	sub.w	r4, r4, sl
 8000e62:	454c      	cmp	r4, r9
 8000e64:	46c2      	mov	sl, r8
 8000e66:	464b      	mov	r3, r9
 8000e68:	d354      	bcc.n	8000f14 <__udivmoddi4+0x298>
 8000e6a:	d051      	beq.n	8000f10 <__udivmoddi4+0x294>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d069      	beq.n	8000f44 <__udivmoddi4+0x2c8>
 8000e70:	ebb1 050a 	subs.w	r5, r1, sl
 8000e74:	eb64 0403 	sbc.w	r4, r4, r3
 8000e78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e7c:	40fd      	lsrs	r5, r7
 8000e7e:	40fc      	lsrs	r4, r7
 8000e80:	ea4c 0505 	orr.w	r5, ip, r5
 8000e84:	e9c6 5400 	strd	r5, r4, [r6]
 8000e88:	2700      	movs	r7, #0
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f703 	lsr.w	r7, r0, r3
 8000e94:	4095      	lsls	r5, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ea2:	4338      	orrs	r0, r7
 8000ea4:	0c01      	lsrs	r1, r0, #16
 8000ea6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eaa:	fa1f f885 	uxth.w	r8, r5
 8000eae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb6:	fb07 f308 	mul.w	r3, r7, r8
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x256>
 8000ec2:	1869      	adds	r1, r5, r1
 8000ec4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec8:	d22f      	bcs.n	8000f2a <__udivmoddi4+0x2ae>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d92d      	bls.n	8000f2a <__udivmoddi4+0x2ae>
 8000ece:	3f02      	subs	r7, #2
 8000ed0:	4429      	add	r1, r5
 8000ed2:	1acb      	subs	r3, r1, r3
 8000ed4:	b281      	uxth	r1, r0
 8000ed6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb00 f308 	mul.w	r3, r0, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x27e>
 8000eea:	1869      	adds	r1, r5, r1
 8000eec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef0:	d217      	bcs.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d915      	bls.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	4429      	add	r1, r5
 8000efa:	1ac9      	subs	r1, r1, r3
 8000efc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f00:	e73b      	b.n	8000d7a <__udivmoddi4+0xfe>
 8000f02:	4637      	mov	r7, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e709      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f08:	4607      	mov	r7, r0
 8000f0a:	e6e7      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f10:	4541      	cmp	r1, r8
 8000f12:	d2ab      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f18:	eb69 020e 	sbc.w	r2, r9, lr
 8000f1c:	3801      	subs	r0, #1
 8000f1e:	4613      	mov	r3, r2
 8000f20:	e7a4      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f22:	4660      	mov	r0, ip
 8000f24:	e7e9      	b.n	8000efa <__udivmoddi4+0x27e>
 8000f26:	4618      	mov	r0, r3
 8000f28:	e795      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2a:	4667      	mov	r7, ip
 8000f2c:	e7d1      	b.n	8000ed2 <__udivmoddi4+0x256>
 8000f2e:	4681      	mov	r9, r0
 8000f30:	e77c      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f32:	3802      	subs	r0, #2
 8000f34:	442c      	add	r4, r5
 8000f36:	e747      	b.n	8000dc8 <__udivmoddi4+0x14c>
 8000f38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f3c:	442b      	add	r3, r5
 8000f3e:	e72f      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f40:	4638      	mov	r0, r7
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xda>
 8000f44:	4637      	mov	r7, r6
 8000f46:	e6e9      	b.n	8000d1c <__udivmoddi4+0xa0>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f60:	4a22      	ldr	r2, [pc, #136]	; (8000fec <MX_ADC1_Init+0xa0>)
 8000f62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f90:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000fb2:	f001 fb79 	bl	80026a8 <HAL_ADC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000fbc:	f000 ff26 	bl	8001e0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000fd2:	f001 fc8b 	bl	80028ec <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fdc:	f000 ff16 	bl	8001e0c <Error_Handler>
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000130 	.word	0x20000130
 8000fec:	40012000 	.word	0x40012000

08000ff0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_ADC2_Init+0x9c>)
 8001004:	4a22      	ldr	r2, [pc, #136]	; (8001090 <MX_ADC2_Init+0xa0>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_ADC2_Init+0x9c>)
 800100a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <MX_ADC2_Init+0x9c>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_ADC2_Init+0x9c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_ADC2_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_ADC2_Init+0x9c>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_ADC2_Init+0x9c>)
 800102c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_ADC2_Init+0x9c>)
 8001034:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_ADC2_Init+0x9c>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_ADC2_Init+0x9c>)
 8001042:	2201      	movs	r2, #1
 8001044:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_ADC2_Init+0x9c>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_ADC2_Init+0x9c>)
 8001050:	2201      	movs	r2, #1
 8001052:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_ADC2_Init+0x9c>)
 8001056:	f001 fb27 	bl	80026a8 <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001060:	f000 fed4 	bl	8001e0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001064:	2304      	movs	r3, #4
 8001066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800106c:	2301      	movs	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_ADC2_Init+0x9c>)
 8001076:	f001 fc39 	bl	80028ec <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001080:	f000 fec4 	bl	8001e0c <Error_Handler>
  }

}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000e8 	.word	0x200000e8
 8001090:	40012100 	.word	0x40012100

08001094 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010a8:	4a22      	ldr	r2, [pc, #136]	; (8001134 <MX_ADC3_Init+0xa0>)
 80010aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80010ac:	4b20      	ldr	r3, [pc, #128]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010d8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_ADC3_Init+0x9c>)
 80010fa:	f001 fad5 	bl	80026a8 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001104:	f000 fe82 	bl	8001e0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001108:	2301      	movs	r3, #1
 800110a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800110c:	2301      	movs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001110:	2301      	movs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC3_Init+0x9c>)
 800111a:	f001 fbe7 	bl	80028ec <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001124:	f000 fe72 	bl	8001e0c <Error_Handler>
  }

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000178 	.word	0x20000178
 8001134:	40012200 	.word	0x40012200

08001138 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a45      	ldr	r2, [pc, #276]	; (800126c <HAL_ADC_MspInit+0x134>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d128      	bne.n	80011ac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	4b44      	ldr	r3, [pc, #272]	; (8001270 <HAL_ADC_MspInit+0x138>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a43      	ldr	r2, [pc, #268]	; (8001270 <HAL_ADC_MspInit+0x138>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_ADC_MspInit+0x138>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	623b      	str	r3, [r7, #32]
 8001174:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_ADC_MspInit+0x138>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a3c      	ldr	r2, [pc, #240]	; (8001270 <HAL_ADC_MspInit+0x138>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b3a      	ldr	r3, [pc, #232]	; (8001270 <HAL_ADC_MspInit+0x138>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001192:	2301      	movs	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	4833      	ldr	r0, [pc, #204]	; (8001274 <HAL_ADC_MspInit+0x13c>)
 80011a6:	f001 fee1 	bl	8002f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80011aa:	e05a      	b.n	8001262 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a31      	ldr	r2, [pc, #196]	; (8001278 <HAL_ADC_MspInit+0x140>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d128      	bne.n	8001208 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_ADC_MspInit+0x138>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a2c      	ldr	r2, [pc, #176]	; (8001270 <HAL_ADC_MspInit+0x138>)
 80011c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_ADC_MspInit+0x138>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <HAL_ADC_MspInit+0x138>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a25      	ldr	r2, [pc, #148]	; (8001270 <HAL_ADC_MspInit+0x138>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_ADC_MspInit+0x138>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ee:	2310      	movs	r3, #16
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f2:	2303      	movs	r3, #3
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	481c      	ldr	r0, [pc, #112]	; (8001274 <HAL_ADC_MspInit+0x13c>)
 8001202:	f001 feb3 	bl	8002f6c <HAL_GPIO_Init>
}
 8001206:	e02c      	b.n	8001262 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_ADC_MspInit+0x144>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d127      	bne.n	8001262 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_ADC_MspInit+0x138>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_ADC_MspInit+0x138>)
 800121c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_ADC_MspInit+0x138>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_ADC_MspInit+0x138>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_ADC_MspInit+0x138>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_ADC_MspInit+0x138>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800124a:	2302      	movs	r3, #2
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124e:	2303      	movs	r3, #3
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_ADC_MspInit+0x13c>)
 800125e:	f001 fe85 	bl	8002f6c <HAL_GPIO_Init>
}
 8001262:	bf00      	nop
 8001264:	3738      	adds	r7, #56	; 0x38
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40012000 	.word	0x40012000
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	40012100 	.word	0x40012100
 800127c:	40012200 	.word	0x40012200

08001280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <MX_GPIO_Init+0x108>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a3a      	ldr	r2, [pc, #232]	; (8001388 <MX_GPIO_Init+0x108>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <MX_GPIO_Init+0x108>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b34      	ldr	r3, [pc, #208]	; (8001388 <MX_GPIO_Init+0x108>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a33      	ldr	r2, [pc, #204]	; (8001388 <MX_GPIO_Init+0x108>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <MX_GPIO_Init+0x108>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_GPIO_Init+0x108>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a2c      	ldr	r2, [pc, #176]	; (8001388 <MX_GPIO_Init+0x108>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_GPIO_Init+0x108>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2120      	movs	r1, #32
 80012ee:	4827      	ldr	r0, [pc, #156]	; (800138c <MX_GPIO_Init+0x10c>)
 80012f0:	f001 ffce 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GATE_BR_GPIO_Port, GATE_BR_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fa:	4825      	ldr	r0, [pc, #148]	; (8001390 <MX_GPIO_Init+0x110>)
 80012fc:	f001 ffc8 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <MX_GPIO_Init+0x114>)
 8001308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	481e      	ldr	r0, [pc, #120]	; (8001390 <MX_GPIO_Init+0x110>)
 8001316:	f001 fe29 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800131a:	2320      	movs	r3, #32
 800131c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	4619      	mov	r1, r3
 8001330:	4816      	ldr	r0, [pc, #88]	; (800138c <MX_GPIO_Init+0x10c>)
 8001332:	f001 fe1b 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GATE_BR_Pin;
 8001336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GATE_BR_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4619      	mov	r1, r3
 800134e:	4810      	ldr	r0, [pc, #64]	; (8001390 <MX_GPIO_Init+0x110>)
 8001350:	f001 fe0c 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_GPIO_Init+0x114>)
 800135c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4619      	mov	r1, r3
 8001368:	4808      	ldr	r0, [pc, #32]	; (800138c <MX_GPIO_Init+0x10c>)
 800136a:	f001 fdff 	bl	8002f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2028      	movs	r0, #40	; 0x28
 8001374:	f001 fdc3 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001378:	2028      	movs	r0, #40	; 0x28
 800137a:	f001 fddc 	bl	8002f36 <HAL_NVIC_EnableIRQ>

}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020800 	.word	0x40020800
 8001394:	10210000 	.word	0x10210000

08001398 <IncEnc_Init>:

IncEnc_TypeDef incEnc;


void IncEnc_Init()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

	memset(&incEnc, 0x00, sizeof(incEnc));
 800139c:	2234      	movs	r2, #52	; 0x34
 800139e:	2100      	movs	r1, #0
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <IncEnc_Init+0x44>)
 80013a2:	f004 fb09 	bl	80059b8 <memset>

	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80013a6:	213c      	movs	r1, #60	; 0x3c
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <IncEnc_Init+0x48>)
 80013aa:	f002 fe97 	bl	80040dc <HAL_TIM_Encoder_Start_IT>

	incEnc.Init.GearRatio_out2enc = 1;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <IncEnc_Init+0x44>)
 80013b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013b4:	605a      	str	r2, [r3, #4]
	incEnc.Init.PPR = 2048;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <IncEnc_Init+0x44>)
 80013b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013bc:	609a      	str	r2, [r3, #8]
	incEnc.Init.count_max = 65535;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <IncEnc_Init+0x44>)
 80013c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c4:	60da      	str	r2, [r3, #12]
	incEnc.Init.cycleTime = 1E-3;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <IncEnc_Init+0x44>)
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <IncEnc_Init+0x4c>)
 80013ca:	611a      	str	r2, [r3, #16]
	incEnc.Init.prescale = 1;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <IncEnc_Init+0x44>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	615a      	str	r2, [r3, #20]

	incEnc.htim = &htim1;
 80013d2:	4b02      	ldr	r3, [pc, #8]	; (80013dc <IncEnc_Init+0x44>)
 80013d4:	4a02      	ldr	r2, [pc, #8]	; (80013e0 <IncEnc_Init+0x48>)
 80013d6:	601a      	str	r2, [r3, #0]



}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200001c0 	.word	0x200001c0
 80013e0:	20000234 	.word	0x20000234
 80013e4:	3a83126f 	.word	0x3a83126f

080013e8 <refreshIncEnc>:




void refreshIncEnc(IncEnc_TypeDef *IncEnc)
{
 80013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]


	// load now data
	IncEnc->raw_count = IncEnc->htim->Instance->CNT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]


	int32_t count_diff = (int32_t)IncEnc->raw_count - IncEnc->p_raw_count;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	60fb      	str	r3, [r7, #12]

	// refresh past data
	IncEnc->p_raw_count = IncEnc->raw_count;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	61da      	str	r2, [r3, #28]

	// Unwrapping process
	if(count_diff < -1 * (int32_t)((IncEnc->Init.count_max + 1) >> 1))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	3301      	adds	r3, #1
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	425b      	negs	r3, r3
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	429a      	cmp	r2, r3
 8001420:	da06      	bge.n	8001430 <refreshIncEnc+0x48>
	{
		count_diff += IncEnc->Init.count_max + 1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	3301      	adds	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e00d      	b.n	800144c <refreshIncEnc+0x64>
	}
	else if(count_diff > (int32_t)((IncEnc->Init.count_max + 1) >> 1))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	3301      	adds	r3, #1
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	461a      	mov	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4293      	cmp	r3, r2
 800143e:	dd05      	ble.n	800144c <refreshIncEnc+0x64>
	{
		count_diff -= IncEnc->Init.count_max + 1;
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	3b01      	subs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
	}

	IncEnc->count += count_diff;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1a      	ldr	r2, [r3, #32]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	441a      	add	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	621a      	str	r2, [r3, #32]

	IncEnc->position = IncEnc->count / (IncEnc->Init.PPR * 4.0 * IncEnc->Init.GearRatio_out2enc) * 2.0 * M_PI;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f879 	bl	8000554 <__aeabi_i2d>
 8001462:	4604      	mov	r4, r0
 8001464:	460d      	mov	r5, r1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f862 	bl	8000534 <__aeabi_ui2d>
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <refreshIncEnc+0x198>)
 8001476:	f7ff f8d7 	bl	8000628 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4690      	mov	r8, r2
 8001480:	4699      	mov	r9, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f876 	bl	8000578 <__aeabi_f2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4640      	mov	r0, r8
 8001492:	4649      	mov	r1, r9
 8001494:	f7ff f8c8 	bl	8000628 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f7ff f9ec 	bl	800087c <__aeabi_ddiv>
 80014a4:	4603      	mov	r3, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	4618      	mov	r0, r3
 80014aa:	4621      	mov	r1, r4
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	f7fe ff04 	bl	80002bc <__adddf3>
 80014b4:	4603      	mov	r3, r0
 80014b6:	460c      	mov	r4, r1
 80014b8:	4618      	mov	r0, r3
 80014ba:	4621      	mov	r1, r4
 80014bc:	a32a      	add	r3, pc, #168	; (adr r3, 8001568 <refreshIncEnc+0x180>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f8b1 	bl	8000628 <__aeabi_dmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	4618      	mov	r0, r3
 80014cc:	4621      	mov	r1, r4
 80014ce:	f7ff fb6d 	bl	8000bac <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24


	IncEnc->speed = IncEnc->speed * 0.6 + 0.4 * (IncEnc->position - IncEnc->p_position) / IncEnc->Init.cycleTime;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f84b 	bl	8000578 <__aeabi_f2d>
 80014e2:	a323      	add	r3, pc, #140	; (adr r3, 8001570 <refreshIncEnc+0x188>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f89e 	bl	8000628 <__aeabi_dmul>
 80014ec:	4603      	mov	r3, r0
 80014ee:	460c      	mov	r4, r1
 80014f0:	4625      	mov	r5, r4
 80014f2:	461c      	mov	r4, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001504:	ee17 0a90 	vmov	r0, s15
 8001508:	f7ff f836 	bl	8000578 <__aeabi_f2d>
 800150c:	a31a      	add	r3, pc, #104	; (adr r3, 8001578 <refreshIncEnc+0x190>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f889 	bl	8000628 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4690      	mov	r8, r2
 800151c:	4699      	mov	r9, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f828 	bl	8000578 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4640      	mov	r0, r8
 800152e:	4649      	mov	r1, r9
 8001530:	f7ff f9a4 	bl	800087c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe febe 	bl	80002bc <__adddf3>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	4618      	mov	r0, r3
 8001546:	4621      	mov	r1, r4
 8001548:	f7ff fb30 	bl	8000bac <__aeabi_d2f>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c


	IncEnc->p_position = IncEnc->position;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	629a      	str	r2, [r3, #40]	; 0x28

}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001564:	f3af 8000 	nop.w
 8001568:	54442d18 	.word	0x54442d18
 800156c:	400921fb 	.word	0x400921fb
 8001570:	33333333 	.word	0x33333333
 8001574:	3fe33333 	.word	0x3fe33333
 8001578:	9999999a 	.word	0x9999999a
 800157c:	3fd99999 	.word	0x3fd99999
 8001580:	40100000 	.word	0x40100000

08001584 <resetIncEnc>:




void resetIncEnc(IncEnc_TypeDef *IncEnc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

	IncEnc->htim->Instance->CNT = 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24

	IncEnc->raw_count = 0;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
	IncEnc->p_raw_count = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
	IncEnc->count = 0;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
	IncEnc->p_position = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
	IncEnc->speed = 0.0f;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c

}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 80015ce:	1df9      	adds	r1, r7, #7
 80015d0:	2301      	movs	r3, #1
 80015d2:	2201      	movs	r2, #1
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <__io_putchar+0x20>)
 80015d6:	f003 fd65 	bl	80050a4 <HAL_UART_Transmit>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000274 	.word	0x20000274

080015e8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
	printf("EXTI : %d\n", GPIO_Pin);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <HAL_GPIO_EXTI_Callback+0x24>)
 80015f8:	f004 f9e6 	bl	80059c8 <iprintf>

	resetIncEnc(&incEnc);
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <HAL_GPIO_EXTI_Callback+0x28>)
 80015fe:	f7ff ffc1 	bl	8001584 <resetIncEnc>

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	08007898 	.word	0x08007898
 8001610:	200001c0 	.word	0x200001c0
 8001614:	00000000 	.word	0x00000000

08001618 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8 && !__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a9a      	ldr	r2, [pc, #616]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001626:	4293      	cmp	r3, r2
 8001628:	f040 82c8 	bne.w	8001bbc <HAL_TIM_PeriodElapsedCallback+0x5a4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b10      	cmp	r3, #16
 8001638:	f000 82c0 	beq.w	8001bbc <HAL_TIM_PeriodElapsedCallback+0x5a4>
	{

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800163c:	2120      	movs	r1, #32
 800163e:	4895      	ldr	r0, [pc, #596]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001640:	f001 fe3f 	bl	80032c2 <HAL_GPIO_TogglePin>

		Iu_raw = HAL_ADC_GetValue(&hadc1);
 8001644:	4894      	ldr	r0, [pc, #592]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001646:	f001 f943 	bl	80028d0 <HAL_ADC_GetValue>
 800164a:	4602      	mov	r2, r0
 800164c:	4b93      	ldr	r3, [pc, #588]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800164e:	601a      	str	r2, [r3, #0]
		Iw_raw = HAL_ADC_GetValue(&hadc2);
 8001650:	4893      	ldr	r0, [pc, #588]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001652:	f001 f93d 	bl	80028d0 <HAL_ADC_GetValue>
 8001656:	4602      	mov	r2, r0
 8001658:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800165a:	601a      	str	r2, [r3, #0]
		Vdc_raw = HAL_ADC_GetValue(&hadc3);
 800165c:	4892      	ldr	r0, [pc, #584]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800165e:	f001 f937 	bl	80028d0 <HAL_ADC_GetValue>
 8001662:	4602      	mov	r2, r0
 8001664:	4b91      	ldr	r3, [pc, #580]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001666:	601a      	str	r2, [r3, #0]

		HAL_ADC_Start_IT(&hadc1);
 8001668:	488b      	ldr	r0, [pc, #556]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800166a:	f001 f861 	bl	8002730 <HAL_ADC_Start_IT>
		HAL_ADC_Start_IT(&hadc2);
 800166e:	488c      	ldr	r0, [pc, #560]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001670:	f001 f85e 	bl	8002730 <HAL_ADC_Start_IT>
		HAL_ADC_Start_IT(&hadc3);
 8001674:	488c      	ldr	r0, [pc, #560]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001676:	f001 f85b 	bl	8002730 <HAL_ADC_Start_IT>

		Iu = (Iu_raw / 4096.0f * 3.3 - V_Iu_offset) / 0.132f;
 800167a:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001686:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80018b0 <HAL_TIM_PeriodElapsedCallback+0x298>
 800168a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800168e:	ee16 0a90 	vmov	r0, s13
 8001692:	f7fe ff71 	bl	8000578 <__aeabi_f2d>
 8001696:	a372      	add	r3, pc, #456	; (adr r3, 8001860 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffc4 	bl	8000628 <__aeabi_dmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4625      	mov	r5, r4
 80016a6:	461c      	mov	r4, r3
 80016a8:	4b82      	ldr	r3, [pc, #520]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff63 	bl	8000578 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fdfd 	bl	80002b8 <__aeabi_dsub>
 80016be:	4603      	mov	r3, r0
 80016c0:	460c      	mov	r4, r1
 80016c2:	4618      	mov	r0, r3
 80016c4:	4621      	mov	r1, r4
 80016c6:	a368      	add	r3, pc, #416	; (adr r3, 8001868 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7ff f8d6 	bl	800087c <__aeabi_ddiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	4618      	mov	r0, r3
 80016d6:	4621      	mov	r1, r4
 80016d8:	f7ff fa68 	bl	8000bac <__aeabi_d2f>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80016e0:	601a      	str	r2, [r3, #0]
		Iw = (Iw_raw / 4096.0f * 3.3 - V_Iw_offset) / 0.132f;
 80016e2:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ee:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80018b0 <HAL_TIM_PeriodElapsedCallback+0x298>
 80016f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016f6:	ee16 0a90 	vmov	r0, s13
 80016fa:	f7fe ff3d 	bl	8000578 <__aeabi_f2d>
 80016fe:	a358      	add	r3, pc, #352	; (adr r3, 8001860 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff90 	bl	8000628 <__aeabi_dmul>
 8001708:	4603      	mov	r3, r0
 800170a:	460c      	mov	r4, r1
 800170c:	4625      	mov	r5, r4
 800170e:	461c      	mov	r4, r3
 8001710:	4b6a      	ldr	r3, [pc, #424]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff2f 	bl	8000578 <__aeabi_f2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f7fe fdc9 	bl	80002b8 <__aeabi_dsub>
 8001726:	4603      	mov	r3, r0
 8001728:	460c      	mov	r4, r1
 800172a:	4618      	mov	r0, r3
 800172c:	4621      	mov	r1, r4
 800172e:	a34e      	add	r3, pc, #312	; (adr r3, 8001868 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7ff f8a2 	bl	800087c <__aeabi_ddiv>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	4618      	mov	r0, r3
 800173e:	4621      	mov	r1, r4
 8001740:	f7ff fa34 	bl	8000bac <__aeabi_d2f>
 8001744:	4602      	mov	r2, r0
 8001746:	4b5e      	ldr	r3, [pc, #376]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001748:	601a      	str	r2, [r3, #0]
		Iv = - Iu - Iw;
 800174a:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	eeb1 7a67 	vneg.f32	s14, s15
 8001754:	4b5a      	ldr	r3, [pc, #360]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175e:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001760:	edc3 7a00 	vstr	s15, [r3]

		Vdc = (Vdc_raw / 4096.0f * 3.3 - 1.29) * 250.0f;
 8001764:	4b51      	ldr	r3, [pc, #324]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001770:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80018b0 <HAL_TIM_PeriodElapsedCallback+0x298>
 8001774:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001778:	ee16 0a90 	vmov	r0, s13
 800177c:	f7fe fefc 	bl	8000578 <__aeabi_f2d>
 8001780:	a337      	add	r3, pc, #220	; (adr r3, 8001860 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff4f 	bl	8000628 <__aeabi_dmul>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	a337      	add	r3, pc, #220	; (adr r3, 8001870 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe fd8e 	bl	80002b8 <__aeabi_dsub>
 800179c:	4603      	mov	r3, r0
 800179e:	460c      	mov	r4, r1
 80017a0:	4618      	mov	r0, r3
 80017a2:	4621      	mov	r1, r4
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80017aa:	f7fe ff3d 	bl	8000628 <__aeabi_dmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	4618      	mov	r0, r3
 80017b4:	4621      	mov	r1, r4
 80017b6:	f7ff f9f9 	bl	8000bac <__aeabi_d2f>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80017be:	601a      	str	r2, [r3, #0]


		if((freq - freq_ref) < -0.02)
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017c2:	ed93 7a00 	vldr	s14, [r3]
 80017c6:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d0:	ee17 0a90 	vmov	r0, s15
 80017d4:	f7fe fed0 	bl	8000578 <__aeabi_f2d>
 80017d8:	a327      	add	r3, pc, #156	; (adr r3, 8001878 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7ff f995 	bl	8000b0c <__aeabi_dcmplt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d013      	beq.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x1f8>
		{
			freq += 0.01;
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fec3 	bl	8000578 <__aeabi_f2d>
 80017f2:	a323      	add	r3, pc, #140	; (adr r3, 8001880 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe fd60 	bl	80002bc <__adddf3>
 80017fc:	4603      	mov	r3, r0
 80017fe:	460c      	mov	r4, r1
 8001800:	4618      	mov	r0, r3
 8001802:	4621      	mov	r1, r4
 8001804:	f7ff f9d2 	bl	8000bac <__aeabi_d2f>
 8001808:	4602      	mov	r2, r0
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e067      	b.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x2c8>
		}
		else if((freq - freq_ref) > 0.02)
 8001810:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001812:	ed93 7a00 	vldr	s14, [r3]
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001820:	ee17 0a90 	vmov	r0, s15
 8001824:	f7fe fea8 	bl	8000578 <__aeabi_f2d>
 8001828:	a317      	add	r3, pc, #92	; (adr r3, 8001888 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7ff f98b 	bl	8000b48 <__aeabi_dcmpgt>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d04f      	beq.n	80018d8 <HAL_TIM_PeriodElapsedCallback+0x2c0>
		{
			freq -= 0.01;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe9b 	bl	8000578 <__aeabi_f2d>
 8001842:	a30f      	add	r3, pc, #60	; (adr r3, 8001880 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	f7fe fd36 	bl	80002b8 <__aeabi_dsub>
 800184c:	4603      	mov	r3, r0
 800184e:	460c      	mov	r4, r1
 8001850:	4618      	mov	r0, r3
 8001852:	4621      	mov	r1, r4
 8001854:	f7ff f9aa 	bl	8000bac <__aeabi_d2f>
 8001858:	4602      	mov	r2, r0
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e03f      	b.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001860:	66666666 	.word	0x66666666
 8001864:	400a6666 	.word	0x400a6666
 8001868:	40000000 	.word	0x40000000
 800186c:	3fc0e560 	.word	0x3fc0e560
 8001870:	0a3d70a4 	.word	0x0a3d70a4
 8001874:	3ff4a3d7 	.word	0x3ff4a3d7
 8001878:	47ae147b 	.word	0x47ae147b
 800187c:	bf947ae1 	.word	0xbf947ae1
 8001880:	47ae147b 	.word	0x47ae147b
 8001884:	3f847ae1 	.word	0x3f847ae1
 8001888:	47ae147b 	.word	0x47ae147b
 800188c:	3f947ae1 	.word	0x3f947ae1
 8001890:	40010400 	.word	0x40010400
 8001894:	40020000 	.word	0x40020000
 8001898:	20000130 	.word	0x20000130
 800189c:	20000094 	.word	0x20000094
 80018a0:	200000e8 	.word	0x200000e8
 80018a4:	20000098 	.word	0x20000098
 80018a8:	20000178 	.word	0x20000178
 80018ac:	2000009c 	.word	0x2000009c
 80018b0:	45800000 	.word	0x45800000
 80018b4:	20000000 	.word	0x20000000
 80018b8:	200000a0 	.word	0x200000a0
 80018bc:	20000004 	.word	0x20000004
 80018c0:	200000a8 	.word	0x200000a8
 80018c4:	200000a4 	.word	0x200000a4
 80018c8:	406f4000 	.word	0x406f4000
 80018cc:	200000ac 	.word	0x200000ac
 80018d0:	200000b4 	.word	0x200000b4
 80018d4:	200000b0 	.word	0x200000b0
		}
		else
		{
			freq = freq_ref;
 80018d8:	4bc5      	ldr	r3, [pc, #788]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4ac5      	ldr	r2, [pc, #788]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80018de:	6013      	str	r3, [r2, #0]
		}

		voltage = V_F_Rate * freq;
 80018e0:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8001bf8 <HAL_TIM_PeriodElapsedCallback+0x5e0>
 80018e4:	4bc3      	ldr	r3, [pc, #780]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ee:	4bc3      	ldr	r3, [pc, #780]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80018f0:	edc3 7a00 	vstr	s15, [r3]

		Vu = voltage / sqrt(3) * sin(phase);
 80018f4:	4bc1      	ldr	r3, [pc, #772]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe3d 	bl	8000578 <__aeabi_f2d>
 80018fe:	a3b2      	add	r3, pc, #712	; (adr r3, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe ffba 	bl	800087c <__aeabi_ddiv>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	4625      	mov	r5, r4
 800190e:	461c      	mov	r4, r3
 8001910:	4bbb      	ldr	r3, [pc, #748]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe2f 	bl	8000578 <__aeabi_f2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	ec43 2b10 	vmov	d0, r2, r3
 8001922:	f004 ff99 	bl	8006858 <sin>
 8001926:	ec53 2b10 	vmov	r2, r3, d0
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe fe7b 	bl	8000628 <__aeabi_dmul>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	f7ff f937 	bl	8000bac <__aeabi_d2f>
 800193e:	4602      	mov	r2, r0
 8001940:	4bb0      	ldr	r3, [pc, #704]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001942:	601a      	str	r2, [r3, #0]
		Vv = voltage / sqrt(3) * sin(phase - 2.0f * M_PI / 3.0f);
 8001944:	4bad      	ldr	r3, [pc, #692]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe15 	bl	8000578 <__aeabi_f2d>
 800194e:	a39e      	add	r3, pc, #632	; (adr r3, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe ff92 	bl	800087c <__aeabi_ddiv>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	4625      	mov	r5, r4
 800195e:	461c      	mov	r4, r3
 8001960:	4ba7      	ldr	r3, [pc, #668]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fe07 	bl	8000578 <__aeabi_f2d>
 800196a:	a399      	add	r3, pc, #612	; (adr r3, 8001bd0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fca2 	bl	80002b8 <__aeabi_dsub>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	ec43 2b17 	vmov	d7, r2, r3
 800197c:	eeb0 0a47 	vmov.f32	s0, s14
 8001980:	eef0 0a67 	vmov.f32	s1, s15
 8001984:	f004 ff68 	bl	8006858 <sin>
 8001988:	ec53 2b10 	vmov	r2, r3, d0
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fe4a 	bl	8000628 <__aeabi_dmul>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	4618      	mov	r0, r3
 800199a:	4621      	mov	r1, r4
 800199c:	f7ff f906 	bl	8000bac <__aeabi_d2f>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b99      	ldr	r3, [pc, #612]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80019a4:	601a      	str	r2, [r3, #0]
		Vw = voltage / sqrt(3) * sin(phase - 4.0f * M_PI / 3.0f);
 80019a6:	4b95      	ldr	r3, [pc, #596]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fde4 	bl	8000578 <__aeabi_f2d>
 80019b0:	a385      	add	r3, pc, #532	; (adr r3, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe ff61 	bl	800087c <__aeabi_ddiv>
 80019ba:	4603      	mov	r3, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	4625      	mov	r5, r4
 80019c0:	461c      	mov	r4, r3
 80019c2:	4b8f      	ldr	r3, [pc, #572]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdd6 	bl	8000578 <__aeabi_f2d>
 80019cc:	a382      	add	r3, pc, #520	; (adr r3, 8001bd8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe fc71 	bl	80002b8 <__aeabi_dsub>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	ec43 2b17 	vmov	d7, r2, r3
 80019de:	eeb0 0a47 	vmov.f32	s0, s14
 80019e2:	eef0 0a67 	vmov.f32	s1, s15
 80019e6:	f004 ff37 	bl	8006858 <sin>
 80019ea:	ec53 2b10 	vmov	r2, r3, d0
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	f7fe fe19 	bl	8000628 <__aeabi_dmul>
 80019f6:	4603      	mov	r3, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	4618      	mov	r0, r3
 80019fc:	4621      	mov	r1, r4
 80019fe:	f7ff f8d5 	bl	8000bac <__aeabi_d2f>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b81      	ldr	r3, [pc, #516]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001a06:	601a      	str	r2, [r3, #0]

		phase += 2 * M_PI * freq * 0.001;
 8001a08:	4b7d      	ldr	r3, [pc, #500]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fdb3 	bl	8000578 <__aeabi_f2d>
 8001a12:	4604      	mov	r4, r0
 8001a14:	460d      	mov	r5, r1
 8001a16:	4b77      	ldr	r3, [pc, #476]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fdac 	bl	8000578 <__aeabi_f2d>
 8001a20:	a36f      	add	r3, pc, #444	; (adr r3, 8001be0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fdff 	bl	8000628 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	a36d      	add	r3, pc, #436	; (adr r3, 8001be8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fdf6 	bl	8000628 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	f7fe fc3a 	bl	80002bc <__adddf3>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	4621      	mov	r1, r4
 8001a50:	f7ff f8ac 	bl	8000bac <__aeabi_d2f>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a58:	601a      	str	r2, [r3, #0]

		amp_u = Vu / VDC + 0.5;
 8001a5a:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a5c:	ed93 7a00 	vldr	s14, [r3]
 8001a60:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001c10 <HAL_TIM_PeriodElapsedCallback+0x5f8>
 8001a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a70:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001a72:	edc3 7a00 	vstr	s15, [r3]
		amp_v = Vv / VDC + 0.5;
 8001a76:	4b64      	ldr	r3, [pc, #400]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001a78:	ed93 7a00 	vldr	s14, [r3]
 8001a7c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001c10 <HAL_TIM_PeriodElapsedCallback+0x5f8>
 8001a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a8c:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001a8e:	edc3 7a00 	vstr	s15, [r3]
		amp_w = Vw / VDC + 0.5;
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001a94:	ed93 7a00 	vldr	s14, [r3]
 8001a98:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001c10 <HAL_TIM_PeriodElapsedCallback+0x5f8>
 8001a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001aa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aa8:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001aaa:	edc3 7a00 	vstr	s15, [r3]

		if(amp_u < 0.0){ amp_u = 0.0; }else if(amp_u > 1.0){ amp_u = 1.0; }
 8001aae:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	d504      	bpl.n	8001ac8 <HAL_TIM_PeriodElapsedCallback+0x4b0>
 8001abe:	4b55      	ldr	r3, [pc, #340]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e00d      	b.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x4cc>
 8001ac8:	4b52      	ldr	r3, [pc, #328]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	dd03      	ble.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x4cc>
 8001adc:	4b4d      	ldr	r3, [pc, #308]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001ade:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ae2:	601a      	str	r2, [r3, #0]
		if(amp_v < 0.0){ amp_v = 0.0; }else if(amp_v > 1.0){ amp_v = 1.0; }
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	d504      	bpl.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x4e6>
 8001af4:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e00d      	b.n	8001b1a <HAL_TIM_PeriodElapsedCallback+0x502>
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	dd03      	ble.n	8001b1a <HAL_TIM_PeriodElapsedCallback+0x502>
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001b14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b18:	601a      	str	r2, [r3, #0]
		if(amp_w < 0.0){ amp_w = 0.0; }else if(amp_w > 1.0){ amp_w = 1.0; }
 8001b1a:	4b40      	ldr	r3, [pc, #256]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	d504      	bpl.n	8001b34 <HAL_TIM_PeriodElapsedCallback+0x51c>
 8001b2a:	4b3c      	ldr	r3, [pc, #240]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e00d      	b.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x538>
 8001b34:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	dd03      	ble.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x538>
 8001b48:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001b4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b4e:	601a      	str	r2, [r3, #0]


		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, htim->Init.Period * amp_u);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b6e:	ee17 2a90 	vmov	r2, s15
 8001b72:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, htim->Init.Period * amp_v);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b92:	ee17 2a90 	vmov	r2, s15
 8001b96:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, htim->Init.Period * amp_w);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb6:	ee17 2a90 	vmov	r2, s15
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c


	}

}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	e8584caa 	.word	0xe8584caa
 8001bcc:	3ffbb67a 	.word	0x3ffbb67a
 8001bd0:	382d7365 	.word	0x382d7365
 8001bd4:	4000c152 	.word	0x4000c152
 8001bd8:	382d7365 	.word	0x382d7365
 8001bdc:	4010c152 	.word	0x4010c152
 8001be0:	54442d18 	.word	0x54442d18
 8001be4:	401921fb 	.word	0x401921fb
 8001be8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bec:	3f50624d 	.word	0x3f50624d
 8001bf0:	200000b0 	.word	0x200000b0
 8001bf4:	200000b4 	.word	0x200000b4
 8001bf8:	40555555 	.word	0x40555555
 8001bfc:	200000b8 	.word	0x200000b8
 8001c00:	200000bc 	.word	0x200000bc
 8001c04:	200000c0 	.word	0x200000c0
 8001c08:	200000c4 	.word	0x200000c4
 8001c0c:	200000c8 	.word	0x200000c8
 8001c10:	430d6666 	.word	0x430d6666
 8001c14:	200000cc 	.word	0x200000cc
 8001c18:	200000d0 	.word	0x200000d0
 8001c1c:	200000d4 	.word	0x200000d4

08001c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c24:	f000 fcac 	bl	8002580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c28:	f000 f87c 	bl	8001d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c2c:	f7ff fb28 	bl	8001280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c30:	f000 fc0a 	bl	8002448 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001c34:	f7ff f98a 	bl	8000f4c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c38:	f7ff f9da 	bl	8000ff0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001c3c:	f7ff fa2a 	bl	8001094 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001c40:	f000 fa08 	bl	8002054 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001c44:	f000 fa5e 	bl	8002104 <MX_TIM8_Init>

  /******************** Initialization ********************/


  // PWM Setting
  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <main+0xe0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0201 	mvn.w	r2, #1
 8001c50:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <main+0xe0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <main+0xe0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	60da      	str	r2, [r3, #12]

  HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_UPDATE);
 8001c62:	2101      	movs	r1, #1
 8001c64:	4826      	ldr	r0, [pc, #152]	; (8001d00 <main+0xe0>)
 8001c66:	f002 fc5f 	bl	8004528 <HAL_TIM_GenerateEvent>
  HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_TRIGGER);
 8001c6a:	2140      	movs	r1, #64	; 0x40
 8001c6c:	4824      	ldr	r0, [pc, #144]	; (8001d00 <main+0xe0>)
 8001c6e:	f002 fc5b 	bl	8004528 <HAL_TIM_GenerateEvent>


  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8001c72:	2100      	movs	r1, #0
 8001c74:	4822      	ldr	r0, [pc, #136]	; (8001d00 <main+0xe0>)
 8001c76:	f002 f91b 	bl	8003eb0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	4820      	ldr	r0, [pc, #128]	; (8001d00 <main+0xe0>)
 8001c7e:	f002 f917 	bl	8003eb0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 8001c82:	2108      	movs	r1, #8
 8001c84:	481e      	ldr	r0, [pc, #120]	; (8001d00 <main+0xe0>)
 8001c86:	f002 f913 	bl	8003eb0 <HAL_TIM_PWM_Start_IT>

  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	481c      	ldr	r0, [pc, #112]	; (8001d00 <main+0xe0>)
 8001c8e:	f003 f860 	bl	8004d52 <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 8001c92:	2104      	movs	r1, #4
 8001c94:	481a      	ldr	r0, [pc, #104]	; (8001d00 <main+0xe0>)
 8001c96:	f003 f85c 	bl	8004d52 <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	4818      	ldr	r0, [pc, #96]	; (8001d00 <main+0xe0>)
 8001c9e:	f003 f858 	bl	8004d52 <HAL_TIMEx_PWMN_Start_IT>



  // ADC Setting
  HAL_ADC_Start_IT(&hadc1);
 8001ca2:	4818      	ldr	r0, [pc, #96]	; (8001d04 <main+0xe4>)
 8001ca4:	f000 fd44 	bl	8002730 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8001ca8:	4817      	ldr	r0, [pc, #92]	; (8001d08 <main+0xe8>)
 8001caa:	f000 fd41 	bl	8002730 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 8001cae:	4817      	ldr	r0, [pc, #92]	; (8001d0c <main+0xec>)
 8001cb0:	f000 fd3e 	bl	8002730 <HAL_ADC_Start_IT>


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	4815      	ldr	r0, [pc, #84]	; (8001d10 <main+0xf0>)
 8001cba:	f001 fae9 	bl	8003290 <HAL_GPIO_WritePin>


  printf("Hello myServoAmpProject. \n");
 8001cbe:	4815      	ldr	r0, [pc, #84]	; (8001d14 <main+0xf4>)
 8001cc0:	f003 fef6 	bl	8005ab0 <puts>

  IncEnc_Init();
 8001cc4:	f7ff fb68 	bl	8001398 <IncEnc_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static int count = 0;

	  HAL_Delay(1);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f000 fccb 	bl	8002664 <HAL_Delay>

	  refreshIncEnc(&incEnc);
 8001cce:	4812      	ldr	r0, [pc, #72]	; (8001d18 <main+0xf8>)
 8001cd0:	f7ff fb8a 	bl	80013e8 <refreshIncEnc>

	  if(count < 10)
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <main+0xfc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	dc05      	bgt.n	8001ce8 <main+0xc8>
	  {
		  count++;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <main+0xfc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <main+0xfc>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e7ef      	b.n	8001cc8 <main+0xa8>
	  }
	  else
	  {
		  printf("count = %d\n", incEnc.htim->Instance->CNT);
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <main+0xf8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <main+0x100>)
 8001cf4:	f003 fe68 	bl	80059c8 <iprintf>
		  count = 0;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <main+0xfc>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
  {
 8001cfe:	e7e3      	b.n	8001cc8 <main+0xa8>
 8001d00:	200001f4 	.word	0x200001f4
 8001d04:	20000130 	.word	0x20000130
 8001d08:	200000e8 	.word	0x200000e8
 8001d0c:	20000178 	.word	0x20000178
 8001d10:	40020000 	.word	0x40020000
 8001d14:	080078a4 	.word	0x080078a4
 8001d18:	200001c0 	.word	0x200001c0
 8001d1c:	200000d8 	.word	0x200000d8
 8001d20:	080078c0 	.word	0x080078c0

08001d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	; 0x50
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2234      	movs	r2, #52	; 0x34
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fe40 	bl	80059b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <SystemClock_Config+0xe0>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	4a2c      	ldr	r2, [pc, #176]	; (8001e04 <SystemClock_Config+0xe0>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	; 0x40
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <SystemClock_Config+0xe0>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d64:	2300      	movs	r3, #0
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <SystemClock_Config+0xe4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <SystemClock_Config+0xe4>)
 8001d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <SystemClock_Config+0xe4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d84:	2301      	movs	r3, #1
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d88:	2310      	movs	r3, #16
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d94:	2310      	movs	r3, #16
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001d98:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001d9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001da2:	2302      	movs	r3, #2
 8001da4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fdc4 	bl	800393c <HAL_RCC_OscConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001dba:	f000 f827 	bl	8001e0c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dbe:	f001 fab3 	bl	8003328 <HAL_PWREx_EnableOverDrive>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001dc8:	f000 f820 	bl	8001e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dcc:	230f      	movs	r3, #15
 8001dce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ddc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	2105      	movs	r1, #5
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 faec 	bl	80033c8 <HAL_RCC_ClockConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001df6:	f000 f809 	bl	8001e0c <Error_Handler>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3750      	adds	r7, #80	; 0x50
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000

08001e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e5a:	2007      	movs	r0, #7
 8001e5c:	f001 f844 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800

08001e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler+0x4>

08001e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 fbb0 	bl	8002624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ecc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ed0:	f001 fa12 	bl	80032f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ed4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ed8:	f001 fa0e 	bl	80032f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001ee6:	f002 f950 	bl	800418a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200001f4 	.word	0x200001f4

08001ef4 <_read>:
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e00a      	b.n	8001f1c <_read+0x28>
 8001f06:	f3af 8000 	nop.w
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60ba      	str	r2, [r7, #8]
 8001f12:	b2ca      	uxtb	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf0      	blt.n	8001f06 <_read+0x12>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_write>:
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e009      	b.n	8001f54 <_write+0x26>
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fb3b 	bl	80015c4 <__io_putchar>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf1      	blt.n	8001f40 <_write+0x12>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_close>:
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_fstat>:
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	2300      	movs	r3, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_isatty>:
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_lseek>:
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <_sbrk>:
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_sbrk+0x50>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x16>
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <_sbrk+0x50>)
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <_sbrk+0x54>)
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <_sbrk+0x50>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <_sbrk+0x50>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	466a      	mov	r2, sp
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d907      	bls.n	800200a <_sbrk+0x3a>
 8001ffa:	f003 fcb3 	bl	8005964 <__errno>
 8001ffe:	4602      	mov	r2, r0
 8002000:	230c      	movs	r3, #12
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	e006      	b.n	8002018 <_sbrk+0x48>
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <_sbrk+0x50>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a03      	ldr	r2, [pc, #12]	; (8002020 <_sbrk+0x50>)
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200000dc 	.word	0x200000dc
 8002024:	200002c0 	.word	0x200002c0

08002028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <SystemInit+0x28>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	4a07      	ldr	r2, [pc, #28]	; (8002050 <SystemInit+0x28>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <SystemInit+0x28>)
 800203e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002042:	609a      	str	r2, [r3, #8]
#endif
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	2224      	movs	r2, #36	; 0x24
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fca8 	bl	80059b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <MX_TIM1_Init+0xa8>)
 8002072:	4a23      	ldr	r2, [pc, #140]	; (8002100 <MX_TIM1_Init+0xac>)
 8002074:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <MX_TIM1_Init+0xa8>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <MX_TIM1_Init+0xa8>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <MX_TIM1_Init+0xa8>)
 8002084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002088:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <MX_TIM1_Init+0xa8>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <MX_TIM1_Init+0xa8>)
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <MX_TIM1_Init+0xa8>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800209c:	2303      	movs	r3, #3
 800209e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020a4:	2301      	movs	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020b4:	2301      	movs	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <MX_TIM1_Init+0xa8>)
 80020c8:	f001 ff76 	bl	8003fb8 <HAL_TIM_Encoder_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80020d2:	f7ff fe9b 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4806      	ldr	r0, [pc, #24]	; (80020fc <MX_TIM1_Init+0xa8>)
 80020e4:	f002 fe8a 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80020ee:	f7ff fe8d 	bl	8001e0c <Error_Handler>
  }

}
 80020f2:	bf00      	nop
 80020f4:	3730      	adds	r7, #48	; 0x30
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000234 	.word	0x20000234
 8002100:	40010000 	.word	0x40010000

08002104 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b096      	sub	sp, #88	; 0x58
 8002108:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002118:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]
 8002132:	615a      	str	r2, [r3, #20]
 8002134:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	2220      	movs	r2, #32
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fc3b 	bl	80059b8 <memset>

  htim8.Instance = TIM8;
 8002142:	4b4a      	ldr	r3, [pc, #296]	; (800226c <MX_TIM8_Init+0x168>)
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <MX_TIM8_Init+0x16c>)
 8002146:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 10;
 8002148:	4b48      	ldr	r3, [pc, #288]	; (800226c <MX_TIM8_Init+0x168>)
 800214a:	220a      	movs	r2, #10
 800214c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <MX_TIM8_Init+0x168>)
 8002150:	2220      	movs	r2, #32
 8002152:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9000;
 8002154:	4b45      	ldr	r3, [pc, #276]	; (800226c <MX_TIM8_Init+0x168>)
 8002156:	f242 3228 	movw	r2, #9000	; 0x2328
 800215a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215c:	4b43      	ldr	r3, [pc, #268]	; (800226c <MX_TIM8_Init+0x168>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002162:	4b42      	ldr	r3, [pc, #264]	; (800226c <MX_TIM8_Init+0x168>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002168:	4b40      	ldr	r3, [pc, #256]	; (800226c <MX_TIM8_Init+0x168>)
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800216e:	483f      	ldr	r0, [pc, #252]	; (800226c <MX_TIM8_Init+0x168>)
 8002170:	f001 fe3e 	bl	8003df0 <HAL_TIM_Base_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800217a:	f7ff fe47 	bl	8001e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002182:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002184:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002188:	4619      	mov	r1, r3
 800218a:	4838      	ldr	r0, [pc, #224]	; (800226c <MX_TIM8_Init+0x168>)
 800218c:	f002 f9f3 	bl	8004576 <HAL_TIM_ConfigClockSource>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002196:	f7ff fe39 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800219a:	4834      	ldr	r0, [pc, #208]	; (800226c <MX_TIM8_Init+0x168>)
 800219c:	f001 fe53 	bl	8003e46 <HAL_TIM_PWM_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80021a6:	f7ff fe31 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021aa:	2320      	movs	r3, #32
 80021ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021b6:	4619      	mov	r1, r3
 80021b8:	482c      	ldr	r0, [pc, #176]	; (800226c <MX_TIM8_Init+0x168>)
 80021ba:	f002 fe1f 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80021c4:	f7ff fe22 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c8:	2360      	movs	r3, #96	; 0x60
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4500;
 80021cc:	f241 1394 	movw	r3, #4500	; 0x1194
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021d6:	2300      	movs	r3, #0
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ea:	2200      	movs	r2, #0
 80021ec:	4619      	mov	r1, r3
 80021ee:	481f      	ldr	r0, [pc, #124]	; (800226c <MX_TIM8_Init+0x168>)
 80021f0:	f002 f8d4 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80021fa:	f7ff fe07 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	2204      	movs	r2, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4819      	ldr	r0, [pc, #100]	; (800226c <MX_TIM8_Init+0x168>)
 8002208:	f002 f8c8 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8002212:	f7ff fdfb 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221a:	2208      	movs	r2, #8
 800221c:	4619      	mov	r1, r3
 800221e:	4813      	ldr	r0, [pc, #76]	; (800226c <MX_TIM8_Init+0x168>)
 8002220:	f002 f8bc 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800222a:	f7ff fdef 	bl	8001e0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 800223a:	2396      	movs	r3, #150	; 0x96
 800223c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4807      	ldr	r0, [pc, #28]	; (800226c <MX_TIM8_Init+0x168>)
 8002250:	f002 fe50 	bl	8004ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800225a:	f7ff fdd7 	bl	8001e0c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800225e:	4803      	ldr	r0, [pc, #12]	; (800226c <MX_TIM8_Init+0x168>)
 8002260:	f000 f878 	bl	8002354 <HAL_TIM_MspPostInit>

}
 8002264:	bf00      	nop
 8002266:	3758      	adds	r7, #88	; 0x58
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200001f4 	.word	0x200001f4
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d12c      	bne.n	80022f0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_TIM_Encoder_MspInit+0x88>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_TIM_Encoder_MspInit+0x88>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_TIM_Encoder_MspInit+0x88>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_TIM_Encoder_MspInit+0x88>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_TIM_Encoder_MspInit+0x88>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_TIM_Encoder_MspInit+0x88>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022ec:	f000 fe3e 	bl	8002f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000

08002304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_TIM_Base_MspInit+0x48>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d115      	bne.n	8002342 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_TIM_Base_MspInit+0x4c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_TIM_Base_MspInit+0x4c>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_TIM_Base_MspInit+0x4c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	202c      	movs	r0, #44	; 0x2c
 8002338:	f000 fde1 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800233c:	202c      	movs	r0, #44	; 0x2c
 800233e:	f000 fdfa 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40010400 	.word	0x40010400
 8002350:	40023800 	.word	0x40023800

08002354 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a30      	ldr	r2, [pc, #192]	; (8002434 <HAL_TIM_MspPostInit+0xe0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d15a      	bne.n	800242c <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_TIM_MspPostInit+0xe4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a2e      	ldr	r2, [pc, #184]	; (8002438 <HAL_TIM_MspPostInit+0xe4>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_TIM_MspPostInit+0xe4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_TIM_MspPostInit+0xe4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a27      	ldr	r2, [pc, #156]	; (8002438 <HAL_TIM_MspPostInit+0xe4>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_TIM_MspPostInit+0xe4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_TIM_MspPostInit+0xe4>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <HAL_TIM_MspPostInit+0xe4>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_TIM_MspPostInit+0xe4>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023da:	2303      	movs	r3, #3
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	4815      	ldr	r0, [pc, #84]	; (800243c <HAL_TIM_MspPostInit+0xe8>)
 80023e6:	f000 fdc1 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ea:	2303      	movs	r3, #3
 80023ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023fa:	2303      	movs	r3, #3
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	480e      	ldr	r0, [pc, #56]	; (8002440 <HAL_TIM_MspPostInit+0xec>)
 8002406:	f000 fdb1 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800240a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800241c:	2303      	movs	r3, #3
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	4807      	ldr	r0, [pc, #28]	; (8002444 <HAL_TIM_MspPostInit+0xf0>)
 8002428:	f000 fda0 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40010400 	.word	0x40010400
 8002438:	40023800 	.word	0x40023800
 800243c:	40020000 	.word	0x40020000
 8002440:	40020400 	.word	0x40020400
 8002444:	40020800 	.word	0x40020800

08002448 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <MX_USART2_UART_Init+0x50>)
 8002450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002480:	f002 fdc3 	bl	800500a <HAL_UART_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800248a:	f7ff fcbf 	bl	8001e0c <Error_Handler>
  }

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000274 	.word	0x20000274
 8002498:	40004400 	.word	0x40004400

0800249c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_UART_MspInit+0x84>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d12b      	bne.n	8002516 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024f6:	230c      	movs	r3, #12
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002506:	2307      	movs	r3, #7
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	; (8002528 <HAL_UART_MspInit+0x8c>)
 8002512:	f000 fd2b 	bl	8002f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	; 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40004400 	.word	0x40004400
 8002524:	40023800 	.word	0x40023800
 8002528:	40020000 	.word	0x40020000

0800252c <Reset_Handler>:
 800252c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002564 <LoopFillZerobss+0x14>
 8002530:	2100      	movs	r1, #0
 8002532:	e003      	b.n	800253c <LoopCopyDataInit>

08002534 <CopyDataInit>:
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <LoopFillZerobss+0x18>)
 8002536:	585b      	ldr	r3, [r3, r1]
 8002538:	5043      	str	r3, [r0, r1]
 800253a:	3104      	adds	r1, #4

0800253c <LoopCopyDataInit>:
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <LoopFillZerobss+0x1c>)
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <LoopFillZerobss+0x20>)
 8002540:	1842      	adds	r2, r0, r1
 8002542:	429a      	cmp	r2, r3
 8002544:	d3f6      	bcc.n	8002534 <CopyDataInit>
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <LoopFillZerobss+0x24>)
 8002548:	e002      	b.n	8002550 <LoopFillZerobss>

0800254a <FillZerobss>:
 800254a:	2300      	movs	r3, #0
 800254c:	f842 3b04 	str.w	r3, [r2], #4

08002550 <LoopFillZerobss>:
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <LoopFillZerobss+0x28>)
 8002552:	429a      	cmp	r2, r3
 8002554:	d3f9      	bcc.n	800254a <FillZerobss>
 8002556:	f7ff fd67 	bl	8002028 <SystemInit>
 800255a:	f003 fa09 	bl	8005970 <__libc_init_array>
 800255e:	f7ff fb5f 	bl	8001c20 <main>
 8002562:	4770      	bx	lr
 8002564:	20020000 	.word	0x20020000
 8002568:	08007b68 	.word	0x08007b68
 800256c:	20000000 	.word	0x20000000
 8002570:	20000078 	.word	0x20000078
 8002574:	20000078 	.word	0x20000078
 8002578:	200002bc 	.word	0x200002bc

0800257c <ADC_IRQHandler>:
 800257c:	e7fe      	b.n	800257c <ADC_IRQHandler>
	...

08002580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_Init+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <HAL_Init+0x40>)
 800258a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_Init+0x40>)
 8002596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <HAL_Init+0x40>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a8:	2003      	movs	r0, #3
 80025aa:	f000 fc9d 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f000 f808 	bl	80025c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b4:	f7ff fc32 	bl	8001e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c00 	.word	0x40023c00

080025c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_InitTick+0x54>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_InitTick+0x58>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025da:	fbb3 f3f1 	udiv	r3, r3, r1
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fcb5 	bl	8002f52 <HAL_SYSTICK_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00e      	b.n	8002610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b0f      	cmp	r3, #15
 80025f6:	d80a      	bhi.n	800260e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f8:	2200      	movs	r2, #0
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f000 fc7d 	bl	8002efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002604:	4a06      	ldr	r2, [pc, #24]	; (8002620 <HAL_InitTick+0x5c>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000008 	.word	0x20000008
 800261c:	20000010 	.word	0x20000010
 8002620:	2000000c 	.word	0x2000000c

08002624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x20>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_IncTick+0x24>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4413      	add	r3, r2
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_IncTick+0x24>)
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000010 	.word	0x20000010
 8002648:	200002b4 	.word	0x200002b4

0800264c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return uwTick;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_GetTick+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	200002b4 	.word	0x200002b4

08002664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800266c:	f7ff ffee 	bl	800264c <HAL_GetTick>
 8002670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d005      	beq.n	800268a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_Delay+0x40>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800268a:	bf00      	nop
 800268c:	f7ff ffde 	bl	800264c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d8f7      	bhi.n	800268c <HAL_Delay+0x28>
  {
  }
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000010 	.word	0x20000010

080026a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e033      	b.n	8002726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe fd36 	bl	8001138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa28 	bl	8002b50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
 8002716:	e001      	b.n	800271c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_Start_IT+0x1a>
 8002746:	2302      	movs	r3, #2
 8002748:	e0b0      	b.n	80028ac <HAL_ADC_Start_IT+0x17c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d018      	beq.n	8002792 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002770:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <HAL_ADC_Start_IT+0x188>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a51      	ldr	r2, [pc, #324]	; (80028bc <HAL_ADC_Start_IT+0x18c>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0c9a      	lsrs	r2, r3, #18
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002784:	e002      	b.n	800278c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3b01      	subs	r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f9      	bne.n	8002786 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	f040 8084 	bne.w	80028aa <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e0:	d106      	bne.n	80027f0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f023 0206 	bic.w	r2, r3, #6
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
 80027ee:	e002      	b.n	80027f6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <HAL_ADC_Start_IT+0x190>)
 8002800:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800280a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800281a:	f043 0320 	orr.w	r3, r3, #32
 800281e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2b00      	cmp	r3, #0
 800282a:	d12a      	bne.n	8002882 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <HAL_ADC_Start_IT+0x194>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d015      	beq.n	8002862 <HAL_ADC_Start_IT+0x132>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <HAL_ADC_Start_IT+0x198>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d105      	bne.n	800284c <HAL_ADC_Start_IT+0x11c>
 8002840:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <HAL_ADC_Start_IT+0x190>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <HAL_ADC_Start_IT+0x19c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d129      	bne.n	80028aa <HAL_ADC_Start_IT+0x17a>
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_ADC_Start_IT+0x190>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2b0f      	cmp	r3, #15
 8002860:	d823      	bhi.n	80028aa <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11c      	bne.n	80028aa <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e013      	b.n	80028aa <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_ADC_Start_IT+0x194>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d10e      	bne.n	80028aa <HAL_ADC_Start_IT+0x17a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028a8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	20000008 	.word	0x20000008
 80028bc:	431bde83 	.word	0x431bde83
 80028c0:	40012300 	.word	0x40012300
 80028c4:	40012000 	.word	0x40012000
 80028c8:	40012100 	.word	0x40012100
 80028cc:	40012200 	.word	0x40012200

080028d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1c>
 8002904:	2302      	movs	r3, #2
 8002906:	e113      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x244>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b09      	cmp	r3, #9
 8002916:	d925      	bls.n	8002964 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68d9      	ldr	r1, [r3, #12]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	3b1e      	subs	r3, #30
 800292e:	2207      	movs	r2, #7
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43da      	mvns	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	400a      	ands	r2, r1
 800293c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	4603      	mov	r3, r0
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4403      	add	r3, r0
 8002956:	3b1e      	subs	r3, #30
 8002958:	409a      	lsls	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	e022      	b.n	80029aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6919      	ldr	r1, [r3, #16]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	2207      	movs	r2, #7
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	4603      	mov	r3, r0
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4403      	add	r3, r0
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d824      	bhi.n	80029fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b05      	subs	r3, #5
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b05      	subs	r3, #5
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
 80029fa:	e04c      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d824      	bhi.n	8002a4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b23      	subs	r3, #35	; 0x23
 8002a16:	221f      	movs	r2, #31
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	400a      	ands	r2, r1
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b23      	subs	r3, #35	; 0x23
 8002a40:	fa00 f203 	lsl.w	r2, r0, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4c:	e023      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b41      	subs	r3, #65	; 0x41
 8002a60:	221f      	movs	r2, #31
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	3b41      	subs	r3, #65	; 0x41
 8002a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <HAL_ADC_ConfigChannel+0x250>)
 8002a98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <HAL_ADC_ConfigChannel+0x254>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d8>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_ADC_ConfigChannel+0x254>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12b      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_ADC_ConfigChannel+0x258>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x1f4>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b11      	cmp	r3, #17
 8002ade:	d122      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <HAL_ADC_ConfigChannel+0x258>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d111      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_ADC_ConfigChannel+0x25c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_ADC_ConfigChannel+0x260>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9a      	lsrs	r2, r3, #18
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40012300 	.word	0x40012300
 8002b40:	40012000 	.word	0x40012000
 8002b44:	10000012 	.word	0x10000012
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	431bde83 	.word	0x431bde83

08002b50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b58:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <ADC_Init+0x1f0>)
 8002b5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <ADC_Init+0x1f4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e00f      	b.n	8002c4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0202 	bic.w	r2, r2, #2
 8002c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7e1b      	ldrb	r3, [r3, #24]
 8002c68:	005a      	lsls	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01b      	beq.n	8002cb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	035a      	lsls	r2, r3, #13
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	e007      	b.n	8002cc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	051a      	lsls	r2, r3, #20
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d06:	025a      	lsls	r2, r3, #9
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	029a      	lsls	r2, r3, #10
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40012300 	.word	0x40012300
 8002d44:	0f000001 	.word	0x0f000001

08002d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	db0a      	blt.n	8002e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	490c      	ldr	r1, [pc, #48]	; (8002e34 <__NVIC_SetPriority+0x4c>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e10:	e00a      	b.n	8002e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4908      	ldr	r1, [pc, #32]	; (8002e38 <__NVIC_SetPriority+0x50>)
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	3b04      	subs	r3, #4
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	440b      	add	r3, r1
 8002e26:	761a      	strb	r2, [r3, #24]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf28      	it	cs
 8002e5a:	2304      	movcs	r3, #4
 8002e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d902      	bls.n	8002e6c <NVIC_EncodePriority+0x30>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3b03      	subs	r3, #3
 8002e6a:	e000      	b.n	8002e6e <NVIC_EncodePriority+0x32>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	43d9      	mvns	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	4313      	orrs	r3, r2
         );
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb4:	d301      	bcc.n	8002eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00f      	b.n	8002eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <SysTick_Config+0x40>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	f7ff ff8e 	bl	8002de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <SysTick_Config+0x40>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <SysTick_Config+0x40>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff29 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff3e 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff8e 	bl	8002e3c <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5d 	bl	8002de8 <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff31 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffa2 	bl	8002ea4 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e165      	b.n	8003254 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f040 8154 	bne.w	800324e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00b      	beq.n	8002fc6 <HAL_GPIO_Init+0x5a>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fba:	2b11      	cmp	r3, #17
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b12      	cmp	r3, #18
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0xfc>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b12      	cmp	r3, #18
 8003066:	d123      	bne.n	80030b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3208      	adds	r2, #8
 8003070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	220f      	movs	r2, #15
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	69b9      	ldr	r1, [r7, #24]
 80030ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80ae 	beq.w	800324e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_GPIO_Init+0x2fc>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a5b      	ldr	r2, [pc, #364]	; (8003268 <HAL_GPIO_Init+0x2fc>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_GPIO_Init+0x2fc>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310e:	4a57      	ldr	r2, [pc, #348]	; (800326c <HAL_GPIO_Init+0x300>)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4e      	ldr	r2, [pc, #312]	; (8003270 <HAL_GPIO_Init+0x304>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d025      	beq.n	8003186 <HAL_GPIO_Init+0x21a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4d      	ldr	r2, [pc, #308]	; (8003274 <HAL_GPIO_Init+0x308>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <HAL_GPIO_Init+0x216>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4c      	ldr	r2, [pc, #304]	; (8003278 <HAL_GPIO_Init+0x30c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <HAL_GPIO_Init+0x212>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4b      	ldr	r2, [pc, #300]	; (800327c <HAL_GPIO_Init+0x310>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0x20e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4a      	ldr	r2, [pc, #296]	; (8003280 <HAL_GPIO_Init+0x314>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00d      	beq.n	8003176 <HAL_GPIO_Init+0x20a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a49      	ldr	r2, [pc, #292]	; (8003284 <HAL_GPIO_Init+0x318>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x206>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a48      	ldr	r2, [pc, #288]	; (8003288 <HAL_GPIO_Init+0x31c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_GPIO_Init+0x202>
 800316a:	2306      	movs	r3, #6
 800316c:	e00c      	b.n	8003188 <HAL_GPIO_Init+0x21c>
 800316e:	2307      	movs	r3, #7
 8003170:	e00a      	b.n	8003188 <HAL_GPIO_Init+0x21c>
 8003172:	2305      	movs	r3, #5
 8003174:	e008      	b.n	8003188 <HAL_GPIO_Init+0x21c>
 8003176:	2304      	movs	r3, #4
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x21c>
 800317a:	2303      	movs	r3, #3
 800317c:	e004      	b.n	8003188 <HAL_GPIO_Init+0x21c>
 800317e:	2302      	movs	r3, #2
 8003180:	e002      	b.n	8003188 <HAL_GPIO_Init+0x21c>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_GPIO_Init+0x21c>
 8003186:	2300      	movs	r3, #0
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	f002 0203 	and.w	r2, r2, #3
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	4093      	lsls	r3, r2
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003198:	4934      	ldr	r1, [pc, #208]	; (800326c <HAL_GPIO_Init+0x300>)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3302      	adds	r3, #2
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_GPIO_Init+0x320>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ca:	4a30      	ldr	r2, [pc, #192]	; (800328c <HAL_GPIO_Init+0x320>)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031d0:	4b2e      	ldr	r3, [pc, #184]	; (800328c <HAL_GPIO_Init+0x320>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f4:	4a25      	ldr	r2, [pc, #148]	; (800328c <HAL_GPIO_Init+0x320>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <HAL_GPIO_Init+0x320>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_GPIO_Init+0x320>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_GPIO_Init+0x320>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003248:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_GPIO_Init+0x320>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3301      	adds	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	f67f ae96 	bls.w	8002f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800325c:	bf00      	nop
 800325e:	3724      	adds	r7, #36	; 0x24
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40023800 	.word	0x40023800
 800326c:	40013800 	.word	0x40013800
 8003270:	40020000 	.word	0x40020000
 8003274:	40020400 	.word	0x40020400
 8003278:	40020800 	.word	0x40020800
 800327c:	40020c00 	.word	0x40020c00
 8003280:	40021000 	.word	0x40021000
 8003284:	40021400 	.word	0x40021400
 8003288:	40021800 	.word	0x40021800
 800328c:	40013c00 	.word	0x40013c00

08003290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ac:	e003      	b.n	80032b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	041a      	lsls	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	619a      	str	r2, [r3, #24]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	401a      	ands	r2, r3
 80032d6:	887b      	ldrh	r3, [r7, #2]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d104      	bne.n	80032e6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032dc:	887b      	ldrh	r3, [r7, #2]
 80032de:	041a      	lsls	r2, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80032e4:	e002      	b.n	80032ec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d006      	beq.n	800331c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800330e:	4a05      	ldr	r2, [pc, #20]	; (8003324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe f966 	bl	80015e8 <HAL_GPIO_EXTI_Callback>
  }
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40013c00 	.word	0x40013c00

08003328 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_PWREx_EnableOverDrive+0x94>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003354:	f7ff f97a 	bl	800264c <HAL_GetTick>
 8003358:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800335a:	e009      	b.n	8003370 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800335c:	f7ff f976 	bl	800264c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800336a:	d901      	bls.n	8003370 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e01f      	b.n	80033b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d1ee      	bne.n	800335c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003384:	f7ff f962 	bl	800264c <HAL_GetTick>
 8003388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800338a:	e009      	b.n	80033a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800338c:	f7ff f95e 	bl	800264c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339a:	d901      	bls.n	80033a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e007      	b.n	80033b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ac:	d1ee      	bne.n	800338c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	420e0040 	.word	0x420e0040
 80033c0:	40007000 	.word	0x40007000
 80033c4:	420e0044 	.word	0x420e0044

080033c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0cc      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b68      	ldr	r3, [pc, #416]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d90c      	bls.n	8003404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b65      	ldr	r3, [pc, #404]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b63      	ldr	r3, [pc, #396]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0b8      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800341c:	4b59      	ldr	r3, [pc, #356]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a58      	ldr	r2, [pc, #352]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003434:	4b53      	ldr	r3, [pc, #332]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a52      	ldr	r2, [pc, #328]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800343e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003440:	4b50      	ldr	r3, [pc, #320]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	494d      	ldr	r1, [pc, #308]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d044      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d119      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e07f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d003      	beq.n	8003486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003482:	2b03      	cmp	r3, #3
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b3f      	ldr	r3, [pc, #252]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e06f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e067      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b37      	ldr	r3, [pc, #220]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4934      	ldr	r1, [pc, #208]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b8:	f7ff f8c8 	bl	800264c <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7ff f8c4 	bl	800264c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e04f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 020c 	and.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1eb      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d20c      	bcs.n	8003510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e032      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800351c:	4b19      	ldr	r3, [pc, #100]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4916      	ldr	r1, [pc, #88]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353a:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	490e      	ldr	r1, [pc, #56]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800354e:	f000 f855 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 8003552:	4601      	mov	r1, r0
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	5cd3      	ldrb	r3, [r2, r3]
 8003562:	fa21 f303 	lsr.w	r3, r1, r3
 8003566:	4a09      	ldr	r2, [pc, #36]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f828 	bl	80025c4 <HAL_InitTick>

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40023c00 	.word	0x40023c00
 8003584:	40023800 	.word	0x40023800
 8003588:	080078cc 	.word	0x080078cc
 800358c:	20000008 	.word	0x20000008
 8003590:	2000000c 	.word	0x2000000c

08003594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000008 	.word	0x20000008

080035ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035b0:	f7ff fff0 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035b4:	4601      	mov	r1, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	0a9b      	lsrs	r3, r3, #10
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4a03      	ldr	r2, [pc, #12]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40023800 	.word	0x40023800
 80035d0:	080078dc 	.word	0x080078dc

080035d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035d8:	f7ff ffdc 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035dc:	4601      	mov	r1, r0
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0b5b      	lsrs	r3, r3, #13
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4a03      	ldr	r2, [pc, #12]	; (80035f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40023800 	.word	0x40023800
 80035f8:	080078dc 	.word	0x080078dc

080035fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003616:	4bc6      	ldr	r3, [pc, #792]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b0c      	cmp	r3, #12
 8003620:	f200 817e 	bhi.w	8003920 <HAL_RCC_GetSysClockFreq+0x324>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <HAL_RCC_GetSysClockFreq+0x30>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	08003661 	.word	0x08003661
 8003630:	08003921 	.word	0x08003921
 8003634:	08003921 	.word	0x08003921
 8003638:	08003921 	.word	0x08003921
 800363c:	08003667 	.word	0x08003667
 8003640:	08003921 	.word	0x08003921
 8003644:	08003921 	.word	0x08003921
 8003648:	08003921 	.word	0x08003921
 800364c:	0800366d 	.word	0x0800366d
 8003650:	08003921 	.word	0x08003921
 8003654:	08003921 	.word	0x08003921
 8003658:	08003921 	.word	0x08003921
 800365c:	080037c9 	.word	0x080037c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4bb4      	ldr	r3, [pc, #720]	; (8003934 <HAL_RCC_GetSysClockFreq+0x338>)
 8003662:	613b      	str	r3, [r7, #16]
       break;
 8003664:	e15f      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003666:	4bb4      	ldr	r3, [pc, #720]	; (8003938 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003668:	613b      	str	r3, [r7, #16]
      break;
 800366a:	e15c      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800366c:	4bb0      	ldr	r3, [pc, #704]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003674:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003676:	4bae      	ldr	r3, [pc, #696]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d04a      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003682:	4bab      	ldr	r3, [pc, #684]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	f04f 0400 	mov.w	r4, #0
 800368c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	ea03 0501 	and.w	r5, r3, r1
 8003698:	ea04 0602 	and.w	r6, r4, r2
 800369c:	4629      	mov	r1, r5
 800369e:	4632      	mov	r2, r6
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	f04f 0400 	mov.w	r4, #0
 80036a8:	0154      	lsls	r4, r2, #5
 80036aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ae:	014b      	lsls	r3, r1, #5
 80036b0:	4619      	mov	r1, r3
 80036b2:	4622      	mov	r2, r4
 80036b4:	1b49      	subs	r1, r1, r5
 80036b6:	eb62 0206 	sbc.w	r2, r2, r6
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	f04f 0400 	mov.w	r4, #0
 80036c2:	0194      	lsls	r4, r2, #6
 80036c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036c8:	018b      	lsls	r3, r1, #6
 80036ca:	1a5b      	subs	r3, r3, r1
 80036cc:	eb64 0402 	sbc.w	r4, r4, r2
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	00e2      	lsls	r2, r4, #3
 80036da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036de:	00d9      	lsls	r1, r3, #3
 80036e0:	460b      	mov	r3, r1
 80036e2:	4614      	mov	r4, r2
 80036e4:	195b      	adds	r3, r3, r5
 80036e6:	eb44 0406 	adc.w	r4, r4, r6
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	0262      	lsls	r2, r4, #9
 80036f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80036f8:	0259      	lsls	r1, r3, #9
 80036fa:	460b      	mov	r3, r1
 80036fc:	4614      	mov	r4, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	4621      	mov	r1, r4
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f04f 0400 	mov.w	r4, #0
 8003708:	461a      	mov	r2, r3
 800370a:	4623      	mov	r3, r4
 800370c:	f7fd fa9e 	bl	8000c4c <__aeabi_uldivmod>
 8003710:	4603      	mov	r3, r0
 8003712:	460c      	mov	r4, r1
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e049      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003718:	4b85      	ldr	r3, [pc, #532]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	f04f 0400 	mov.w	r4, #0
 8003722:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	ea03 0501 	and.w	r5, r3, r1
 800372e:	ea04 0602 	and.w	r6, r4, r2
 8003732:	4629      	mov	r1, r5
 8003734:	4632      	mov	r2, r6
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	f04f 0400 	mov.w	r4, #0
 800373e:	0154      	lsls	r4, r2, #5
 8003740:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003744:	014b      	lsls	r3, r1, #5
 8003746:	4619      	mov	r1, r3
 8003748:	4622      	mov	r2, r4
 800374a:	1b49      	subs	r1, r1, r5
 800374c:	eb62 0206 	sbc.w	r2, r2, r6
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	f04f 0400 	mov.w	r4, #0
 8003758:	0194      	lsls	r4, r2, #6
 800375a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800375e:	018b      	lsls	r3, r1, #6
 8003760:	1a5b      	subs	r3, r3, r1
 8003762:	eb64 0402 	sbc.w	r4, r4, r2
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	00e2      	lsls	r2, r4, #3
 8003770:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003774:	00d9      	lsls	r1, r3, #3
 8003776:	460b      	mov	r3, r1
 8003778:	4614      	mov	r4, r2
 800377a:	195b      	adds	r3, r3, r5
 800377c:	eb44 0406 	adc.w	r4, r4, r6
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	02a2      	lsls	r2, r4, #10
 800378a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800378e:	0299      	lsls	r1, r3, #10
 8003790:	460b      	mov	r3, r1
 8003792:	4614      	mov	r4, r2
 8003794:	4618      	mov	r0, r3
 8003796:	4621      	mov	r1, r4
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f04f 0400 	mov.w	r4, #0
 800379e:	461a      	mov	r2, r3
 80037a0:	4623      	mov	r3, r4
 80037a2:	f7fd fa53 	bl	8000c4c <__aeabi_uldivmod>
 80037a6:	4603      	mov	r3, r0
 80037a8:	460c      	mov	r4, r1
 80037aa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037ac:	4b60      	ldr	r3, [pc, #384]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	3301      	adds	r3, #1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	613b      	str	r3, [r7, #16]
      break;
 80037c6:	e0ae      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c8:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d2:	4b57      	ldr	r3, [pc, #348]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d04a      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037de:	4b54      	ldr	r3, [pc, #336]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	099b      	lsrs	r3, r3, #6
 80037e4:	f04f 0400 	mov.w	r4, #0
 80037e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	ea03 0501 	and.w	r5, r3, r1
 80037f4:	ea04 0602 	and.w	r6, r4, r2
 80037f8:	4629      	mov	r1, r5
 80037fa:	4632      	mov	r2, r6
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	f04f 0400 	mov.w	r4, #0
 8003804:	0154      	lsls	r4, r2, #5
 8003806:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800380a:	014b      	lsls	r3, r1, #5
 800380c:	4619      	mov	r1, r3
 800380e:	4622      	mov	r2, r4
 8003810:	1b49      	subs	r1, r1, r5
 8003812:	eb62 0206 	sbc.w	r2, r2, r6
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	f04f 0400 	mov.w	r4, #0
 800381e:	0194      	lsls	r4, r2, #6
 8003820:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003824:	018b      	lsls	r3, r1, #6
 8003826:	1a5b      	subs	r3, r3, r1
 8003828:	eb64 0402 	sbc.w	r4, r4, r2
 800382c:	f04f 0100 	mov.w	r1, #0
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	00e2      	lsls	r2, r4, #3
 8003836:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800383a:	00d9      	lsls	r1, r3, #3
 800383c:	460b      	mov	r3, r1
 800383e:	4614      	mov	r4, r2
 8003840:	195b      	adds	r3, r3, r5
 8003842:	eb44 0406 	adc.w	r4, r4, r6
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	0262      	lsls	r2, r4, #9
 8003850:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003854:	0259      	lsls	r1, r3, #9
 8003856:	460b      	mov	r3, r1
 8003858:	4614      	mov	r4, r2
 800385a:	4618      	mov	r0, r3
 800385c:	4621      	mov	r1, r4
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f04f 0400 	mov.w	r4, #0
 8003864:	461a      	mov	r2, r3
 8003866:	4623      	mov	r3, r4
 8003868:	f7fd f9f0 	bl	8000c4c <__aeabi_uldivmod>
 800386c:	4603      	mov	r3, r0
 800386e:	460c      	mov	r4, r1
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e049      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003874:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	f04f 0400 	mov.w	r4, #0
 800387e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	ea03 0501 	and.w	r5, r3, r1
 800388a:	ea04 0602 	and.w	r6, r4, r2
 800388e:	4629      	mov	r1, r5
 8003890:	4632      	mov	r2, r6
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	f04f 0400 	mov.w	r4, #0
 800389a:	0154      	lsls	r4, r2, #5
 800389c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038a0:	014b      	lsls	r3, r1, #5
 80038a2:	4619      	mov	r1, r3
 80038a4:	4622      	mov	r2, r4
 80038a6:	1b49      	subs	r1, r1, r5
 80038a8:	eb62 0206 	sbc.w	r2, r2, r6
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	f04f 0400 	mov.w	r4, #0
 80038b4:	0194      	lsls	r4, r2, #6
 80038b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038ba:	018b      	lsls	r3, r1, #6
 80038bc:	1a5b      	subs	r3, r3, r1
 80038be:	eb64 0402 	sbc.w	r4, r4, r2
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	00e2      	lsls	r2, r4, #3
 80038cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038d0:	00d9      	lsls	r1, r3, #3
 80038d2:	460b      	mov	r3, r1
 80038d4:	4614      	mov	r4, r2
 80038d6:	195b      	adds	r3, r3, r5
 80038d8:	eb44 0406 	adc.w	r4, r4, r6
 80038dc:	f04f 0100 	mov.w	r1, #0
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	02a2      	lsls	r2, r4, #10
 80038e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038ea:	0299      	lsls	r1, r3, #10
 80038ec:	460b      	mov	r3, r1
 80038ee:	4614      	mov	r4, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	4621      	mov	r1, r4
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f04f 0400 	mov.w	r4, #0
 80038fa:	461a      	mov	r2, r3
 80038fc:	4623      	mov	r3, r4
 80038fe:	f7fd f9a5 	bl	8000c4c <__aeabi_uldivmod>
 8003902:	4603      	mov	r3, r0
 8003904:	460c      	mov	r4, r1
 8003906:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_GetSysClockFreq+0x334>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0f1b      	lsrs	r3, r3, #28
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	613b      	str	r3, [r7, #16]
      break;
 800391e:	e002      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <HAL_RCC_GetSysClockFreq+0x338>)
 8003922:	613b      	str	r3, [r7, #16]
      break;
 8003924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003926:	693b      	ldr	r3, [r7, #16]
}
 8003928:	4618      	mov	r0, r3
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	00f42400 	.word	0x00f42400
 8003938:	007a1200 	.word	0x007a1200

0800393c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8083 	beq.w	8003a5c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003956:	4b95      	ldr	r3, [pc, #596]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b04      	cmp	r3, #4
 8003960:	d019      	beq.n	8003996 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003962:	4b92      	ldr	r3, [pc, #584]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800396a:	2b08      	cmp	r3, #8
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800396e:	4b8f      	ldr	r3, [pc, #572]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397a:	d00c      	beq.n	8003996 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397c:	4b8b      	ldr	r3, [pc, #556]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003984:	2b0c      	cmp	r3, #12
 8003986:	d112      	bne.n	80039ae <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003988:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d10b      	bne.n	80039ae <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003996:	4b85      	ldr	r3, [pc, #532]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d05b      	beq.n	8003a5a <HAL_RCC_OscConfig+0x11e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d157      	bne.n	8003a5a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e216      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x8a>
 80039b8:	4b7c      	ldr	r3, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a7b      	ldr	r2, [pc, #492]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e01d      	b.n	8003a02 <HAL_RCC_OscConfig+0xc6>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ce:	d10c      	bne.n	80039ea <HAL_RCC_OscConfig+0xae>
 80039d0:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a75      	ldr	r2, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b73      	ldr	r3, [pc, #460]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a72      	ldr	r2, [pc, #456]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e00b      	b.n	8003a02 <HAL_RCC_OscConfig+0xc6>
 80039ea:	4b70      	ldr	r3, [pc, #448]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6f      	ldr	r2, [pc, #444]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6c      	ldr	r2, [pc, #432]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d013      	beq.n	8003a32 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fe fe1f 	bl	800264c <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a12:	f7fe fe1b 	bl	800264c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b64      	cmp	r3, #100	; 0x64
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1db      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a24:	4b61      	ldr	r3, [pc, #388]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0xd6>
 8003a30:	e014      	b.n	8003a5c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fe fe0b 	bl	800264c <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3a:	f7fe fe07 	bl	800264c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b64      	cmp	r3, #100	; 0x64
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e1c7      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4c:	4b57      	ldr	r3, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f0      	bne.n	8003a3a <HAL_RCC_OscConfig+0xfe>
 8003a58:	e000      	b.n	8003a5c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d06f      	beq.n	8003b48 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a74:	4b4d      	ldr	r3, [pc, #308]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a80:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8c:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d11c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a98:	4b44      	ldr	r3, [pc, #272]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d116      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa4:	4b41      	ldr	r3, [pc, #260]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_OscConfig+0x180>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e18f      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abc:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4938      	ldr	r1, [pc, #224]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad0:	e03a      	b.n	8003b48 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ada:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fdb4 	bl	800264c <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fdb0 	bl	800264c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e170      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afa:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b29      	ldr	r3, [pc, #164]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4925      	ldr	r1, [pc, #148]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
 8003b1a:	e015      	b.n	8003b48 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fe fd93 	bl	800264c <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2a:	f7fe fd8f 	bl	800264c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e14f      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d037      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d016      	beq.n	8003b8a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5c:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_RCC_OscConfig+0x278>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fe fd73 	bl	800264c <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fe fd6f 	bl	800264c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e12f      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x22e>
 8003b88:	e01c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_RCC_OscConfig+0x278>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fe fd5c 	bl	800264c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b96:	e00f      	b.n	8003bb8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fe fd58 	bl	800264c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d908      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e118      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470000 	.word	0x42470000
 8003bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b8a      	ldr	r3, [pc, #552]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e9      	bne.n	8003b98 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8097 	beq.w	8003d00 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b83      	ldr	r3, [pc, #524]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b7f      	ldr	r3, [pc, #508]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a7e      	ldr	r2, [pc, #504]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b7c      	ldr	r3, [pc, #496]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b79      	ldr	r3, [pc, #484]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b76      	ldr	r3, [pc, #472]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a75      	ldr	r2, [pc, #468]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fe fd17 	bl	800264c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fe fd13 	bl	800264c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0d3      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b6c      	ldr	r3, [pc, #432]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x31a>
 8003c48:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a65      	ldr	r2, [pc, #404]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	e01c      	b.n	8003c90 <HAL_RCC_OscConfig+0x354>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x33c>
 8003c5e:	4b61      	ldr	r3, [pc, #388]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a60      	ldr	r2, [pc, #384]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	4b5e      	ldr	r3, [pc, #376]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a5d      	ldr	r2, [pc, #372]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0x354>
 8003c78:	4b5a      	ldr	r3, [pc, #360]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a59      	ldr	r2, [pc, #356]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
 8003c84:	4b57      	ldr	r3, [pc, #348]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a56      	ldr	r2, [pc, #344]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003c8a:	f023 0304 	bic.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fe fcd8 	bl	800264c <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca0:	f7fe fcd4 	bl	800264c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e092      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ee      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x364>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fe fcc2 	bl	800264c <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fe fcbe 	bl	800264c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e07c      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce2:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf4:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	4a3a      	ldr	r2, [pc, #232]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d068      	beq.n	8003dda <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d08:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d060      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d145      	bne.n	8003da8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1c:	4b33      	ldr	r3, [pc, #204]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fe fc93 	bl	800264c <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fe fc8f 	bl	800264c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e04f      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	019b      	lsls	r3, r3, #6
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	3b01      	subs	r3, #1
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	071b      	lsls	r3, r3, #28
 8003d74:	491b      	ldr	r1, [pc, #108]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7a:	4b1c      	ldr	r3, [pc, #112]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe fc64 	bl	800264c <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fe fc60 	bl	800264c <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e020      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x44c>
 8003da6:	e018      	b.n	8003dda <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da8:	4b10      	ldr	r3, [pc, #64]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fe fc4d 	bl	800264c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fe fc49 	bl	800264c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e009      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_RCC_OscConfig+0x4a8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <HAL_RCC_OscConfig+0x47a>
 8003dd4:	e001      	b.n	8003dda <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40007000 	.word	0x40007000
 8003dec:	42470060 	.word	0x42470060

08003df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e01d      	b.n	8003e3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fe fa74 	bl	8002304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f000 fc80 	bl	8004734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e01d      	b.n	8003e94 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f815 	bl	8003e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f000 fc55 	bl	8004734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	d841      	bhi.n	8003f44 <HAL_TIM_PWM_Start_IT+0x94>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <HAL_TIM_PWM_Start_IT+0x18>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003f45 	.word	0x08003f45
 8003ed0:	08003f45 	.word	0x08003f45
 8003ed4:	08003f45 	.word	0x08003f45
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003f45 	.word	0x08003f45
 8003ee0:	08003f45 	.word	0x08003f45
 8003ee4:	08003f45 	.word	0x08003f45
 8003ee8:	08003f21 	.word	0x08003f21
 8003eec:	08003f45 	.word	0x08003f45
 8003ef0:	08003f45 	.word	0x08003f45
 8003ef4:	08003f45 	.word	0x08003f45
 8003ef8:	08003f33 	.word	0x08003f33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0202 	orr.w	r2, r2, #2
 8003f0a:	60da      	str	r2, [r3, #12]
      break;
 8003f0c:	e01b      	b.n	8003f46 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0204 	orr.w	r2, r2, #4
 8003f1c:	60da      	str	r2, [r3, #12]
      break;
 8003f1e:	e012      	b.n	8003f46 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0208 	orr.w	r2, r2, #8
 8003f2e:	60da      	str	r2, [r3, #12]
      break;
 8003f30:	e009      	b.n	8003f46 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0210 	orr.w	r2, r2, #16
 8003f40:	60da      	str	r2, [r3, #12]
      break;
 8003f42:	e000      	b.n	8003f46 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003f44:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 feda 	bl	8004d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <HAL_TIM_PWM_Start_IT+0x100>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_TIM_PWM_Start_IT+0xb8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <HAL_TIM_PWM_Start_IT+0x104>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_TIM_PWM_Start_IT+0xbc>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_TIM_PWM_Start_IT+0xbe>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b06      	cmp	r3, #6
 8003f92:	d007      	beq.n	8003fa4 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40010400 	.word	0x40010400

08003fb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e083      	b.n	80040d4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fe f947 	bl	8002274 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ffc:	f023 0307 	bic.w	r3, r3, #7
 8004000:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f000 fb91 	bl	8004734 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	4313      	orrs	r3, r2
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004058:	f023 030c 	bic.w	r3, r3, #12
 800405c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	4313      	orrs	r3, r2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	011a      	lsls	r2, r3, #4
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	031b      	lsls	r3, r3, #12
 8004088:	4313      	orrs	r3, r2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004096:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	4313      	orrs	r3, r2
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_TIM_Encoder_Start_IT+0x16>
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d010      	beq.n	8004112 <HAL_TIM_Encoder_Start_IT+0x36>
 80040f0:	e01f      	b.n	8004132 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2201      	movs	r2, #1
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fe04 	bl	8004d08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0202 	orr.w	r2, r2, #2
 800410e:	60da      	str	r2, [r3, #12]
      break;
 8004110:	e02e      	b.n	8004170 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2201      	movs	r2, #1
 8004118:	2104      	movs	r1, #4
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fdf4 	bl	8004d08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0204 	orr.w	r2, r2, #4
 800412e:	60da      	str	r2, [r3, #12]
      break;
 8004130:	e01e      	b.n	8004170 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2201      	movs	r2, #1
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fde4 	bl	8004d08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	2104      	movs	r1, #4
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fddd 	bl	8004d08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0202 	orr.w	r2, r2, #2
 800415c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0204 	orr.w	r2, r2, #4
 800416c:	60da      	str	r2, [r3, #12]
      break;
 800416e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b02      	cmp	r3, #2
 800419e:	d122      	bne.n	80041e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d11b      	bne.n	80041e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f06f 0202 	mvn.w	r2, #2
 80041b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fa93 	bl	80046f8 <HAL_TIM_IC_CaptureCallback>
 80041d2:	e005      	b.n	80041e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fa85 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fa96 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d122      	bne.n	800423a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d11b      	bne.n	800423a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f06f 0204 	mvn.w	r2, #4
 800420a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa69 	bl	80046f8 <HAL_TIM_IC_CaptureCallback>
 8004226:	e005      	b.n	8004234 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fa5b 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa6c 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b08      	cmp	r3, #8
 8004246:	d122      	bne.n	800428e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b08      	cmp	r3, #8
 8004254:	d11b      	bne.n	800428e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0208 	mvn.w	r2, #8
 800425e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2204      	movs	r2, #4
 8004264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fa3f 	bl	80046f8 <HAL_TIM_IC_CaptureCallback>
 800427a:	e005      	b.n	8004288 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fa31 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa42 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b10      	cmp	r3, #16
 800429a:	d122      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d11b      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f06f 0210 	mvn.w	r2, #16
 80042b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2208      	movs	r2, #8
 80042b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fa15 	bl	80046f8 <HAL_TIM_IC_CaptureCallback>
 80042ce:	e005      	b.n	80042dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fa07 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa18 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10e      	bne.n	800430e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f06f 0201 	mvn.w	r2, #1
 8004306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7fd f985 	bl	8001618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d10e      	bne.n	800433a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d107      	bne.n	800433a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fe39 	bl	8004fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d10e      	bne.n	8004366 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d107      	bne.n	8004366 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800435e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f9dd 	bl	8004720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b20      	cmp	r3, #32
 8004372:	d10e      	bne.n	8004392 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b20      	cmp	r3, #32
 8004380:	d107      	bne.n	8004392 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f06f 0220 	mvn.w	r2, #32
 800438a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fe03 	bl	8004f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0b4      	b.n	8004520 <HAL_TIM_PWM_ConfigChannel+0x184>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	f200 809f 	bhi.w	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	08004409 	.word	0x08004409
 80043d8:	0800450d 	.word	0x0800450d
 80043dc:	0800450d 	.word	0x0800450d
 80043e0:	0800450d 	.word	0x0800450d
 80043e4:	08004449 	.word	0x08004449
 80043e8:	0800450d 	.word	0x0800450d
 80043ec:	0800450d 	.word	0x0800450d
 80043f0:	0800450d 	.word	0x0800450d
 80043f4:	0800448b 	.word	0x0800448b
 80043f8:	0800450d 	.word	0x0800450d
 80043fc:	0800450d 	.word	0x0800450d
 8004400:	0800450d 	.word	0x0800450d
 8004404:	080044cb 	.word	0x080044cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fa30 	bl	8004874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0208 	orr.w	r2, r2, #8
 8004422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0204 	bic.w	r2, r2, #4
 8004432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6999      	ldr	r1, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	619a      	str	r2, [r3, #24]
      break;
 8004446:	e062      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fa80 	bl	8004954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6999      	ldr	r1, [r3, #24]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	619a      	str	r2, [r3, #24]
      break;
 8004488:	e041      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fad5 	bl	8004a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0208 	orr.w	r2, r2, #8
 80044a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0204 	bic.w	r2, r2, #4
 80044b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69d9      	ldr	r1, [r3, #28]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	61da      	str	r2, [r3, #28]
      break;
 80044c8:	e021      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fb29 	bl	8004b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69d9      	ldr	r1, [r3, #28]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	021a      	lsls	r2, r3, #8
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	61da      	str	r2, [r3, #28]
      break;
 800450a:	e000      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800450c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_TIM_GenerateEvent+0x18>
 800453c:	2302      	movs	r3, #2
 800453e:	e014      	b.n	800456a <HAL_TIM_GenerateEvent+0x42>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_TIM_ConfigClockSource+0x18>
 800458a:	2302      	movs	r3, #2
 800458c:	e0a6      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x166>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b40      	cmp	r3, #64	; 0x40
 80045c4:	d067      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x120>
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d80b      	bhi.n	80045e2 <HAL_TIM_ConfigClockSource+0x6c>
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d073      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x140>
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d802      	bhi.n	80045d8 <HAL_TIM_ConfigClockSource+0x62>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d06f      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80045d6:	e078      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d06c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x140>
 80045dc:	2b30      	cmp	r3, #48	; 0x30
 80045de:	d06a      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80045e0:	e073      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80045e2:	2b70      	cmp	r3, #112	; 0x70
 80045e4:	d00d      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x8c>
 80045e6:	2b70      	cmp	r3, #112	; 0x70
 80045e8:	d804      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x7e>
 80045ea:	2b50      	cmp	r3, #80	; 0x50
 80045ec:	d033      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0xe0>
 80045ee:	2b60      	cmp	r3, #96	; 0x60
 80045f0:	d041      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80045f2:	e06a      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80045f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f8:	d066      	beq.n	80046c8 <HAL_TIM_ConfigClockSource+0x152>
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fe:	d017      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004600:	e063      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f000 fb59 	bl	8004cc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004624:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	609a      	str	r2, [r3, #8]
      break;
 800462e:	e04c      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f000 fb42 	bl	8004cc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004652:	609a      	str	r2, [r3, #8]
      break;
 8004654:	e039      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fab6 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2150      	movs	r1, #80	; 0x50
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fb0f 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004674:	e029      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	f000 fad5 	bl	8004c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2160      	movs	r1, #96	; 0x60
 800468e:	4618      	mov	r0, r3
 8004690:	f000 faff 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004694:	e019      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 fa96 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2140      	movs	r1, #64	; 0x40
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 faef 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 80046b4:	e009      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f000 fae6 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 80046c6:	e000      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x154>
      break;
 80046c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a40      	ldr	r2, [pc, #256]	; (8004848 <TIM_Base_SetConfig+0x114>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d013      	beq.n	8004774 <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004752:	d00f      	beq.n	8004774 <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3d      	ldr	r2, [pc, #244]	; (800484c <TIM_Base_SetConfig+0x118>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00b      	beq.n	8004774 <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3c      	ldr	r2, [pc, #240]	; (8004850 <TIM_Base_SetConfig+0x11c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d007      	beq.n	8004774 <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3b      	ldr	r2, [pc, #236]	; (8004854 <TIM_Base_SetConfig+0x120>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a3a      	ldr	r2, [pc, #232]	; (8004858 <TIM_Base_SetConfig+0x124>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d108      	bne.n	8004786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2f      	ldr	r2, [pc, #188]	; (8004848 <TIM_Base_SetConfig+0x114>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d02b      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004794:	d027      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2c      	ldr	r2, [pc, #176]	; (800484c <TIM_Base_SetConfig+0x118>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d023      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2b      	ldr	r2, [pc, #172]	; (8004850 <TIM_Base_SetConfig+0x11c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01f      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2a      	ldr	r2, [pc, #168]	; (8004854 <TIM_Base_SetConfig+0x120>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01b      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a29      	ldr	r2, [pc, #164]	; (8004858 <TIM_Base_SetConfig+0x124>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d017      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a28      	ldr	r2, [pc, #160]	; (800485c <TIM_Base_SetConfig+0x128>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a27      	ldr	r2, [pc, #156]	; (8004860 <TIM_Base_SetConfig+0x12c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00f      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a26      	ldr	r2, [pc, #152]	; (8004864 <TIM_Base_SetConfig+0x130>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a25      	ldr	r2, [pc, #148]	; (8004868 <TIM_Base_SetConfig+0x134>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a24      	ldr	r2, [pc, #144]	; (800486c <TIM_Base_SetConfig+0x138>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a23      	ldr	r2, [pc, #140]	; (8004870 <TIM_Base_SetConfig+0x13c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d108      	bne.n	80047f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <TIM_Base_SetConfig+0x114>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0xf8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a0c      	ldr	r2, [pc, #48]	; (8004858 <TIM_Base_SetConfig+0x124>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d103      	bne.n	8004834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	615a      	str	r2, [r3, #20]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	40010400 	.word	0x40010400
 800485c:	40014000 	.word	0x40014000
 8004860:	40014400 	.word	0x40014400
 8004864:	40014800 	.word	0x40014800
 8004868:	40001800 	.word	0x40001800
 800486c:	40001c00 	.word	0x40001c00
 8004870:	40002000 	.word	0x40002000

08004874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 0302 	bic.w	r3, r3, #2
 80048bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a20      	ldr	r2, [pc, #128]	; (800494c <TIM_OC1_SetConfig+0xd8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_OC1_SetConfig+0x64>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <TIM_OC1_SetConfig+0xdc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d10c      	bne.n	80048f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0308 	bic.w	r3, r3, #8
 80048de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f023 0304 	bic.w	r3, r3, #4
 80048f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <TIM_OC1_SetConfig+0xd8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_OC1_SetConfig+0x8e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <TIM_OC1_SetConfig+0xdc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d111      	bne.n	8004926 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	621a      	str	r2, [r3, #32]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40010000 	.word	0x40010000
 8004950:	40010400 	.word	0x40010400

08004954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f023 0210 	bic.w	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f023 0320 	bic.w	r3, r3, #32
 800499e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <TIM_OC2_SetConfig+0xe4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_OC2_SetConfig+0x68>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a21      	ldr	r2, [pc, #132]	; (8004a3c <TIM_OC2_SetConfig+0xe8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d10d      	bne.n	80049d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <TIM_OC2_SetConfig+0xe4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_OC2_SetConfig+0x94>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a16      	ldr	r2, [pc, #88]	; (8004a3c <TIM_OC2_SetConfig+0xe8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d113      	bne.n	8004a10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40010400 	.word	0x40010400

08004a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a21      	ldr	r2, [pc, #132]	; (8004b20 <TIM_OC3_SetConfig+0xe0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d003      	beq.n	8004aa6 <TIM_OC3_SetConfig+0x66>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a20      	ldr	r2, [pc, #128]	; (8004b24 <TIM_OC3_SetConfig+0xe4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10d      	bne.n	8004ac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <TIM_OC3_SetConfig+0xe0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <TIM_OC3_SetConfig+0x92>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <TIM_OC3_SetConfig+0xe4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d113      	bne.n	8004afa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	621a      	str	r2, [r3, #32]
}
 8004b14:	bf00      	nop
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40010000 	.word	0x40010000
 8004b24:	40010400 	.word	0x40010400

08004b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	031b      	lsls	r3, r3, #12
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <TIM_OC4_SetConfig+0xa4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_OC4_SetConfig+0x68>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <TIM_OC4_SetConfig+0xa8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d109      	bne.n	8004ba4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40010400 	.word	0x40010400

08004bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0201 	bic.w	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 030a 	bic.w	r3, r3, #10
 8004c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b087      	sub	sp, #28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0210 	bic.w	r2, r3, #16
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	031b      	lsls	r3, r3, #12
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f043 0307 	orr.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1a      	ldr	r2, [r3, #32]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1a      	ldr	r2, [r3, #32]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d40:	431a      	orrs	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d00d      	beq.n	8004d7e <HAL_TIMEx_PWMN_Start_IT+0x2c>
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d014      	beq.n	8004d90 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d000      	beq.n	8004d6c <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8004d6a:	e01a      	b.n	8004da2 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0202 	orr.w	r2, r2, #2
 8004d7a:	60da      	str	r2, [r3, #12]
      break;
 8004d7c:	e011      	b.n	8004da2 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0204 	orr.w	r2, r2, #4
 8004d8c:	60da      	str	r2, [r3, #12]
      break;
 8004d8e:	e008      	b.n	8004da2 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0208 	orr.w	r2, r2, #8
 8004d9e:	60da      	str	r2, [r3, #12]
      break;
 8004da0:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004db0:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2204      	movs	r2, #4
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f900 	bl	8004fc0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b06      	cmp	r3, #6
 8004de0:	d007      	beq.n	8004df2 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e05a      	b.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d022      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e60:	d01d      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40001800 	.word	0x40001800

08004ef4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e03d      	b.n	8004f8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1a      	ldr	r2, [r3, #32]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e03f      	b.n	800509c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7fd fa33 	bl	800249c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2224      	movs	r2, #36	; 0x24
 800503a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f90c 	bl	800526c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005062:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695a      	ldr	r2, [r3, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005072:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005082:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	f040 8083 	bne.w	80051cc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <HAL_UART_Transmit+0x2e>
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e07b      	b.n	80051ce <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_UART_Transmit+0x40>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e074      	b.n	80051ce <HAL_UART_Transmit+0x12a>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2221      	movs	r2, #33	; 0x21
 80050f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80050fa:	f7fd faa7 	bl	800264c <HAL_GetTick>
 80050fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	88fa      	ldrh	r2, [r7, #6]
 8005104:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	88fa      	ldrh	r2, [r7, #6]
 800510a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005114:	e042      	b.n	800519c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d122      	bne.n	8005174 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	2180      	movs	r1, #128	; 0x80
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f84c 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e042      	b.n	80051ce <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	3302      	adds	r3, #2
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	e017      	b.n	800519c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	3301      	adds	r3, #1
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	e013      	b.n	800519c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2200      	movs	r2, #0
 800517c:	2180      	movs	r1, #128	; 0x80
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f829 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e01f      	b.n	80051ce <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	60ba      	str	r2, [r7, #8]
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1b7      	bne.n	8005116 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2140      	movs	r1, #64	; 0x40
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f810 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e006      	b.n	80051ce <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e000      	b.n	80051ce <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
  }
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e6:	e02c      	b.n	8005242 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d028      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0x30>
 80051f6:	f7fd fa29 	bl	800264c <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	429a      	cmp	r2, r3
 8005204:	d21d      	bcs.n	8005242 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005214:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e00f      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4013      	ands	r3, r2
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	429a      	cmp	r2, r3
 800525e:	d0c3      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005270:	b085      	sub	sp, #20
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052ae:	f023 030c 	bic.w	r3, r3, #12
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052da:	f040 818b 	bne.w	80055f4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4ac1      	ldr	r2, [pc, #772]	; (80055e8 <UART_SetConfig+0x37c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d005      	beq.n	80052f4 <UART_SetConfig+0x88>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4abf      	ldr	r2, [pc, #764]	; (80055ec <UART_SetConfig+0x380>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	f040 80bd 	bne.w	800546e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052f4:	f7fe f96e 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 80052f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	461d      	mov	r5, r3
 80052fe:	f04f 0600 	mov.w	r6, #0
 8005302:	46a8      	mov	r8, r5
 8005304:	46b1      	mov	r9, r6
 8005306:	eb18 0308 	adds.w	r3, r8, r8
 800530a:	eb49 0409 	adc.w	r4, r9, r9
 800530e:	4698      	mov	r8, r3
 8005310:	46a1      	mov	r9, r4
 8005312:	eb18 0805 	adds.w	r8, r8, r5
 8005316:	eb49 0906 	adc.w	r9, r9, r6
 800531a:	f04f 0100 	mov.w	r1, #0
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005326:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800532a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800532e:	4688      	mov	r8, r1
 8005330:	4691      	mov	r9, r2
 8005332:	eb18 0005 	adds.w	r0, r8, r5
 8005336:	eb49 0106 	adc.w	r1, r9, r6
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	461d      	mov	r5, r3
 8005340:	f04f 0600 	mov.w	r6, #0
 8005344:	196b      	adds	r3, r5, r5
 8005346:	eb46 0406 	adc.w	r4, r6, r6
 800534a:	461a      	mov	r2, r3
 800534c:	4623      	mov	r3, r4
 800534e:	f7fb fc7d 	bl	8000c4c <__aeabi_uldivmod>
 8005352:	4603      	mov	r3, r0
 8005354:	460c      	mov	r4, r1
 8005356:	461a      	mov	r2, r3
 8005358:	4ba5      	ldr	r3, [pc, #660]	; (80055f0 <UART_SetConfig+0x384>)
 800535a:	fba3 2302 	umull	r2, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	461d      	mov	r5, r3
 8005368:	f04f 0600 	mov.w	r6, #0
 800536c:	46a9      	mov	r9, r5
 800536e:	46b2      	mov	sl, r6
 8005370:	eb19 0309 	adds.w	r3, r9, r9
 8005374:	eb4a 040a 	adc.w	r4, sl, sl
 8005378:	4699      	mov	r9, r3
 800537a:	46a2      	mov	sl, r4
 800537c:	eb19 0905 	adds.w	r9, r9, r5
 8005380:	eb4a 0a06 	adc.w	sl, sl, r6
 8005384:	f04f 0100 	mov.w	r1, #0
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005390:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005394:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005398:	4689      	mov	r9, r1
 800539a:	4692      	mov	sl, r2
 800539c:	eb19 0005 	adds.w	r0, r9, r5
 80053a0:	eb4a 0106 	adc.w	r1, sl, r6
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	461d      	mov	r5, r3
 80053aa:	f04f 0600 	mov.w	r6, #0
 80053ae:	196b      	adds	r3, r5, r5
 80053b0:	eb46 0406 	adc.w	r4, r6, r6
 80053b4:	461a      	mov	r2, r3
 80053b6:	4623      	mov	r3, r4
 80053b8:	f7fb fc48 	bl	8000c4c <__aeabi_uldivmod>
 80053bc:	4603      	mov	r3, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	461a      	mov	r2, r3
 80053c2:	4b8b      	ldr	r3, [pc, #556]	; (80055f0 <UART_SetConfig+0x384>)
 80053c4:	fba3 1302 	umull	r1, r3, r3, r2
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	2164      	movs	r1, #100	; 0x64
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	3332      	adds	r3, #50	; 0x32
 80053d6:	4a86      	ldr	r2, [pc, #536]	; (80055f0 <UART_SetConfig+0x384>)
 80053d8:	fba2 2303 	umull	r2, r3, r2, r3
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053e4:	4498      	add	r8, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	461d      	mov	r5, r3
 80053ea:	f04f 0600 	mov.w	r6, #0
 80053ee:	46a9      	mov	r9, r5
 80053f0:	46b2      	mov	sl, r6
 80053f2:	eb19 0309 	adds.w	r3, r9, r9
 80053f6:	eb4a 040a 	adc.w	r4, sl, sl
 80053fa:	4699      	mov	r9, r3
 80053fc:	46a2      	mov	sl, r4
 80053fe:	eb19 0905 	adds.w	r9, r9, r5
 8005402:	eb4a 0a06 	adc.w	sl, sl, r6
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005412:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005416:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800541a:	4689      	mov	r9, r1
 800541c:	4692      	mov	sl, r2
 800541e:	eb19 0005 	adds.w	r0, r9, r5
 8005422:	eb4a 0106 	adc.w	r1, sl, r6
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	461d      	mov	r5, r3
 800542c:	f04f 0600 	mov.w	r6, #0
 8005430:	196b      	adds	r3, r5, r5
 8005432:	eb46 0406 	adc.w	r4, r6, r6
 8005436:	461a      	mov	r2, r3
 8005438:	4623      	mov	r3, r4
 800543a:	f7fb fc07 	bl	8000c4c <__aeabi_uldivmod>
 800543e:	4603      	mov	r3, r0
 8005440:	460c      	mov	r4, r1
 8005442:	461a      	mov	r2, r3
 8005444:	4b6a      	ldr	r3, [pc, #424]	; (80055f0 <UART_SetConfig+0x384>)
 8005446:	fba3 1302 	umull	r1, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	2164      	movs	r1, #100	; 0x64
 800544e:	fb01 f303 	mul.w	r3, r1, r3
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	3332      	adds	r3, #50	; 0x32
 8005458:	4a65      	ldr	r2, [pc, #404]	; (80055f0 <UART_SetConfig+0x384>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	f003 0207 	and.w	r2, r3, #7
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4442      	add	r2, r8
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	e26f      	b.n	800594e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800546e:	f7fe f89d 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 8005472:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	461d      	mov	r5, r3
 8005478:	f04f 0600 	mov.w	r6, #0
 800547c:	46a8      	mov	r8, r5
 800547e:	46b1      	mov	r9, r6
 8005480:	eb18 0308 	adds.w	r3, r8, r8
 8005484:	eb49 0409 	adc.w	r4, r9, r9
 8005488:	4698      	mov	r8, r3
 800548a:	46a1      	mov	r9, r4
 800548c:	eb18 0805 	adds.w	r8, r8, r5
 8005490:	eb49 0906 	adc.w	r9, r9, r6
 8005494:	f04f 0100 	mov.w	r1, #0
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054a8:	4688      	mov	r8, r1
 80054aa:	4691      	mov	r9, r2
 80054ac:	eb18 0005 	adds.w	r0, r8, r5
 80054b0:	eb49 0106 	adc.w	r1, r9, r6
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	461d      	mov	r5, r3
 80054ba:	f04f 0600 	mov.w	r6, #0
 80054be:	196b      	adds	r3, r5, r5
 80054c0:	eb46 0406 	adc.w	r4, r6, r6
 80054c4:	461a      	mov	r2, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	f7fb fbc0 	bl	8000c4c <__aeabi_uldivmod>
 80054cc:	4603      	mov	r3, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	461a      	mov	r2, r3
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <UART_SetConfig+0x384>)
 80054d4:	fba3 2302 	umull	r2, r3, r3, r2
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	461d      	mov	r5, r3
 80054e2:	f04f 0600 	mov.w	r6, #0
 80054e6:	46a9      	mov	r9, r5
 80054e8:	46b2      	mov	sl, r6
 80054ea:	eb19 0309 	adds.w	r3, r9, r9
 80054ee:	eb4a 040a 	adc.w	r4, sl, sl
 80054f2:	4699      	mov	r9, r3
 80054f4:	46a2      	mov	sl, r4
 80054f6:	eb19 0905 	adds.w	r9, r9, r5
 80054fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80054fe:	f04f 0100 	mov.w	r1, #0
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800550a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800550e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005512:	4689      	mov	r9, r1
 8005514:	4692      	mov	sl, r2
 8005516:	eb19 0005 	adds.w	r0, r9, r5
 800551a:	eb4a 0106 	adc.w	r1, sl, r6
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	461d      	mov	r5, r3
 8005524:	f04f 0600 	mov.w	r6, #0
 8005528:	196b      	adds	r3, r5, r5
 800552a:	eb46 0406 	adc.w	r4, r6, r6
 800552e:	461a      	mov	r2, r3
 8005530:	4623      	mov	r3, r4
 8005532:	f7fb fb8b 	bl	8000c4c <__aeabi_uldivmod>
 8005536:	4603      	mov	r3, r0
 8005538:	460c      	mov	r4, r1
 800553a:	461a      	mov	r2, r3
 800553c:	4b2c      	ldr	r3, [pc, #176]	; (80055f0 <UART_SetConfig+0x384>)
 800553e:	fba3 1302 	umull	r1, r3, r3, r2
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	2164      	movs	r1, #100	; 0x64
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	3332      	adds	r3, #50	; 0x32
 8005550:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <UART_SetConfig+0x384>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800555e:	4498      	add	r8, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	461d      	mov	r5, r3
 8005564:	f04f 0600 	mov.w	r6, #0
 8005568:	46a9      	mov	r9, r5
 800556a:	46b2      	mov	sl, r6
 800556c:	eb19 0309 	adds.w	r3, r9, r9
 8005570:	eb4a 040a 	adc.w	r4, sl, sl
 8005574:	4699      	mov	r9, r3
 8005576:	46a2      	mov	sl, r4
 8005578:	eb19 0905 	adds.w	r9, r9, r5
 800557c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800558c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005590:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005594:	4689      	mov	r9, r1
 8005596:	4692      	mov	sl, r2
 8005598:	eb19 0005 	adds.w	r0, r9, r5
 800559c:	eb4a 0106 	adc.w	r1, sl, r6
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	461d      	mov	r5, r3
 80055a6:	f04f 0600 	mov.w	r6, #0
 80055aa:	196b      	adds	r3, r5, r5
 80055ac:	eb46 0406 	adc.w	r4, r6, r6
 80055b0:	461a      	mov	r2, r3
 80055b2:	4623      	mov	r3, r4
 80055b4:	f7fb fb4a 	bl	8000c4c <__aeabi_uldivmod>
 80055b8:	4603      	mov	r3, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	461a      	mov	r2, r3
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <UART_SetConfig+0x384>)
 80055c0:	fba3 1302 	umull	r1, r3, r3, r2
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	2164      	movs	r1, #100	; 0x64
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	3332      	adds	r3, #50	; 0x32
 80055d2:	4a07      	ldr	r2, [pc, #28]	; (80055f0 <UART_SetConfig+0x384>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	f003 0207 	and.w	r2, r3, #7
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4442      	add	r2, r8
 80055e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80055e6:	e1b2      	b.n	800594e <UART_SetConfig+0x6e2>
 80055e8:	40011000 	.word	0x40011000
 80055ec:	40011400 	.word	0x40011400
 80055f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4ad7      	ldr	r2, [pc, #860]	; (8005958 <UART_SetConfig+0x6ec>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d005      	beq.n	800560a <UART_SetConfig+0x39e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4ad6      	ldr	r2, [pc, #856]	; (800595c <UART_SetConfig+0x6f0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	f040 80d1 	bne.w	80057ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800560a:	f7fd ffe3 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 800560e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	469a      	mov	sl, r3
 8005614:	f04f 0b00 	mov.w	fp, #0
 8005618:	46d0      	mov	r8, sl
 800561a:	46d9      	mov	r9, fp
 800561c:	eb18 0308 	adds.w	r3, r8, r8
 8005620:	eb49 0409 	adc.w	r4, r9, r9
 8005624:	4698      	mov	r8, r3
 8005626:	46a1      	mov	r9, r4
 8005628:	eb18 080a 	adds.w	r8, r8, sl
 800562c:	eb49 090b 	adc.w	r9, r9, fp
 8005630:	f04f 0100 	mov.w	r1, #0
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800563c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005640:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005644:	4688      	mov	r8, r1
 8005646:	4691      	mov	r9, r2
 8005648:	eb1a 0508 	adds.w	r5, sl, r8
 800564c:	eb4b 0609 	adc.w	r6, fp, r9
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	4619      	mov	r1, r3
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	f04f 0400 	mov.w	r4, #0
 8005662:	0094      	lsls	r4, r2, #2
 8005664:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005668:	008b      	lsls	r3, r1, #2
 800566a:	461a      	mov	r2, r3
 800566c:	4623      	mov	r3, r4
 800566e:	4628      	mov	r0, r5
 8005670:	4631      	mov	r1, r6
 8005672:	f7fb faeb 	bl	8000c4c <__aeabi_uldivmod>
 8005676:	4603      	mov	r3, r0
 8005678:	460c      	mov	r4, r1
 800567a:	461a      	mov	r2, r3
 800567c:	4bb8      	ldr	r3, [pc, #736]	; (8005960 <UART_SetConfig+0x6f4>)
 800567e:	fba3 2302 	umull	r2, r3, r3, r2
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	469b      	mov	fp, r3
 800568c:	f04f 0c00 	mov.w	ip, #0
 8005690:	46d9      	mov	r9, fp
 8005692:	46e2      	mov	sl, ip
 8005694:	eb19 0309 	adds.w	r3, r9, r9
 8005698:	eb4a 040a 	adc.w	r4, sl, sl
 800569c:	4699      	mov	r9, r3
 800569e:	46a2      	mov	sl, r4
 80056a0:	eb19 090b 	adds.w	r9, r9, fp
 80056a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056a8:	f04f 0100 	mov.w	r1, #0
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056bc:	4689      	mov	r9, r1
 80056be:	4692      	mov	sl, r2
 80056c0:	eb1b 0509 	adds.w	r5, fp, r9
 80056c4:	eb4c 060a 	adc.w	r6, ip, sl
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4619      	mov	r1, r3
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	f04f 0400 	mov.w	r4, #0
 80056da:	0094      	lsls	r4, r2, #2
 80056dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056e0:	008b      	lsls	r3, r1, #2
 80056e2:	461a      	mov	r2, r3
 80056e4:	4623      	mov	r3, r4
 80056e6:	4628      	mov	r0, r5
 80056e8:	4631      	mov	r1, r6
 80056ea:	f7fb faaf 	bl	8000c4c <__aeabi_uldivmod>
 80056ee:	4603      	mov	r3, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	461a      	mov	r2, r3
 80056f4:	4b9a      	ldr	r3, [pc, #616]	; (8005960 <UART_SetConfig+0x6f4>)
 80056f6:	fba3 1302 	umull	r1, r3, r3, r2
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	2164      	movs	r1, #100	; 0x64
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	3332      	adds	r3, #50	; 0x32
 8005708:	4a95      	ldr	r2, [pc, #596]	; (8005960 <UART_SetConfig+0x6f4>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005714:	4498      	add	r8, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	469b      	mov	fp, r3
 800571a:	f04f 0c00 	mov.w	ip, #0
 800571e:	46d9      	mov	r9, fp
 8005720:	46e2      	mov	sl, ip
 8005722:	eb19 0309 	adds.w	r3, r9, r9
 8005726:	eb4a 040a 	adc.w	r4, sl, sl
 800572a:	4699      	mov	r9, r3
 800572c:	46a2      	mov	sl, r4
 800572e:	eb19 090b 	adds.w	r9, r9, fp
 8005732:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005736:	f04f 0100 	mov.w	r1, #0
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005742:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005746:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800574a:	4689      	mov	r9, r1
 800574c:	4692      	mov	sl, r2
 800574e:	eb1b 0509 	adds.w	r5, fp, r9
 8005752:	eb4c 060a 	adc.w	r6, ip, sl
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4619      	mov	r1, r3
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	f04f 0400 	mov.w	r4, #0
 8005768:	0094      	lsls	r4, r2, #2
 800576a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800576e:	008b      	lsls	r3, r1, #2
 8005770:	461a      	mov	r2, r3
 8005772:	4623      	mov	r3, r4
 8005774:	4628      	mov	r0, r5
 8005776:	4631      	mov	r1, r6
 8005778:	f7fb fa68 	bl	8000c4c <__aeabi_uldivmod>
 800577c:	4603      	mov	r3, r0
 800577e:	460c      	mov	r4, r1
 8005780:	461a      	mov	r2, r3
 8005782:	4b77      	ldr	r3, [pc, #476]	; (8005960 <UART_SetConfig+0x6f4>)
 8005784:	fba3 1302 	umull	r1, r3, r3, r2
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	2164      	movs	r1, #100	; 0x64
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	3332      	adds	r3, #50	; 0x32
 8005796:	4a72      	ldr	r2, [pc, #456]	; (8005960 <UART_SetConfig+0x6f4>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f003 020f 	and.w	r2, r3, #15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4442      	add	r2, r8
 80057a8:	609a      	str	r2, [r3, #8]
 80057aa:	e0d0      	b.n	800594e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ac:	f7fd fefe 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 80057b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	469a      	mov	sl, r3
 80057b6:	f04f 0b00 	mov.w	fp, #0
 80057ba:	46d0      	mov	r8, sl
 80057bc:	46d9      	mov	r9, fp
 80057be:	eb18 0308 	adds.w	r3, r8, r8
 80057c2:	eb49 0409 	adc.w	r4, r9, r9
 80057c6:	4698      	mov	r8, r3
 80057c8:	46a1      	mov	r9, r4
 80057ca:	eb18 080a 	adds.w	r8, r8, sl
 80057ce:	eb49 090b 	adc.w	r9, r9, fp
 80057d2:	f04f 0100 	mov.w	r1, #0
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057e6:	4688      	mov	r8, r1
 80057e8:	4691      	mov	r9, r2
 80057ea:	eb1a 0508 	adds.w	r5, sl, r8
 80057ee:	eb4b 0609 	adc.w	r6, fp, r9
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4619      	mov	r1, r3
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	f04f 0400 	mov.w	r4, #0
 8005804:	0094      	lsls	r4, r2, #2
 8005806:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800580a:	008b      	lsls	r3, r1, #2
 800580c:	461a      	mov	r2, r3
 800580e:	4623      	mov	r3, r4
 8005810:	4628      	mov	r0, r5
 8005812:	4631      	mov	r1, r6
 8005814:	f7fb fa1a 	bl	8000c4c <__aeabi_uldivmod>
 8005818:	4603      	mov	r3, r0
 800581a:	460c      	mov	r4, r1
 800581c:	461a      	mov	r2, r3
 800581e:	4b50      	ldr	r3, [pc, #320]	; (8005960 <UART_SetConfig+0x6f4>)
 8005820:	fba3 2302 	umull	r2, r3, r3, r2
 8005824:	095b      	lsrs	r3, r3, #5
 8005826:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	469b      	mov	fp, r3
 800582e:	f04f 0c00 	mov.w	ip, #0
 8005832:	46d9      	mov	r9, fp
 8005834:	46e2      	mov	sl, ip
 8005836:	eb19 0309 	adds.w	r3, r9, r9
 800583a:	eb4a 040a 	adc.w	r4, sl, sl
 800583e:	4699      	mov	r9, r3
 8005840:	46a2      	mov	sl, r4
 8005842:	eb19 090b 	adds.w	r9, r9, fp
 8005846:	eb4a 0a0c 	adc.w	sl, sl, ip
 800584a:	f04f 0100 	mov.w	r1, #0
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005856:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800585a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800585e:	4689      	mov	r9, r1
 8005860:	4692      	mov	sl, r2
 8005862:	eb1b 0509 	adds.w	r5, fp, r9
 8005866:	eb4c 060a 	adc.w	r6, ip, sl
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4619      	mov	r1, r3
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	f04f 0400 	mov.w	r4, #0
 800587c:	0094      	lsls	r4, r2, #2
 800587e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005882:	008b      	lsls	r3, r1, #2
 8005884:	461a      	mov	r2, r3
 8005886:	4623      	mov	r3, r4
 8005888:	4628      	mov	r0, r5
 800588a:	4631      	mov	r1, r6
 800588c:	f7fb f9de 	bl	8000c4c <__aeabi_uldivmod>
 8005890:	4603      	mov	r3, r0
 8005892:	460c      	mov	r4, r1
 8005894:	461a      	mov	r2, r3
 8005896:	4b32      	ldr	r3, [pc, #200]	; (8005960 <UART_SetConfig+0x6f4>)
 8005898:	fba3 1302 	umull	r1, r3, r3, r2
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	2164      	movs	r1, #100	; 0x64
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	3332      	adds	r3, #50	; 0x32
 80058aa:	4a2d      	ldr	r2, [pc, #180]	; (8005960 <UART_SetConfig+0x6f4>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b6:	4498      	add	r8, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	469b      	mov	fp, r3
 80058bc:	f04f 0c00 	mov.w	ip, #0
 80058c0:	46d9      	mov	r9, fp
 80058c2:	46e2      	mov	sl, ip
 80058c4:	eb19 0309 	adds.w	r3, r9, r9
 80058c8:	eb4a 040a 	adc.w	r4, sl, sl
 80058cc:	4699      	mov	r9, r3
 80058ce:	46a2      	mov	sl, r4
 80058d0:	eb19 090b 	adds.w	r9, r9, fp
 80058d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058d8:	f04f 0100 	mov.w	r1, #0
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058ec:	4689      	mov	r9, r1
 80058ee:	4692      	mov	sl, r2
 80058f0:	eb1b 0509 	adds.w	r5, fp, r9
 80058f4:	eb4c 060a 	adc.w	r6, ip, sl
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4619      	mov	r1, r3
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	f04f 0400 	mov.w	r4, #0
 800590a:	0094      	lsls	r4, r2, #2
 800590c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005910:	008b      	lsls	r3, r1, #2
 8005912:	461a      	mov	r2, r3
 8005914:	4623      	mov	r3, r4
 8005916:	4628      	mov	r0, r5
 8005918:	4631      	mov	r1, r6
 800591a:	f7fb f997 	bl	8000c4c <__aeabi_uldivmod>
 800591e:	4603      	mov	r3, r0
 8005920:	460c      	mov	r4, r1
 8005922:	461a      	mov	r2, r3
 8005924:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <UART_SetConfig+0x6f4>)
 8005926:	fba3 1302 	umull	r1, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2164      	movs	r1, #100	; 0x64
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	3332      	adds	r3, #50	; 0x32
 8005938:	4a09      	ldr	r2, [pc, #36]	; (8005960 <UART_SetConfig+0x6f4>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	f003 020f 	and.w	r2, r3, #15
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4442      	add	r2, r8
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	e7ff      	b.n	800594e <UART_SetConfig+0x6e2>
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005958:	40011000 	.word	0x40011000
 800595c:	40011400 	.word	0x40011400
 8005960:	51eb851f 	.word	0x51eb851f

08005964 <__errno>:
 8005964:	4b01      	ldr	r3, [pc, #4]	; (800596c <__errno+0x8>)
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000014 	.word	0x20000014

08005970 <__libc_init_array>:
 8005970:	b570      	push	{r4, r5, r6, lr}
 8005972:	4e0d      	ldr	r6, [pc, #52]	; (80059a8 <__libc_init_array+0x38>)
 8005974:	4c0d      	ldr	r4, [pc, #52]	; (80059ac <__libc_init_array+0x3c>)
 8005976:	1ba4      	subs	r4, r4, r6
 8005978:	10a4      	asrs	r4, r4, #2
 800597a:	2500      	movs	r5, #0
 800597c:	42a5      	cmp	r5, r4
 800597e:	d109      	bne.n	8005994 <__libc_init_array+0x24>
 8005980:	4e0b      	ldr	r6, [pc, #44]	; (80059b0 <__libc_init_array+0x40>)
 8005982:	4c0c      	ldr	r4, [pc, #48]	; (80059b4 <__libc_init_array+0x44>)
 8005984:	f001 ff7a 	bl	800787c <_init>
 8005988:	1ba4      	subs	r4, r4, r6
 800598a:	10a4      	asrs	r4, r4, #2
 800598c:	2500      	movs	r5, #0
 800598e:	42a5      	cmp	r5, r4
 8005990:	d105      	bne.n	800599e <__libc_init_array+0x2e>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005998:	4798      	blx	r3
 800599a:	3501      	adds	r5, #1
 800599c:	e7ee      	b.n	800597c <__libc_init_array+0xc>
 800599e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059a2:	4798      	blx	r3
 80059a4:	3501      	adds	r5, #1
 80059a6:	e7f2      	b.n	800598e <__libc_init_array+0x1e>
 80059a8:	08007b60 	.word	0x08007b60
 80059ac:	08007b60 	.word	0x08007b60
 80059b0:	08007b60 	.word	0x08007b60
 80059b4:	08007b64 	.word	0x08007b64

080059b8 <memset>:
 80059b8:	4402      	add	r2, r0
 80059ba:	4603      	mov	r3, r0
 80059bc:	4293      	cmp	r3, r2
 80059be:	d100      	bne.n	80059c2 <memset+0xa>
 80059c0:	4770      	bx	lr
 80059c2:	f803 1b01 	strb.w	r1, [r3], #1
 80059c6:	e7f9      	b.n	80059bc <memset+0x4>

080059c8 <iprintf>:
 80059c8:	b40f      	push	{r0, r1, r2, r3}
 80059ca:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <iprintf+0x2c>)
 80059cc:	b513      	push	{r0, r1, r4, lr}
 80059ce:	681c      	ldr	r4, [r3, #0]
 80059d0:	b124      	cbz	r4, 80059dc <iprintf+0x14>
 80059d2:	69a3      	ldr	r3, [r4, #24]
 80059d4:	b913      	cbnz	r3, 80059dc <iprintf+0x14>
 80059d6:	4620      	mov	r0, r4
 80059d8:	f000 fa22 	bl	8005e20 <__sinit>
 80059dc:	ab05      	add	r3, sp, #20
 80059de:	9a04      	ldr	r2, [sp, #16]
 80059e0:	68a1      	ldr	r1, [r4, #8]
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 fbdb 	bl	80061a0 <_vfiprintf_r>
 80059ea:	b002      	add	sp, #8
 80059ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f0:	b004      	add	sp, #16
 80059f2:	4770      	bx	lr
 80059f4:	20000014 	.word	0x20000014

080059f8 <_puts_r>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	460e      	mov	r6, r1
 80059fc:	4605      	mov	r5, r0
 80059fe:	b118      	cbz	r0, 8005a08 <_puts_r+0x10>
 8005a00:	6983      	ldr	r3, [r0, #24]
 8005a02:	b90b      	cbnz	r3, 8005a08 <_puts_r+0x10>
 8005a04:	f000 fa0c 	bl	8005e20 <__sinit>
 8005a08:	69ab      	ldr	r3, [r5, #24]
 8005a0a:	68ac      	ldr	r4, [r5, #8]
 8005a0c:	b913      	cbnz	r3, 8005a14 <_puts_r+0x1c>
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 fa06 	bl	8005e20 <__sinit>
 8005a14:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <_puts_r+0xac>)
 8005a16:	429c      	cmp	r4, r3
 8005a18:	d117      	bne.n	8005a4a <_puts_r+0x52>
 8005a1a:	686c      	ldr	r4, [r5, #4]
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	071b      	lsls	r3, r3, #28
 8005a20:	d51d      	bpl.n	8005a5e <_puts_r+0x66>
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	b1db      	cbz	r3, 8005a5e <_puts_r+0x66>
 8005a26:	3e01      	subs	r6, #1
 8005a28:	68a3      	ldr	r3, [r4, #8]
 8005a2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	b9e9      	cbnz	r1, 8005a70 <_puts_r+0x78>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da2e      	bge.n	8005a96 <_puts_r+0x9e>
 8005a38:	4622      	mov	r2, r4
 8005a3a:	210a      	movs	r1, #10
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 f83f 	bl	8005ac0 <__swbuf_r>
 8005a42:	3001      	adds	r0, #1
 8005a44:	d011      	beq.n	8005a6a <_puts_r+0x72>
 8005a46:	200a      	movs	r0, #10
 8005a48:	e011      	b.n	8005a6e <_puts_r+0x76>
 8005a4a:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <_puts_r+0xb0>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	d101      	bne.n	8005a54 <_puts_r+0x5c>
 8005a50:	68ac      	ldr	r4, [r5, #8]
 8005a52:	e7e3      	b.n	8005a1c <_puts_r+0x24>
 8005a54:	4b15      	ldr	r3, [pc, #84]	; (8005aac <_puts_r+0xb4>)
 8005a56:	429c      	cmp	r4, r3
 8005a58:	bf08      	it	eq
 8005a5a:	68ec      	ldreq	r4, [r5, #12]
 8005a5c:	e7de      	b.n	8005a1c <_puts_r+0x24>
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 f87f 	bl	8005b64 <__swsetup_r>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0dd      	beq.n	8005a26 <_puts_r+0x2e>
 8005a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	da04      	bge.n	8005a7e <_puts_r+0x86>
 8005a74:	69a2      	ldr	r2, [r4, #24]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	dc06      	bgt.n	8005a88 <_puts_r+0x90>
 8005a7a:	290a      	cmp	r1, #10
 8005a7c:	d004      	beq.n	8005a88 <_puts_r+0x90>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	6022      	str	r2, [r4, #0]
 8005a84:	7019      	strb	r1, [r3, #0]
 8005a86:	e7cf      	b.n	8005a28 <_puts_r+0x30>
 8005a88:	4622      	mov	r2, r4
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f000 f818 	bl	8005ac0 <__swbuf_r>
 8005a90:	3001      	adds	r0, #1
 8005a92:	d1c9      	bne.n	8005a28 <_puts_r+0x30>
 8005a94:	e7e9      	b.n	8005a6a <_puts_r+0x72>
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	200a      	movs	r0, #10
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	6022      	str	r2, [r4, #0]
 8005a9e:	7018      	strb	r0, [r3, #0]
 8005aa0:	e7e5      	b.n	8005a6e <_puts_r+0x76>
 8005aa2:	bf00      	nop
 8005aa4:	08007908 	.word	0x08007908
 8005aa8:	08007928 	.word	0x08007928
 8005aac:	080078e8 	.word	0x080078e8

08005ab0 <puts>:
 8005ab0:	4b02      	ldr	r3, [pc, #8]	; (8005abc <puts+0xc>)
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	f7ff bf9f 	b.w	80059f8 <_puts_r>
 8005aba:	bf00      	nop
 8005abc:	20000014 	.word	0x20000014

08005ac0 <__swbuf_r>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	460e      	mov	r6, r1
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	b118      	cbz	r0, 8005ad2 <__swbuf_r+0x12>
 8005aca:	6983      	ldr	r3, [r0, #24]
 8005acc:	b90b      	cbnz	r3, 8005ad2 <__swbuf_r+0x12>
 8005ace:	f000 f9a7 	bl	8005e20 <__sinit>
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <__swbuf_r+0x98>)
 8005ad4:	429c      	cmp	r4, r3
 8005ad6:	d12a      	bne.n	8005b2e <__swbuf_r+0x6e>
 8005ad8:	686c      	ldr	r4, [r5, #4]
 8005ada:	69a3      	ldr	r3, [r4, #24]
 8005adc:	60a3      	str	r3, [r4, #8]
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	071a      	lsls	r2, r3, #28
 8005ae2:	d52e      	bpl.n	8005b42 <__swbuf_r+0x82>
 8005ae4:	6923      	ldr	r3, [r4, #16]
 8005ae6:	b363      	cbz	r3, 8005b42 <__swbuf_r+0x82>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	1ac0      	subs	r0, r0, r3
 8005aee:	6963      	ldr	r3, [r4, #20]
 8005af0:	b2f6      	uxtb	r6, r6
 8005af2:	4283      	cmp	r3, r0
 8005af4:	4637      	mov	r7, r6
 8005af6:	dc04      	bgt.n	8005b02 <__swbuf_r+0x42>
 8005af8:	4621      	mov	r1, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f926 	bl	8005d4c <_fflush_r>
 8005b00:	bb28      	cbnz	r0, 8005b4e <__swbuf_r+0x8e>
 8005b02:	68a3      	ldr	r3, [r4, #8]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	60a3      	str	r3, [r4, #8]
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	6022      	str	r2, [r4, #0]
 8005b0e:	701e      	strb	r6, [r3, #0]
 8005b10:	6963      	ldr	r3, [r4, #20]
 8005b12:	3001      	adds	r0, #1
 8005b14:	4283      	cmp	r3, r0
 8005b16:	d004      	beq.n	8005b22 <__swbuf_r+0x62>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	07db      	lsls	r3, r3, #31
 8005b1c:	d519      	bpl.n	8005b52 <__swbuf_r+0x92>
 8005b1e:	2e0a      	cmp	r6, #10
 8005b20:	d117      	bne.n	8005b52 <__swbuf_r+0x92>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	f000 f911 	bl	8005d4c <_fflush_r>
 8005b2a:	b190      	cbz	r0, 8005b52 <__swbuf_r+0x92>
 8005b2c:	e00f      	b.n	8005b4e <__swbuf_r+0x8e>
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <__swbuf_r+0x9c>)
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d101      	bne.n	8005b38 <__swbuf_r+0x78>
 8005b34:	68ac      	ldr	r4, [r5, #8]
 8005b36:	e7d0      	b.n	8005ada <__swbuf_r+0x1a>
 8005b38:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <__swbuf_r+0xa0>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	bf08      	it	eq
 8005b3e:	68ec      	ldreq	r4, [r5, #12]
 8005b40:	e7cb      	b.n	8005ada <__swbuf_r+0x1a>
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	f000 f80d 	bl	8005b64 <__swsetup_r>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d0cc      	beq.n	8005ae8 <__swbuf_r+0x28>
 8005b4e:	f04f 37ff 	mov.w	r7, #4294967295
 8005b52:	4638      	mov	r0, r7
 8005b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b56:	bf00      	nop
 8005b58:	08007908 	.word	0x08007908
 8005b5c:	08007928 	.word	0x08007928
 8005b60:	080078e8 	.word	0x080078e8

08005b64 <__swsetup_r>:
 8005b64:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <__swsetup_r+0xcc>)
 8005b66:	b570      	push	{r4, r5, r6, lr}
 8005b68:	681d      	ldr	r5, [r3, #0]
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	b125      	cbz	r5, 8005b7a <__swsetup_r+0x16>
 8005b70:	69ab      	ldr	r3, [r5, #24]
 8005b72:	b913      	cbnz	r3, 8005b7a <__swsetup_r+0x16>
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 f953 	bl	8005e20 <__sinit>
 8005b7a:	4b2e      	ldr	r3, [pc, #184]	; (8005c34 <__swsetup_r+0xd0>)
 8005b7c:	429c      	cmp	r4, r3
 8005b7e:	d10f      	bne.n	8005ba0 <__swsetup_r+0x3c>
 8005b80:	686c      	ldr	r4, [r5, #4]
 8005b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	0715      	lsls	r5, r2, #28
 8005b8a:	d42c      	bmi.n	8005be6 <__swsetup_r+0x82>
 8005b8c:	06d0      	lsls	r0, r2, #27
 8005b8e:	d411      	bmi.n	8005bb4 <__swsetup_r+0x50>
 8005b90:	2209      	movs	r2, #9
 8005b92:	6032      	str	r2, [r6, #0]
 8005b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9e:	e03e      	b.n	8005c1e <__swsetup_r+0xba>
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <__swsetup_r+0xd4>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	d101      	bne.n	8005baa <__swsetup_r+0x46>
 8005ba6:	68ac      	ldr	r4, [r5, #8]
 8005ba8:	e7eb      	b.n	8005b82 <__swsetup_r+0x1e>
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <__swsetup_r+0xd8>)
 8005bac:	429c      	cmp	r4, r3
 8005bae:	bf08      	it	eq
 8005bb0:	68ec      	ldreq	r4, [r5, #12]
 8005bb2:	e7e6      	b.n	8005b82 <__swsetup_r+0x1e>
 8005bb4:	0751      	lsls	r1, r2, #29
 8005bb6:	d512      	bpl.n	8005bde <__swsetup_r+0x7a>
 8005bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bba:	b141      	cbz	r1, 8005bce <__swsetup_r+0x6a>
 8005bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bc0:	4299      	cmp	r1, r3
 8005bc2:	d002      	beq.n	8005bca <__swsetup_r+0x66>
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f000 fa19 	bl	8005ffc <_free_r>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6063      	str	r3, [r4, #4]
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f043 0308 	orr.w	r3, r3, #8
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	b94b      	cbnz	r3, 8005bfe <__swsetup_r+0x9a>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf4:	d003      	beq.n	8005bfe <__swsetup_r+0x9a>
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f000 f9bf 	bl	8005f7c <__smakebuf_r>
 8005bfe:	89a2      	ldrh	r2, [r4, #12]
 8005c00:	f012 0301 	ands.w	r3, r2, #1
 8005c04:	d00c      	beq.n	8005c20 <__swsetup_r+0xbc>
 8005c06:	2300      	movs	r3, #0
 8005c08:	60a3      	str	r3, [r4, #8]
 8005c0a:	6963      	ldr	r3, [r4, #20]
 8005c0c:	425b      	negs	r3, r3
 8005c0e:	61a3      	str	r3, [r4, #24]
 8005c10:	6923      	ldr	r3, [r4, #16]
 8005c12:	b953      	cbnz	r3, 8005c2a <__swsetup_r+0xc6>
 8005c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c1c:	d1ba      	bne.n	8005b94 <__swsetup_r+0x30>
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	0792      	lsls	r2, r2, #30
 8005c22:	bf58      	it	pl
 8005c24:	6963      	ldrpl	r3, [r4, #20]
 8005c26:	60a3      	str	r3, [r4, #8]
 8005c28:	e7f2      	b.n	8005c10 <__swsetup_r+0xac>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	e7f7      	b.n	8005c1e <__swsetup_r+0xba>
 8005c2e:	bf00      	nop
 8005c30:	20000014 	.word	0x20000014
 8005c34:	08007908 	.word	0x08007908
 8005c38:	08007928 	.word	0x08007928
 8005c3c:	080078e8 	.word	0x080078e8

08005c40 <__sflush_r>:
 8005c40:	898a      	ldrh	r2, [r1, #12]
 8005c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	4605      	mov	r5, r0
 8005c48:	0710      	lsls	r0, r2, #28
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	d458      	bmi.n	8005d00 <__sflush_r+0xc0>
 8005c4e:	684b      	ldr	r3, [r1, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dc05      	bgt.n	8005c60 <__sflush_r+0x20>
 8005c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	dc02      	bgt.n	8005c60 <__sflush_r+0x20>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	d0f9      	beq.n	8005c5a <__sflush_r+0x1a>
 8005c66:	2300      	movs	r3, #0
 8005c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c6c:	682f      	ldr	r7, [r5, #0]
 8005c6e:	6a21      	ldr	r1, [r4, #32]
 8005c70:	602b      	str	r3, [r5, #0]
 8005c72:	d032      	beq.n	8005cda <__sflush_r+0x9a>
 8005c74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	075a      	lsls	r2, r3, #29
 8005c7a:	d505      	bpl.n	8005c88 <__sflush_r+0x48>
 8005c7c:	6863      	ldr	r3, [r4, #4]
 8005c7e:	1ac0      	subs	r0, r0, r3
 8005c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c82:	b10b      	cbz	r3, 8005c88 <__sflush_r+0x48>
 8005c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c86:	1ac0      	subs	r0, r0, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c8e:	6a21      	ldr	r1, [r4, #32]
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b0      	blx	r6
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	d106      	bne.n	8005ca8 <__sflush_r+0x68>
 8005c9a:	6829      	ldr	r1, [r5, #0]
 8005c9c:	291d      	cmp	r1, #29
 8005c9e:	d848      	bhi.n	8005d32 <__sflush_r+0xf2>
 8005ca0:	4a29      	ldr	r2, [pc, #164]	; (8005d48 <__sflush_r+0x108>)
 8005ca2:	40ca      	lsrs	r2, r1
 8005ca4:	07d6      	lsls	r6, r2, #31
 8005ca6:	d544      	bpl.n	8005d32 <__sflush_r+0xf2>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	6062      	str	r2, [r4, #4]
 8005cac:	04d9      	lsls	r1, r3, #19
 8005cae:	6922      	ldr	r2, [r4, #16]
 8005cb0:	6022      	str	r2, [r4, #0]
 8005cb2:	d504      	bpl.n	8005cbe <__sflush_r+0x7e>
 8005cb4:	1c42      	adds	r2, r0, #1
 8005cb6:	d101      	bne.n	8005cbc <__sflush_r+0x7c>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b903      	cbnz	r3, 8005cbe <__sflush_r+0x7e>
 8005cbc:	6560      	str	r0, [r4, #84]	; 0x54
 8005cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cc0:	602f      	str	r7, [r5, #0]
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	d0c9      	beq.n	8005c5a <__sflush_r+0x1a>
 8005cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cca:	4299      	cmp	r1, r3
 8005ccc:	d002      	beq.n	8005cd4 <__sflush_r+0x94>
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 f994 	bl	8005ffc <_free_r>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8005cd8:	e7c0      	b.n	8005c5c <__sflush_r+0x1c>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b0      	blx	r6
 8005ce0:	1c41      	adds	r1, r0, #1
 8005ce2:	d1c8      	bne.n	8005c76 <__sflush_r+0x36>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0c5      	beq.n	8005c76 <__sflush_r+0x36>
 8005cea:	2b1d      	cmp	r3, #29
 8005cec:	d001      	beq.n	8005cf2 <__sflush_r+0xb2>
 8005cee:	2b16      	cmp	r3, #22
 8005cf0:	d101      	bne.n	8005cf6 <__sflush_r+0xb6>
 8005cf2:	602f      	str	r7, [r5, #0]
 8005cf4:	e7b1      	b.n	8005c5a <__sflush_r+0x1a>
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	e7ad      	b.n	8005c5c <__sflush_r+0x1c>
 8005d00:	690f      	ldr	r7, [r1, #16]
 8005d02:	2f00      	cmp	r7, #0
 8005d04:	d0a9      	beq.n	8005c5a <__sflush_r+0x1a>
 8005d06:	0793      	lsls	r3, r2, #30
 8005d08:	680e      	ldr	r6, [r1, #0]
 8005d0a:	bf08      	it	eq
 8005d0c:	694b      	ldreq	r3, [r1, #20]
 8005d0e:	600f      	str	r7, [r1, #0]
 8005d10:	bf18      	it	ne
 8005d12:	2300      	movne	r3, #0
 8005d14:	eba6 0807 	sub.w	r8, r6, r7
 8005d18:	608b      	str	r3, [r1, #8]
 8005d1a:	f1b8 0f00 	cmp.w	r8, #0
 8005d1e:	dd9c      	ble.n	8005c5a <__sflush_r+0x1a>
 8005d20:	4643      	mov	r3, r8
 8005d22:	463a      	mov	r2, r7
 8005d24:	6a21      	ldr	r1, [r4, #32]
 8005d26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b0      	blx	r6
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	dc06      	bgt.n	8005d3e <__sflush_r+0xfe>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	e78e      	b.n	8005c5c <__sflush_r+0x1c>
 8005d3e:	4407      	add	r7, r0
 8005d40:	eba8 0800 	sub.w	r8, r8, r0
 8005d44:	e7e9      	b.n	8005d1a <__sflush_r+0xda>
 8005d46:	bf00      	nop
 8005d48:	20400001 	.word	0x20400001

08005d4c <_fflush_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	690b      	ldr	r3, [r1, #16]
 8005d50:	4605      	mov	r5, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	b1db      	cbz	r3, 8005d8e <_fflush_r+0x42>
 8005d56:	b118      	cbz	r0, 8005d60 <_fflush_r+0x14>
 8005d58:	6983      	ldr	r3, [r0, #24]
 8005d5a:	b90b      	cbnz	r3, 8005d60 <_fflush_r+0x14>
 8005d5c:	f000 f860 	bl	8005e20 <__sinit>
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <_fflush_r+0x48>)
 8005d62:	429c      	cmp	r4, r3
 8005d64:	d109      	bne.n	8005d7a <_fflush_r+0x2e>
 8005d66:	686c      	ldr	r4, [r5, #4]
 8005d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d6c:	b17b      	cbz	r3, 8005d8e <_fflush_r+0x42>
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4628      	mov	r0, r5
 8005d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d76:	f7ff bf63 	b.w	8005c40 <__sflush_r>
 8005d7a:	4b07      	ldr	r3, [pc, #28]	; (8005d98 <_fflush_r+0x4c>)
 8005d7c:	429c      	cmp	r4, r3
 8005d7e:	d101      	bne.n	8005d84 <_fflush_r+0x38>
 8005d80:	68ac      	ldr	r4, [r5, #8]
 8005d82:	e7f1      	b.n	8005d68 <_fflush_r+0x1c>
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <_fflush_r+0x50>)
 8005d86:	429c      	cmp	r4, r3
 8005d88:	bf08      	it	eq
 8005d8a:	68ec      	ldreq	r4, [r5, #12]
 8005d8c:	e7ec      	b.n	8005d68 <_fflush_r+0x1c>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	bd38      	pop	{r3, r4, r5, pc}
 8005d92:	bf00      	nop
 8005d94:	08007908 	.word	0x08007908
 8005d98:	08007928 	.word	0x08007928
 8005d9c:	080078e8 	.word	0x080078e8

08005da0 <std>:
 8005da0:	2300      	movs	r3, #0
 8005da2:	b510      	push	{r4, lr}
 8005da4:	4604      	mov	r4, r0
 8005da6:	e9c0 3300 	strd	r3, r3, [r0]
 8005daa:	6083      	str	r3, [r0, #8]
 8005dac:	8181      	strh	r1, [r0, #12]
 8005dae:	6643      	str	r3, [r0, #100]	; 0x64
 8005db0:	81c2      	strh	r2, [r0, #14]
 8005db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005db6:	6183      	str	r3, [r0, #24]
 8005db8:	4619      	mov	r1, r3
 8005dba:	2208      	movs	r2, #8
 8005dbc:	305c      	adds	r0, #92	; 0x5c
 8005dbe:	f7ff fdfb 	bl	80059b8 <memset>
 8005dc2:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <std+0x38>)
 8005dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <std+0x3c>)
 8005dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <std+0x40>)
 8005dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <std+0x44>)
 8005dd0:	6224      	str	r4, [r4, #32]
 8005dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	bf00      	nop
 8005dd8:	080066fd 	.word	0x080066fd
 8005ddc:	0800671f 	.word	0x0800671f
 8005de0:	08006757 	.word	0x08006757
 8005de4:	0800677b 	.word	0x0800677b

08005de8 <_cleanup_r>:
 8005de8:	4901      	ldr	r1, [pc, #4]	; (8005df0 <_cleanup_r+0x8>)
 8005dea:	f000 b885 	b.w	8005ef8 <_fwalk_reent>
 8005dee:	bf00      	nop
 8005df0:	08005d4d 	.word	0x08005d4d

08005df4 <__sfmoreglue>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	1e4a      	subs	r2, r1, #1
 8005df8:	2568      	movs	r5, #104	; 0x68
 8005dfa:	4355      	muls	r5, r2
 8005dfc:	460e      	mov	r6, r1
 8005dfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e02:	f000 f949 	bl	8006098 <_malloc_r>
 8005e06:	4604      	mov	r4, r0
 8005e08:	b140      	cbz	r0, 8005e1c <__sfmoreglue+0x28>
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	e9c0 1600 	strd	r1, r6, [r0]
 8005e10:	300c      	adds	r0, #12
 8005e12:	60a0      	str	r0, [r4, #8]
 8005e14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e18:	f7ff fdce 	bl	80059b8 <memset>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}

08005e20 <__sinit>:
 8005e20:	6983      	ldr	r3, [r0, #24]
 8005e22:	b510      	push	{r4, lr}
 8005e24:	4604      	mov	r4, r0
 8005e26:	bb33      	cbnz	r3, 8005e76 <__sinit+0x56>
 8005e28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005e2c:	6503      	str	r3, [r0, #80]	; 0x50
 8005e2e:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <__sinit+0x58>)
 8005e30:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <__sinit+0x5c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6282      	str	r2, [r0, #40]	; 0x28
 8005e36:	4298      	cmp	r0, r3
 8005e38:	bf04      	itt	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	6183      	streq	r3, [r0, #24]
 8005e3e:	f000 f81f 	bl	8005e80 <__sfp>
 8005e42:	6060      	str	r0, [r4, #4]
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 f81b 	bl	8005e80 <__sfp>
 8005e4a:	60a0      	str	r0, [r4, #8]
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 f817 	bl	8005e80 <__sfp>
 8005e52:	2200      	movs	r2, #0
 8005e54:	60e0      	str	r0, [r4, #12]
 8005e56:	2104      	movs	r1, #4
 8005e58:	6860      	ldr	r0, [r4, #4]
 8005e5a:	f7ff ffa1 	bl	8005da0 <std>
 8005e5e:	2201      	movs	r2, #1
 8005e60:	2109      	movs	r1, #9
 8005e62:	68a0      	ldr	r0, [r4, #8]
 8005e64:	f7ff ff9c 	bl	8005da0 <std>
 8005e68:	2202      	movs	r2, #2
 8005e6a:	2112      	movs	r1, #18
 8005e6c:	68e0      	ldr	r0, [r4, #12]
 8005e6e:	f7ff ff97 	bl	8005da0 <std>
 8005e72:	2301      	movs	r3, #1
 8005e74:	61a3      	str	r3, [r4, #24]
 8005e76:	bd10      	pop	{r4, pc}
 8005e78:	080078e4 	.word	0x080078e4
 8005e7c:	08005de9 	.word	0x08005de9

08005e80 <__sfp>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	4b1b      	ldr	r3, [pc, #108]	; (8005ef0 <__sfp+0x70>)
 8005e84:	681e      	ldr	r6, [r3, #0]
 8005e86:	69b3      	ldr	r3, [r6, #24]
 8005e88:	4607      	mov	r7, r0
 8005e8a:	b913      	cbnz	r3, 8005e92 <__sfp+0x12>
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f7ff ffc7 	bl	8005e20 <__sinit>
 8005e92:	3648      	adds	r6, #72	; 0x48
 8005e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	d503      	bpl.n	8005ea4 <__sfp+0x24>
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	b133      	cbz	r3, 8005eae <__sfp+0x2e>
 8005ea0:	6836      	ldr	r6, [r6, #0]
 8005ea2:	e7f7      	b.n	8005e94 <__sfp+0x14>
 8005ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ea8:	b16d      	cbz	r5, 8005ec6 <__sfp+0x46>
 8005eaa:	3468      	adds	r4, #104	; 0x68
 8005eac:	e7f4      	b.n	8005e98 <__sfp+0x18>
 8005eae:	2104      	movs	r1, #4
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	f7ff ff9f 	bl	8005df4 <__sfmoreglue>
 8005eb6:	6030      	str	r0, [r6, #0]
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d1f1      	bne.n	8005ea0 <__sfp+0x20>
 8005ebc:	230c      	movs	r3, #12
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <__sfp+0x74>)
 8005ec8:	6665      	str	r5, [r4, #100]	; 0x64
 8005eca:	e9c4 5500 	strd	r5, r5, [r4]
 8005ece:	60a5      	str	r5, [r4, #8]
 8005ed0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005ed4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005ed8:	2208      	movs	r2, #8
 8005eda:	4629      	mov	r1, r5
 8005edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ee0:	f7ff fd6a 	bl	80059b8 <memset>
 8005ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005eec:	e7e9      	b.n	8005ec2 <__sfp+0x42>
 8005eee:	bf00      	nop
 8005ef0:	080078e4 	.word	0x080078e4
 8005ef4:	ffff0001 	.word	0xffff0001

08005ef8 <_fwalk_reent>:
 8005ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005efc:	4680      	mov	r8, r0
 8005efe:	4689      	mov	r9, r1
 8005f00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f04:	2600      	movs	r6, #0
 8005f06:	b914      	cbnz	r4, 8005f0e <_fwalk_reent+0x16>
 8005f08:	4630      	mov	r0, r6
 8005f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005f12:	3f01      	subs	r7, #1
 8005f14:	d501      	bpl.n	8005f1a <_fwalk_reent+0x22>
 8005f16:	6824      	ldr	r4, [r4, #0]
 8005f18:	e7f5      	b.n	8005f06 <_fwalk_reent+0xe>
 8005f1a:	89ab      	ldrh	r3, [r5, #12]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d907      	bls.n	8005f30 <_fwalk_reent+0x38>
 8005f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f24:	3301      	adds	r3, #1
 8005f26:	d003      	beq.n	8005f30 <_fwalk_reent+0x38>
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	47c8      	blx	r9
 8005f2e:	4306      	orrs	r6, r0
 8005f30:	3568      	adds	r5, #104	; 0x68
 8005f32:	e7ee      	b.n	8005f12 <_fwalk_reent+0x1a>

08005f34 <__swhatbuf_r>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	460e      	mov	r6, r1
 8005f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	b096      	sub	sp, #88	; 0x58
 8005f40:	4614      	mov	r4, r2
 8005f42:	461d      	mov	r5, r3
 8005f44:	da07      	bge.n	8005f56 <__swhatbuf_r+0x22>
 8005f46:	2300      	movs	r3, #0
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	89b3      	ldrh	r3, [r6, #12]
 8005f4c:	061a      	lsls	r2, r3, #24
 8005f4e:	d410      	bmi.n	8005f72 <__swhatbuf_r+0x3e>
 8005f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f54:	e00e      	b.n	8005f74 <__swhatbuf_r+0x40>
 8005f56:	466a      	mov	r2, sp
 8005f58:	f000 fc36 	bl	80067c8 <_fstat_r>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	dbf2      	blt.n	8005f46 <__swhatbuf_r+0x12>
 8005f60:	9a01      	ldr	r2, [sp, #4]
 8005f62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f6a:	425a      	negs	r2, r3
 8005f6c:	415a      	adcs	r2, r3
 8005f6e:	602a      	str	r2, [r5, #0]
 8005f70:	e7ee      	b.n	8005f50 <__swhatbuf_r+0x1c>
 8005f72:	2340      	movs	r3, #64	; 0x40
 8005f74:	2000      	movs	r0, #0
 8005f76:	6023      	str	r3, [r4, #0]
 8005f78:	b016      	add	sp, #88	; 0x58
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}

08005f7c <__smakebuf_r>:
 8005f7c:	898b      	ldrh	r3, [r1, #12]
 8005f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f80:	079d      	lsls	r5, r3, #30
 8005f82:	4606      	mov	r6, r0
 8005f84:	460c      	mov	r4, r1
 8005f86:	d507      	bpl.n	8005f98 <__smakebuf_r+0x1c>
 8005f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	2301      	movs	r3, #1
 8005f92:	6163      	str	r3, [r4, #20]
 8005f94:	b002      	add	sp, #8
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	ab01      	add	r3, sp, #4
 8005f9a:	466a      	mov	r2, sp
 8005f9c:	f7ff ffca 	bl	8005f34 <__swhatbuf_r>
 8005fa0:	9900      	ldr	r1, [sp, #0]
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f000 f877 	bl	8006098 <_malloc_r>
 8005faa:	b948      	cbnz	r0, 8005fc0 <__smakebuf_r+0x44>
 8005fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb0:	059a      	lsls	r2, r3, #22
 8005fb2:	d4ef      	bmi.n	8005f94 <__smakebuf_r+0x18>
 8005fb4:	f023 0303 	bic.w	r3, r3, #3
 8005fb8:	f043 0302 	orr.w	r3, r3, #2
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	e7e3      	b.n	8005f88 <__smakebuf_r+0xc>
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <__smakebuf_r+0x7c>)
 8005fc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	6020      	str	r0, [r4, #0]
 8005fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	6163      	str	r3, [r4, #20]
 8005fd2:	9b01      	ldr	r3, [sp, #4]
 8005fd4:	6120      	str	r0, [r4, #16]
 8005fd6:	b15b      	cbz	r3, 8005ff0 <__smakebuf_r+0x74>
 8005fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f000 fc05 	bl	80067ec <_isatty_r>
 8005fe2:	b128      	cbz	r0, 8005ff0 <__smakebuf_r+0x74>
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	431d      	orrs	r5, r3
 8005ff4:	81a5      	strh	r5, [r4, #12]
 8005ff6:	e7cd      	b.n	8005f94 <__smakebuf_r+0x18>
 8005ff8:	08005de9 	.word	0x08005de9

08005ffc <_free_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4605      	mov	r5, r0
 8006000:	2900      	cmp	r1, #0
 8006002:	d045      	beq.n	8006090 <_free_r+0x94>
 8006004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006008:	1f0c      	subs	r4, r1, #4
 800600a:	2b00      	cmp	r3, #0
 800600c:	bfb8      	it	lt
 800600e:	18e4      	addlt	r4, r4, r3
 8006010:	f000 fc0e 	bl	8006830 <__malloc_lock>
 8006014:	4a1f      	ldr	r2, [pc, #124]	; (8006094 <_free_r+0x98>)
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	4610      	mov	r0, r2
 800601a:	b933      	cbnz	r3, 800602a <_free_r+0x2e>
 800601c:	6063      	str	r3, [r4, #4]
 800601e:	6014      	str	r4, [r2, #0]
 8006020:	4628      	mov	r0, r5
 8006022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006026:	f000 bc04 	b.w	8006832 <__malloc_unlock>
 800602a:	42a3      	cmp	r3, r4
 800602c:	d90c      	bls.n	8006048 <_free_r+0x4c>
 800602e:	6821      	ldr	r1, [r4, #0]
 8006030:	1862      	adds	r2, r4, r1
 8006032:	4293      	cmp	r3, r2
 8006034:	bf04      	itt	eq
 8006036:	681a      	ldreq	r2, [r3, #0]
 8006038:	685b      	ldreq	r3, [r3, #4]
 800603a:	6063      	str	r3, [r4, #4]
 800603c:	bf04      	itt	eq
 800603e:	1852      	addeq	r2, r2, r1
 8006040:	6022      	streq	r2, [r4, #0]
 8006042:	6004      	str	r4, [r0, #0]
 8006044:	e7ec      	b.n	8006020 <_free_r+0x24>
 8006046:	4613      	mov	r3, r2
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	b10a      	cbz	r2, 8006050 <_free_r+0x54>
 800604c:	42a2      	cmp	r2, r4
 800604e:	d9fa      	bls.n	8006046 <_free_r+0x4a>
 8006050:	6819      	ldr	r1, [r3, #0]
 8006052:	1858      	adds	r0, r3, r1
 8006054:	42a0      	cmp	r0, r4
 8006056:	d10b      	bne.n	8006070 <_free_r+0x74>
 8006058:	6820      	ldr	r0, [r4, #0]
 800605a:	4401      	add	r1, r0
 800605c:	1858      	adds	r0, r3, r1
 800605e:	4282      	cmp	r2, r0
 8006060:	6019      	str	r1, [r3, #0]
 8006062:	d1dd      	bne.n	8006020 <_free_r+0x24>
 8006064:	6810      	ldr	r0, [r2, #0]
 8006066:	6852      	ldr	r2, [r2, #4]
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	4401      	add	r1, r0
 800606c:	6019      	str	r1, [r3, #0]
 800606e:	e7d7      	b.n	8006020 <_free_r+0x24>
 8006070:	d902      	bls.n	8006078 <_free_r+0x7c>
 8006072:	230c      	movs	r3, #12
 8006074:	602b      	str	r3, [r5, #0]
 8006076:	e7d3      	b.n	8006020 <_free_r+0x24>
 8006078:	6820      	ldr	r0, [r4, #0]
 800607a:	1821      	adds	r1, r4, r0
 800607c:	428a      	cmp	r2, r1
 800607e:	bf04      	itt	eq
 8006080:	6811      	ldreq	r1, [r2, #0]
 8006082:	6852      	ldreq	r2, [r2, #4]
 8006084:	6062      	str	r2, [r4, #4]
 8006086:	bf04      	itt	eq
 8006088:	1809      	addeq	r1, r1, r0
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	605c      	str	r4, [r3, #4]
 800608e:	e7c7      	b.n	8006020 <_free_r+0x24>
 8006090:	bd38      	pop	{r3, r4, r5, pc}
 8006092:	bf00      	nop
 8006094:	200000e0 	.word	0x200000e0

08006098 <_malloc_r>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	1ccd      	adds	r5, r1, #3
 800609c:	f025 0503 	bic.w	r5, r5, #3
 80060a0:	3508      	adds	r5, #8
 80060a2:	2d0c      	cmp	r5, #12
 80060a4:	bf38      	it	cc
 80060a6:	250c      	movcc	r5, #12
 80060a8:	2d00      	cmp	r5, #0
 80060aa:	4606      	mov	r6, r0
 80060ac:	db01      	blt.n	80060b2 <_malloc_r+0x1a>
 80060ae:	42a9      	cmp	r1, r5
 80060b0:	d903      	bls.n	80060ba <_malloc_r+0x22>
 80060b2:	230c      	movs	r3, #12
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	2000      	movs	r0, #0
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
 80060ba:	f000 fbb9 	bl	8006830 <__malloc_lock>
 80060be:	4a21      	ldr	r2, [pc, #132]	; (8006144 <_malloc_r+0xac>)
 80060c0:	6814      	ldr	r4, [r2, #0]
 80060c2:	4621      	mov	r1, r4
 80060c4:	b991      	cbnz	r1, 80060ec <_malloc_r+0x54>
 80060c6:	4c20      	ldr	r4, [pc, #128]	; (8006148 <_malloc_r+0xb0>)
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	b91b      	cbnz	r3, 80060d4 <_malloc_r+0x3c>
 80060cc:	4630      	mov	r0, r6
 80060ce:	f000 fb05 	bl	80066dc <_sbrk_r>
 80060d2:	6020      	str	r0, [r4, #0]
 80060d4:	4629      	mov	r1, r5
 80060d6:	4630      	mov	r0, r6
 80060d8:	f000 fb00 	bl	80066dc <_sbrk_r>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d124      	bne.n	800612a <_malloc_r+0x92>
 80060e0:	230c      	movs	r3, #12
 80060e2:	6033      	str	r3, [r6, #0]
 80060e4:	4630      	mov	r0, r6
 80060e6:	f000 fba4 	bl	8006832 <__malloc_unlock>
 80060ea:	e7e4      	b.n	80060b6 <_malloc_r+0x1e>
 80060ec:	680b      	ldr	r3, [r1, #0]
 80060ee:	1b5b      	subs	r3, r3, r5
 80060f0:	d418      	bmi.n	8006124 <_malloc_r+0x8c>
 80060f2:	2b0b      	cmp	r3, #11
 80060f4:	d90f      	bls.n	8006116 <_malloc_r+0x7e>
 80060f6:	600b      	str	r3, [r1, #0]
 80060f8:	50cd      	str	r5, [r1, r3]
 80060fa:	18cc      	adds	r4, r1, r3
 80060fc:	4630      	mov	r0, r6
 80060fe:	f000 fb98 	bl	8006832 <__malloc_unlock>
 8006102:	f104 000b 	add.w	r0, r4, #11
 8006106:	1d23      	adds	r3, r4, #4
 8006108:	f020 0007 	bic.w	r0, r0, #7
 800610c:	1ac3      	subs	r3, r0, r3
 800610e:	d0d3      	beq.n	80060b8 <_malloc_r+0x20>
 8006110:	425a      	negs	r2, r3
 8006112:	50e2      	str	r2, [r4, r3]
 8006114:	e7d0      	b.n	80060b8 <_malloc_r+0x20>
 8006116:	428c      	cmp	r4, r1
 8006118:	684b      	ldr	r3, [r1, #4]
 800611a:	bf16      	itet	ne
 800611c:	6063      	strne	r3, [r4, #4]
 800611e:	6013      	streq	r3, [r2, #0]
 8006120:	460c      	movne	r4, r1
 8006122:	e7eb      	b.n	80060fc <_malloc_r+0x64>
 8006124:	460c      	mov	r4, r1
 8006126:	6849      	ldr	r1, [r1, #4]
 8006128:	e7cc      	b.n	80060c4 <_malloc_r+0x2c>
 800612a:	1cc4      	adds	r4, r0, #3
 800612c:	f024 0403 	bic.w	r4, r4, #3
 8006130:	42a0      	cmp	r0, r4
 8006132:	d005      	beq.n	8006140 <_malloc_r+0xa8>
 8006134:	1a21      	subs	r1, r4, r0
 8006136:	4630      	mov	r0, r6
 8006138:	f000 fad0 	bl	80066dc <_sbrk_r>
 800613c:	3001      	adds	r0, #1
 800613e:	d0cf      	beq.n	80060e0 <_malloc_r+0x48>
 8006140:	6025      	str	r5, [r4, #0]
 8006142:	e7db      	b.n	80060fc <_malloc_r+0x64>
 8006144:	200000e0 	.word	0x200000e0
 8006148:	200000e4 	.word	0x200000e4

0800614c <__sfputc_r>:
 800614c:	6893      	ldr	r3, [r2, #8]
 800614e:	3b01      	subs	r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	b410      	push	{r4}
 8006154:	6093      	str	r3, [r2, #8]
 8006156:	da08      	bge.n	800616a <__sfputc_r+0x1e>
 8006158:	6994      	ldr	r4, [r2, #24]
 800615a:	42a3      	cmp	r3, r4
 800615c:	db01      	blt.n	8006162 <__sfputc_r+0x16>
 800615e:	290a      	cmp	r1, #10
 8006160:	d103      	bne.n	800616a <__sfputc_r+0x1e>
 8006162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006166:	f7ff bcab 	b.w	8005ac0 <__swbuf_r>
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	1c58      	adds	r0, r3, #1
 800616e:	6010      	str	r0, [r2, #0]
 8006170:	7019      	strb	r1, [r3, #0]
 8006172:	4608      	mov	r0, r1
 8006174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006178:	4770      	bx	lr

0800617a <__sfputs_r>:
 800617a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617c:	4606      	mov	r6, r0
 800617e:	460f      	mov	r7, r1
 8006180:	4614      	mov	r4, r2
 8006182:	18d5      	adds	r5, r2, r3
 8006184:	42ac      	cmp	r4, r5
 8006186:	d101      	bne.n	800618c <__sfputs_r+0x12>
 8006188:	2000      	movs	r0, #0
 800618a:	e007      	b.n	800619c <__sfputs_r+0x22>
 800618c:	463a      	mov	r2, r7
 800618e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006192:	4630      	mov	r0, r6
 8006194:	f7ff ffda 	bl	800614c <__sfputc_r>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d1f3      	bne.n	8006184 <__sfputs_r+0xa>
 800619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061a0 <_vfiprintf_r>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	460c      	mov	r4, r1
 80061a6:	b09d      	sub	sp, #116	; 0x74
 80061a8:	4617      	mov	r7, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	4606      	mov	r6, r0
 80061ae:	b118      	cbz	r0, 80061b8 <_vfiprintf_r+0x18>
 80061b0:	6983      	ldr	r3, [r0, #24]
 80061b2:	b90b      	cbnz	r3, 80061b8 <_vfiprintf_r+0x18>
 80061b4:	f7ff fe34 	bl	8005e20 <__sinit>
 80061b8:	4b7c      	ldr	r3, [pc, #496]	; (80063ac <_vfiprintf_r+0x20c>)
 80061ba:	429c      	cmp	r4, r3
 80061bc:	d158      	bne.n	8006270 <_vfiprintf_r+0xd0>
 80061be:	6874      	ldr	r4, [r6, #4]
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	0718      	lsls	r0, r3, #28
 80061c4:	d55e      	bpl.n	8006284 <_vfiprintf_r+0xe4>
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d05b      	beq.n	8006284 <_vfiprintf_r+0xe4>
 80061cc:	2300      	movs	r3, #0
 80061ce:	9309      	str	r3, [sp, #36]	; 0x24
 80061d0:	2320      	movs	r3, #32
 80061d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061d6:	2330      	movs	r3, #48	; 0x30
 80061d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061dc:	9503      	str	r5, [sp, #12]
 80061de:	f04f 0b01 	mov.w	fp, #1
 80061e2:	46b8      	mov	r8, r7
 80061e4:	4645      	mov	r5, r8
 80061e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061ea:	b10b      	cbz	r3, 80061f0 <_vfiprintf_r+0x50>
 80061ec:	2b25      	cmp	r3, #37	; 0x25
 80061ee:	d154      	bne.n	800629a <_vfiprintf_r+0xfa>
 80061f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80061f4:	d00b      	beq.n	800620e <_vfiprintf_r+0x6e>
 80061f6:	4653      	mov	r3, sl
 80061f8:	463a      	mov	r2, r7
 80061fa:	4621      	mov	r1, r4
 80061fc:	4630      	mov	r0, r6
 80061fe:	f7ff ffbc 	bl	800617a <__sfputs_r>
 8006202:	3001      	adds	r0, #1
 8006204:	f000 80c2 	beq.w	800638c <_vfiprintf_r+0x1ec>
 8006208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620a:	4453      	add	r3, sl
 800620c:	9309      	str	r3, [sp, #36]	; 0x24
 800620e:	f898 3000 	ldrb.w	r3, [r8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80ba 	beq.w	800638c <_vfiprintf_r+0x1ec>
 8006218:	2300      	movs	r3, #0
 800621a:	f04f 32ff 	mov.w	r2, #4294967295
 800621e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006222:	9304      	str	r3, [sp, #16]
 8006224:	9307      	str	r3, [sp, #28]
 8006226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800622a:	931a      	str	r3, [sp, #104]	; 0x68
 800622c:	46a8      	mov	r8, r5
 800622e:	2205      	movs	r2, #5
 8006230:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006234:	485e      	ldr	r0, [pc, #376]	; (80063b0 <_vfiprintf_r+0x210>)
 8006236:	f7f9 ffeb 	bl	8000210 <memchr>
 800623a:	9b04      	ldr	r3, [sp, #16]
 800623c:	bb78      	cbnz	r0, 800629e <_vfiprintf_r+0xfe>
 800623e:	06d9      	lsls	r1, r3, #27
 8006240:	bf44      	itt	mi
 8006242:	2220      	movmi	r2, #32
 8006244:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006248:	071a      	lsls	r2, r3, #28
 800624a:	bf44      	itt	mi
 800624c:	222b      	movmi	r2, #43	; 0x2b
 800624e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006252:	782a      	ldrb	r2, [r5, #0]
 8006254:	2a2a      	cmp	r2, #42	; 0x2a
 8006256:	d02a      	beq.n	80062ae <_vfiprintf_r+0x10e>
 8006258:	9a07      	ldr	r2, [sp, #28]
 800625a:	46a8      	mov	r8, r5
 800625c:	2000      	movs	r0, #0
 800625e:	250a      	movs	r5, #10
 8006260:	4641      	mov	r1, r8
 8006262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006266:	3b30      	subs	r3, #48	; 0x30
 8006268:	2b09      	cmp	r3, #9
 800626a:	d969      	bls.n	8006340 <_vfiprintf_r+0x1a0>
 800626c:	b360      	cbz	r0, 80062c8 <_vfiprintf_r+0x128>
 800626e:	e024      	b.n	80062ba <_vfiprintf_r+0x11a>
 8006270:	4b50      	ldr	r3, [pc, #320]	; (80063b4 <_vfiprintf_r+0x214>)
 8006272:	429c      	cmp	r4, r3
 8006274:	d101      	bne.n	800627a <_vfiprintf_r+0xda>
 8006276:	68b4      	ldr	r4, [r6, #8]
 8006278:	e7a2      	b.n	80061c0 <_vfiprintf_r+0x20>
 800627a:	4b4f      	ldr	r3, [pc, #316]	; (80063b8 <_vfiprintf_r+0x218>)
 800627c:	429c      	cmp	r4, r3
 800627e:	bf08      	it	eq
 8006280:	68f4      	ldreq	r4, [r6, #12]
 8006282:	e79d      	b.n	80061c0 <_vfiprintf_r+0x20>
 8006284:	4621      	mov	r1, r4
 8006286:	4630      	mov	r0, r6
 8006288:	f7ff fc6c 	bl	8005b64 <__swsetup_r>
 800628c:	2800      	cmp	r0, #0
 800628e:	d09d      	beq.n	80061cc <_vfiprintf_r+0x2c>
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	b01d      	add	sp, #116	; 0x74
 8006296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629a:	46a8      	mov	r8, r5
 800629c:	e7a2      	b.n	80061e4 <_vfiprintf_r+0x44>
 800629e:	4a44      	ldr	r2, [pc, #272]	; (80063b0 <_vfiprintf_r+0x210>)
 80062a0:	1a80      	subs	r0, r0, r2
 80062a2:	fa0b f000 	lsl.w	r0, fp, r0
 80062a6:	4318      	orrs	r0, r3
 80062a8:	9004      	str	r0, [sp, #16]
 80062aa:	4645      	mov	r5, r8
 80062ac:	e7be      	b.n	800622c <_vfiprintf_r+0x8c>
 80062ae:	9a03      	ldr	r2, [sp, #12]
 80062b0:	1d11      	adds	r1, r2, #4
 80062b2:	6812      	ldr	r2, [r2, #0]
 80062b4:	9103      	str	r1, [sp, #12]
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	db01      	blt.n	80062be <_vfiprintf_r+0x11e>
 80062ba:	9207      	str	r2, [sp, #28]
 80062bc:	e004      	b.n	80062c8 <_vfiprintf_r+0x128>
 80062be:	4252      	negs	r2, r2
 80062c0:	f043 0302 	orr.w	r3, r3, #2
 80062c4:	9207      	str	r2, [sp, #28]
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	f898 3000 	ldrb.w	r3, [r8]
 80062cc:	2b2e      	cmp	r3, #46	; 0x2e
 80062ce:	d10e      	bne.n	80062ee <_vfiprintf_r+0x14e>
 80062d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80062d4:	2b2a      	cmp	r3, #42	; 0x2a
 80062d6:	d138      	bne.n	800634a <_vfiprintf_r+0x1aa>
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	9203      	str	r2, [sp, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bfb8      	it	lt
 80062e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80062e8:	f108 0802 	add.w	r8, r8, #2
 80062ec:	9305      	str	r3, [sp, #20]
 80062ee:	4d33      	ldr	r5, [pc, #204]	; (80063bc <_vfiprintf_r+0x21c>)
 80062f0:	f898 1000 	ldrb.w	r1, [r8]
 80062f4:	2203      	movs	r2, #3
 80062f6:	4628      	mov	r0, r5
 80062f8:	f7f9 ff8a 	bl	8000210 <memchr>
 80062fc:	b140      	cbz	r0, 8006310 <_vfiprintf_r+0x170>
 80062fe:	2340      	movs	r3, #64	; 0x40
 8006300:	1b40      	subs	r0, r0, r5
 8006302:	fa03 f000 	lsl.w	r0, r3, r0
 8006306:	9b04      	ldr	r3, [sp, #16]
 8006308:	4303      	orrs	r3, r0
 800630a:	f108 0801 	add.w	r8, r8, #1
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	f898 1000 	ldrb.w	r1, [r8]
 8006314:	482a      	ldr	r0, [pc, #168]	; (80063c0 <_vfiprintf_r+0x220>)
 8006316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800631a:	2206      	movs	r2, #6
 800631c:	f108 0701 	add.w	r7, r8, #1
 8006320:	f7f9 ff76 	bl	8000210 <memchr>
 8006324:	2800      	cmp	r0, #0
 8006326:	d037      	beq.n	8006398 <_vfiprintf_r+0x1f8>
 8006328:	4b26      	ldr	r3, [pc, #152]	; (80063c4 <_vfiprintf_r+0x224>)
 800632a:	bb1b      	cbnz	r3, 8006374 <_vfiprintf_r+0x1d4>
 800632c:	9b03      	ldr	r3, [sp, #12]
 800632e:	3307      	adds	r3, #7
 8006330:	f023 0307 	bic.w	r3, r3, #7
 8006334:	3308      	adds	r3, #8
 8006336:	9303      	str	r3, [sp, #12]
 8006338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633a:	444b      	add	r3, r9
 800633c:	9309      	str	r3, [sp, #36]	; 0x24
 800633e:	e750      	b.n	80061e2 <_vfiprintf_r+0x42>
 8006340:	fb05 3202 	mla	r2, r5, r2, r3
 8006344:	2001      	movs	r0, #1
 8006346:	4688      	mov	r8, r1
 8006348:	e78a      	b.n	8006260 <_vfiprintf_r+0xc0>
 800634a:	2300      	movs	r3, #0
 800634c:	f108 0801 	add.w	r8, r8, #1
 8006350:	9305      	str	r3, [sp, #20]
 8006352:	4619      	mov	r1, r3
 8006354:	250a      	movs	r5, #10
 8006356:	4640      	mov	r0, r8
 8006358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800635c:	3a30      	subs	r2, #48	; 0x30
 800635e:	2a09      	cmp	r2, #9
 8006360:	d903      	bls.n	800636a <_vfiprintf_r+0x1ca>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0c3      	beq.n	80062ee <_vfiprintf_r+0x14e>
 8006366:	9105      	str	r1, [sp, #20]
 8006368:	e7c1      	b.n	80062ee <_vfiprintf_r+0x14e>
 800636a:	fb05 2101 	mla	r1, r5, r1, r2
 800636e:	2301      	movs	r3, #1
 8006370:	4680      	mov	r8, r0
 8006372:	e7f0      	b.n	8006356 <_vfiprintf_r+0x1b6>
 8006374:	ab03      	add	r3, sp, #12
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	4622      	mov	r2, r4
 800637a:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <_vfiprintf_r+0x228>)
 800637c:	a904      	add	r1, sp, #16
 800637e:	4630      	mov	r0, r6
 8006380:	f3af 8000 	nop.w
 8006384:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006388:	4681      	mov	r9, r0
 800638a:	d1d5      	bne.n	8006338 <_vfiprintf_r+0x198>
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	065b      	lsls	r3, r3, #25
 8006390:	f53f af7e 	bmi.w	8006290 <_vfiprintf_r+0xf0>
 8006394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006396:	e77d      	b.n	8006294 <_vfiprintf_r+0xf4>
 8006398:	ab03      	add	r3, sp, #12
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	4622      	mov	r2, r4
 800639e:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <_vfiprintf_r+0x228>)
 80063a0:	a904      	add	r1, sp, #16
 80063a2:	4630      	mov	r0, r6
 80063a4:	f000 f888 	bl	80064b8 <_printf_i>
 80063a8:	e7ec      	b.n	8006384 <_vfiprintf_r+0x1e4>
 80063aa:	bf00      	nop
 80063ac:	08007908 	.word	0x08007908
 80063b0:	08007948 	.word	0x08007948
 80063b4:	08007928 	.word	0x08007928
 80063b8:	080078e8 	.word	0x080078e8
 80063bc:	0800794e 	.word	0x0800794e
 80063c0:	08007952 	.word	0x08007952
 80063c4:	00000000 	.word	0x00000000
 80063c8:	0800617b 	.word	0x0800617b

080063cc <_printf_common>:
 80063cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	4691      	mov	r9, r2
 80063d2:	461f      	mov	r7, r3
 80063d4:	688a      	ldr	r2, [r1, #8]
 80063d6:	690b      	ldr	r3, [r1, #16]
 80063d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063dc:	4293      	cmp	r3, r2
 80063de:	bfb8      	it	lt
 80063e0:	4613      	movlt	r3, r2
 80063e2:	f8c9 3000 	str.w	r3, [r9]
 80063e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063ea:	4606      	mov	r6, r0
 80063ec:	460c      	mov	r4, r1
 80063ee:	b112      	cbz	r2, 80063f6 <_printf_common+0x2a>
 80063f0:	3301      	adds	r3, #1
 80063f2:	f8c9 3000 	str.w	r3, [r9]
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	0699      	lsls	r1, r3, #26
 80063fa:	bf42      	ittt	mi
 80063fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006400:	3302      	addmi	r3, #2
 8006402:	f8c9 3000 	strmi.w	r3, [r9]
 8006406:	6825      	ldr	r5, [r4, #0]
 8006408:	f015 0506 	ands.w	r5, r5, #6
 800640c:	d107      	bne.n	800641e <_printf_common+0x52>
 800640e:	f104 0a19 	add.w	sl, r4, #25
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	f8d9 2000 	ldr.w	r2, [r9]
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	42ab      	cmp	r3, r5
 800641c:	dc28      	bgt.n	8006470 <_printf_common+0xa4>
 800641e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	3300      	adds	r3, #0
 8006426:	bf18      	it	ne
 8006428:	2301      	movne	r3, #1
 800642a:	0692      	lsls	r2, r2, #26
 800642c:	d42d      	bmi.n	800648a <_printf_common+0xbe>
 800642e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006432:	4639      	mov	r1, r7
 8006434:	4630      	mov	r0, r6
 8006436:	47c0      	blx	r8
 8006438:	3001      	adds	r0, #1
 800643a:	d020      	beq.n	800647e <_printf_common+0xb2>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	68e5      	ldr	r5, [r4, #12]
 8006440:	f8d9 2000 	ldr.w	r2, [r9]
 8006444:	f003 0306 	and.w	r3, r3, #6
 8006448:	2b04      	cmp	r3, #4
 800644a:	bf08      	it	eq
 800644c:	1aad      	subeq	r5, r5, r2
 800644e:	68a3      	ldr	r3, [r4, #8]
 8006450:	6922      	ldr	r2, [r4, #16]
 8006452:	bf0c      	ite	eq
 8006454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006458:	2500      	movne	r5, #0
 800645a:	4293      	cmp	r3, r2
 800645c:	bfc4      	itt	gt
 800645e:	1a9b      	subgt	r3, r3, r2
 8006460:	18ed      	addgt	r5, r5, r3
 8006462:	f04f 0900 	mov.w	r9, #0
 8006466:	341a      	adds	r4, #26
 8006468:	454d      	cmp	r5, r9
 800646a:	d11a      	bne.n	80064a2 <_printf_common+0xd6>
 800646c:	2000      	movs	r0, #0
 800646e:	e008      	b.n	8006482 <_printf_common+0xb6>
 8006470:	2301      	movs	r3, #1
 8006472:	4652      	mov	r2, sl
 8006474:	4639      	mov	r1, r7
 8006476:	4630      	mov	r0, r6
 8006478:	47c0      	blx	r8
 800647a:	3001      	adds	r0, #1
 800647c:	d103      	bne.n	8006486 <_printf_common+0xba>
 800647e:	f04f 30ff 	mov.w	r0, #4294967295
 8006482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006486:	3501      	adds	r5, #1
 8006488:	e7c3      	b.n	8006412 <_printf_common+0x46>
 800648a:	18e1      	adds	r1, r4, r3
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	2030      	movs	r0, #48	; 0x30
 8006490:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006494:	4422      	add	r2, r4
 8006496:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800649a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800649e:	3302      	adds	r3, #2
 80064a0:	e7c5      	b.n	800642e <_printf_common+0x62>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4622      	mov	r2, r4
 80064a6:	4639      	mov	r1, r7
 80064a8:	4630      	mov	r0, r6
 80064aa:	47c0      	blx	r8
 80064ac:	3001      	adds	r0, #1
 80064ae:	d0e6      	beq.n	800647e <_printf_common+0xb2>
 80064b0:	f109 0901 	add.w	r9, r9, #1
 80064b4:	e7d8      	b.n	8006468 <_printf_common+0x9c>
	...

080064b8 <_printf_i>:
 80064b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80064c0:	460c      	mov	r4, r1
 80064c2:	7e09      	ldrb	r1, [r1, #24]
 80064c4:	b085      	sub	sp, #20
 80064c6:	296e      	cmp	r1, #110	; 0x6e
 80064c8:	4617      	mov	r7, r2
 80064ca:	4606      	mov	r6, r0
 80064cc:	4698      	mov	r8, r3
 80064ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064d0:	f000 80b3 	beq.w	800663a <_printf_i+0x182>
 80064d4:	d822      	bhi.n	800651c <_printf_i+0x64>
 80064d6:	2963      	cmp	r1, #99	; 0x63
 80064d8:	d036      	beq.n	8006548 <_printf_i+0x90>
 80064da:	d80a      	bhi.n	80064f2 <_printf_i+0x3a>
 80064dc:	2900      	cmp	r1, #0
 80064de:	f000 80b9 	beq.w	8006654 <_printf_i+0x19c>
 80064e2:	2958      	cmp	r1, #88	; 0x58
 80064e4:	f000 8083 	beq.w	80065ee <_printf_i+0x136>
 80064e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064f0:	e032      	b.n	8006558 <_printf_i+0xa0>
 80064f2:	2964      	cmp	r1, #100	; 0x64
 80064f4:	d001      	beq.n	80064fa <_printf_i+0x42>
 80064f6:	2969      	cmp	r1, #105	; 0x69
 80064f8:	d1f6      	bne.n	80064e8 <_printf_i+0x30>
 80064fa:	6820      	ldr	r0, [r4, #0]
 80064fc:	6813      	ldr	r3, [r2, #0]
 80064fe:	0605      	lsls	r5, r0, #24
 8006500:	f103 0104 	add.w	r1, r3, #4
 8006504:	d52a      	bpl.n	800655c <_printf_i+0xa4>
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6011      	str	r1, [r2, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	da03      	bge.n	8006516 <_printf_i+0x5e>
 800650e:	222d      	movs	r2, #45	; 0x2d
 8006510:	425b      	negs	r3, r3
 8006512:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006516:	486f      	ldr	r0, [pc, #444]	; (80066d4 <_printf_i+0x21c>)
 8006518:	220a      	movs	r2, #10
 800651a:	e039      	b.n	8006590 <_printf_i+0xd8>
 800651c:	2973      	cmp	r1, #115	; 0x73
 800651e:	f000 809d 	beq.w	800665c <_printf_i+0x1a4>
 8006522:	d808      	bhi.n	8006536 <_printf_i+0x7e>
 8006524:	296f      	cmp	r1, #111	; 0x6f
 8006526:	d020      	beq.n	800656a <_printf_i+0xb2>
 8006528:	2970      	cmp	r1, #112	; 0x70
 800652a:	d1dd      	bne.n	80064e8 <_printf_i+0x30>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	f043 0320 	orr.w	r3, r3, #32
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	e003      	b.n	800653e <_printf_i+0x86>
 8006536:	2975      	cmp	r1, #117	; 0x75
 8006538:	d017      	beq.n	800656a <_printf_i+0xb2>
 800653a:	2978      	cmp	r1, #120	; 0x78
 800653c:	d1d4      	bne.n	80064e8 <_printf_i+0x30>
 800653e:	2378      	movs	r3, #120	; 0x78
 8006540:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006544:	4864      	ldr	r0, [pc, #400]	; (80066d8 <_printf_i+0x220>)
 8006546:	e055      	b.n	80065f4 <_printf_i+0x13c>
 8006548:	6813      	ldr	r3, [r2, #0]
 800654a:	1d19      	adds	r1, r3, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6011      	str	r1, [r2, #0]
 8006550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006558:	2301      	movs	r3, #1
 800655a:	e08c      	b.n	8006676 <_printf_i+0x1be>
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6011      	str	r1, [r2, #0]
 8006560:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006564:	bf18      	it	ne
 8006566:	b21b      	sxthne	r3, r3
 8006568:	e7cf      	b.n	800650a <_printf_i+0x52>
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	6825      	ldr	r5, [r4, #0]
 800656e:	1d18      	adds	r0, r3, #4
 8006570:	6010      	str	r0, [r2, #0]
 8006572:	0628      	lsls	r0, r5, #24
 8006574:	d501      	bpl.n	800657a <_printf_i+0xc2>
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	e002      	b.n	8006580 <_printf_i+0xc8>
 800657a:	0668      	lsls	r0, r5, #25
 800657c:	d5fb      	bpl.n	8006576 <_printf_i+0xbe>
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	4854      	ldr	r0, [pc, #336]	; (80066d4 <_printf_i+0x21c>)
 8006582:	296f      	cmp	r1, #111	; 0x6f
 8006584:	bf14      	ite	ne
 8006586:	220a      	movne	r2, #10
 8006588:	2208      	moveq	r2, #8
 800658a:	2100      	movs	r1, #0
 800658c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006590:	6865      	ldr	r5, [r4, #4]
 8006592:	60a5      	str	r5, [r4, #8]
 8006594:	2d00      	cmp	r5, #0
 8006596:	f2c0 8095 	blt.w	80066c4 <_printf_i+0x20c>
 800659a:	6821      	ldr	r1, [r4, #0]
 800659c:	f021 0104 	bic.w	r1, r1, #4
 80065a0:	6021      	str	r1, [r4, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d13d      	bne.n	8006622 <_printf_i+0x16a>
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	f040 808e 	bne.w	80066c8 <_printf_i+0x210>
 80065ac:	4665      	mov	r5, ip
 80065ae:	2a08      	cmp	r2, #8
 80065b0:	d10b      	bne.n	80065ca <_printf_i+0x112>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	07db      	lsls	r3, r3, #31
 80065b6:	d508      	bpl.n	80065ca <_printf_i+0x112>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	6862      	ldr	r2, [r4, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	bfde      	ittt	le
 80065c0:	2330      	movle	r3, #48	; 0x30
 80065c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065ca:	ebac 0305 	sub.w	r3, ip, r5
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	f8cd 8000 	str.w	r8, [sp]
 80065d4:	463b      	mov	r3, r7
 80065d6:	aa03      	add	r2, sp, #12
 80065d8:	4621      	mov	r1, r4
 80065da:	4630      	mov	r0, r6
 80065dc:	f7ff fef6 	bl	80063cc <_printf_common>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d14d      	bne.n	8006680 <_printf_i+0x1c8>
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	b005      	add	sp, #20
 80065ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ee:	4839      	ldr	r0, [pc, #228]	; (80066d4 <_printf_i+0x21c>)
 80065f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	6821      	ldr	r1, [r4, #0]
 80065f8:	1d1d      	adds	r5, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6015      	str	r5, [r2, #0]
 80065fe:	060a      	lsls	r2, r1, #24
 8006600:	d50b      	bpl.n	800661a <_printf_i+0x162>
 8006602:	07ca      	lsls	r2, r1, #31
 8006604:	bf44      	itt	mi
 8006606:	f041 0120 	orrmi.w	r1, r1, #32
 800660a:	6021      	strmi	r1, [r4, #0]
 800660c:	b91b      	cbnz	r3, 8006616 <_printf_i+0x15e>
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	f022 0220 	bic.w	r2, r2, #32
 8006614:	6022      	str	r2, [r4, #0]
 8006616:	2210      	movs	r2, #16
 8006618:	e7b7      	b.n	800658a <_printf_i+0xd2>
 800661a:	064d      	lsls	r5, r1, #25
 800661c:	bf48      	it	mi
 800661e:	b29b      	uxthmi	r3, r3
 8006620:	e7ef      	b.n	8006602 <_printf_i+0x14a>
 8006622:	4665      	mov	r5, ip
 8006624:	fbb3 f1f2 	udiv	r1, r3, r2
 8006628:	fb02 3311 	mls	r3, r2, r1, r3
 800662c:	5cc3      	ldrb	r3, [r0, r3]
 800662e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006632:	460b      	mov	r3, r1
 8006634:	2900      	cmp	r1, #0
 8006636:	d1f5      	bne.n	8006624 <_printf_i+0x16c>
 8006638:	e7b9      	b.n	80065ae <_printf_i+0xf6>
 800663a:	6813      	ldr	r3, [r2, #0]
 800663c:	6825      	ldr	r5, [r4, #0]
 800663e:	6961      	ldr	r1, [r4, #20]
 8006640:	1d18      	adds	r0, r3, #4
 8006642:	6010      	str	r0, [r2, #0]
 8006644:	0628      	lsls	r0, r5, #24
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	d501      	bpl.n	800664e <_printf_i+0x196>
 800664a:	6019      	str	r1, [r3, #0]
 800664c:	e002      	b.n	8006654 <_printf_i+0x19c>
 800664e:	066a      	lsls	r2, r5, #25
 8006650:	d5fb      	bpl.n	800664a <_printf_i+0x192>
 8006652:	8019      	strh	r1, [r3, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	4665      	mov	r5, ip
 800665a:	e7b9      	b.n	80065d0 <_printf_i+0x118>
 800665c:	6813      	ldr	r3, [r2, #0]
 800665e:	1d19      	adds	r1, r3, #4
 8006660:	6011      	str	r1, [r2, #0]
 8006662:	681d      	ldr	r5, [r3, #0]
 8006664:	6862      	ldr	r2, [r4, #4]
 8006666:	2100      	movs	r1, #0
 8006668:	4628      	mov	r0, r5
 800666a:	f7f9 fdd1 	bl	8000210 <memchr>
 800666e:	b108      	cbz	r0, 8006674 <_printf_i+0x1bc>
 8006670:	1b40      	subs	r0, r0, r5
 8006672:	6060      	str	r0, [r4, #4]
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	2300      	movs	r3, #0
 800667a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667e:	e7a7      	b.n	80065d0 <_printf_i+0x118>
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	462a      	mov	r2, r5
 8006684:	4639      	mov	r1, r7
 8006686:	4630      	mov	r0, r6
 8006688:	47c0      	blx	r8
 800668a:	3001      	adds	r0, #1
 800668c:	d0aa      	beq.n	80065e4 <_printf_i+0x12c>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	079b      	lsls	r3, r3, #30
 8006692:	d413      	bmi.n	80066bc <_printf_i+0x204>
 8006694:	68e0      	ldr	r0, [r4, #12]
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	4298      	cmp	r0, r3
 800669a:	bfb8      	it	lt
 800669c:	4618      	movlt	r0, r3
 800669e:	e7a3      	b.n	80065e8 <_printf_i+0x130>
 80066a0:	2301      	movs	r3, #1
 80066a2:	464a      	mov	r2, r9
 80066a4:	4639      	mov	r1, r7
 80066a6:	4630      	mov	r0, r6
 80066a8:	47c0      	blx	r8
 80066aa:	3001      	adds	r0, #1
 80066ac:	d09a      	beq.n	80065e4 <_printf_i+0x12c>
 80066ae:	3501      	adds	r5, #1
 80066b0:	68e3      	ldr	r3, [r4, #12]
 80066b2:	9a03      	ldr	r2, [sp, #12]
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	42ab      	cmp	r3, r5
 80066b8:	dcf2      	bgt.n	80066a0 <_printf_i+0x1e8>
 80066ba:	e7eb      	b.n	8006694 <_printf_i+0x1dc>
 80066bc:	2500      	movs	r5, #0
 80066be:	f104 0919 	add.w	r9, r4, #25
 80066c2:	e7f5      	b.n	80066b0 <_printf_i+0x1f8>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1ac      	bne.n	8006622 <_printf_i+0x16a>
 80066c8:	7803      	ldrb	r3, [r0, #0]
 80066ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d2:	e76c      	b.n	80065ae <_printf_i+0xf6>
 80066d4:	08007959 	.word	0x08007959
 80066d8:	0800796a 	.word	0x0800796a

080066dc <_sbrk_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4c06      	ldr	r4, [pc, #24]	; (80066f8 <_sbrk_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4605      	mov	r5, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	f7fb fc72 	bl	8001fd0 <_sbrk>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_sbrk_r+0x1a>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_sbrk_r+0x1a>
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	200002b8 	.word	0x200002b8

080066fc <__sread>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	460c      	mov	r4, r1
 8006700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006704:	f000 f896 	bl	8006834 <_read_r>
 8006708:	2800      	cmp	r0, #0
 800670a:	bfab      	itete	ge
 800670c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800670e:	89a3      	ldrhlt	r3, [r4, #12]
 8006710:	181b      	addge	r3, r3, r0
 8006712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006716:	bfac      	ite	ge
 8006718:	6563      	strge	r3, [r4, #84]	; 0x54
 800671a:	81a3      	strhlt	r3, [r4, #12]
 800671c:	bd10      	pop	{r4, pc}

0800671e <__swrite>:
 800671e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006722:	461f      	mov	r7, r3
 8006724:	898b      	ldrh	r3, [r1, #12]
 8006726:	05db      	lsls	r3, r3, #23
 8006728:	4605      	mov	r5, r0
 800672a:	460c      	mov	r4, r1
 800672c:	4616      	mov	r6, r2
 800672e:	d505      	bpl.n	800673c <__swrite+0x1e>
 8006730:	2302      	movs	r3, #2
 8006732:	2200      	movs	r2, #0
 8006734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006738:	f000 f868 	bl	800680c <_lseek_r>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006746:	81a3      	strh	r3, [r4, #12]
 8006748:	4632      	mov	r2, r6
 800674a:	463b      	mov	r3, r7
 800674c:	4628      	mov	r0, r5
 800674e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006752:	f000 b817 	b.w	8006784 <_write_r>

08006756 <__sseek>:
 8006756:	b510      	push	{r4, lr}
 8006758:	460c      	mov	r4, r1
 800675a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675e:	f000 f855 	bl	800680c <_lseek_r>
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	bf15      	itete	ne
 8006768:	6560      	strne	r0, [r4, #84]	; 0x54
 800676a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800676e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006772:	81a3      	strheq	r3, [r4, #12]
 8006774:	bf18      	it	ne
 8006776:	81a3      	strhne	r3, [r4, #12]
 8006778:	bd10      	pop	{r4, pc}

0800677a <__sclose>:
 800677a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677e:	f000 b813 	b.w	80067a8 <_close_r>
	...

08006784 <_write_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4c07      	ldr	r4, [pc, #28]	; (80067a4 <_write_r+0x20>)
 8006788:	4605      	mov	r5, r0
 800678a:	4608      	mov	r0, r1
 800678c:	4611      	mov	r1, r2
 800678e:	2200      	movs	r2, #0
 8006790:	6022      	str	r2, [r4, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f7fb fbcb 	bl	8001f2e <_write>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_write_r+0x1e>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_write_r+0x1e>
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	200002b8 	.word	0x200002b8

080067a8 <_close_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4c06      	ldr	r4, [pc, #24]	; (80067c4 <_close_r+0x1c>)
 80067ac:	2300      	movs	r3, #0
 80067ae:	4605      	mov	r5, r0
 80067b0:	4608      	mov	r0, r1
 80067b2:	6023      	str	r3, [r4, #0]
 80067b4:	f7fb fbd7 	bl	8001f66 <_close>
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d102      	bne.n	80067c2 <_close_r+0x1a>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	b103      	cbz	r3, 80067c2 <_close_r+0x1a>
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	200002b8 	.word	0x200002b8

080067c8 <_fstat_r>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	4c07      	ldr	r4, [pc, #28]	; (80067e8 <_fstat_r+0x20>)
 80067cc:	2300      	movs	r3, #0
 80067ce:	4605      	mov	r5, r0
 80067d0:	4608      	mov	r0, r1
 80067d2:	4611      	mov	r1, r2
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	f7fb fbd2 	bl	8001f7e <_fstat>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	d102      	bne.n	80067e4 <_fstat_r+0x1c>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	b103      	cbz	r3, 80067e4 <_fstat_r+0x1c>
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	bd38      	pop	{r3, r4, r5, pc}
 80067e6:	bf00      	nop
 80067e8:	200002b8 	.word	0x200002b8

080067ec <_isatty_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4c06      	ldr	r4, [pc, #24]	; (8006808 <_isatty_r+0x1c>)
 80067f0:	2300      	movs	r3, #0
 80067f2:	4605      	mov	r5, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	f7fb fbd1 	bl	8001f9e <_isatty>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_isatty_r+0x1a>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	b103      	cbz	r3, 8006806 <_isatty_r+0x1a>
 8006804:	602b      	str	r3, [r5, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	200002b8 	.word	0x200002b8

0800680c <_lseek_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4c07      	ldr	r4, [pc, #28]	; (800682c <_lseek_r+0x20>)
 8006810:	4605      	mov	r5, r0
 8006812:	4608      	mov	r0, r1
 8006814:	4611      	mov	r1, r2
 8006816:	2200      	movs	r2, #0
 8006818:	6022      	str	r2, [r4, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f7fb fbca 	bl	8001fb4 <_lseek>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_lseek_r+0x1e>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	b103      	cbz	r3, 800682a <_lseek_r+0x1e>
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	200002b8 	.word	0x200002b8

08006830 <__malloc_lock>:
 8006830:	4770      	bx	lr

08006832 <__malloc_unlock>:
 8006832:	4770      	bx	lr

08006834 <_read_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4c07      	ldr	r4, [pc, #28]	; (8006854 <_read_r+0x20>)
 8006838:	4605      	mov	r5, r0
 800683a:	4608      	mov	r0, r1
 800683c:	4611      	mov	r1, r2
 800683e:	2200      	movs	r2, #0
 8006840:	6022      	str	r2, [r4, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f7fb fb56 	bl	8001ef4 <_read>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_read_r+0x1e>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	b103      	cbz	r3, 8006852 <_read_r+0x1e>
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	200002b8 	.word	0x200002b8

08006858 <sin>:
 8006858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800685a:	ec51 0b10 	vmov	r0, r1, d0
 800685e:	4a20      	ldr	r2, [pc, #128]	; (80068e0 <sin+0x88>)
 8006860:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006864:	4293      	cmp	r3, r2
 8006866:	dc07      	bgt.n	8006878 <sin+0x20>
 8006868:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80068d8 <sin+0x80>
 800686c:	2000      	movs	r0, #0
 800686e:	f000 fe37 	bl	80074e0 <__kernel_sin>
 8006872:	ec51 0b10 	vmov	r0, r1, d0
 8006876:	e007      	b.n	8006888 <sin+0x30>
 8006878:	4a1a      	ldr	r2, [pc, #104]	; (80068e4 <sin+0x8c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	dd09      	ble.n	8006892 <sin+0x3a>
 800687e:	ee10 2a10 	vmov	r2, s0
 8006882:	460b      	mov	r3, r1
 8006884:	f7f9 fd18 	bl	80002b8 <__aeabi_dsub>
 8006888:	ec41 0b10 	vmov	d0, r0, r1
 800688c:	b005      	add	sp, #20
 800688e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006892:	4668      	mov	r0, sp
 8006894:	f000 f828 	bl	80068e8 <__ieee754_rem_pio2>
 8006898:	f000 0003 	and.w	r0, r0, #3
 800689c:	2801      	cmp	r0, #1
 800689e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068a2:	ed9d 0b00 	vldr	d0, [sp]
 80068a6:	d004      	beq.n	80068b2 <sin+0x5a>
 80068a8:	2802      	cmp	r0, #2
 80068aa:	d005      	beq.n	80068b8 <sin+0x60>
 80068ac:	b970      	cbnz	r0, 80068cc <sin+0x74>
 80068ae:	2001      	movs	r0, #1
 80068b0:	e7dd      	b.n	800686e <sin+0x16>
 80068b2:	f000 fa0d 	bl	8006cd0 <__kernel_cos>
 80068b6:	e7dc      	b.n	8006872 <sin+0x1a>
 80068b8:	2001      	movs	r0, #1
 80068ba:	f000 fe11 	bl	80074e0 <__kernel_sin>
 80068be:	ec53 2b10 	vmov	r2, r3, d0
 80068c2:	ee10 0a10 	vmov	r0, s0
 80068c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80068ca:	e7dd      	b.n	8006888 <sin+0x30>
 80068cc:	f000 fa00 	bl	8006cd0 <__kernel_cos>
 80068d0:	e7f5      	b.n	80068be <sin+0x66>
 80068d2:	bf00      	nop
 80068d4:	f3af 8000 	nop.w
	...
 80068e0:	3fe921fb 	.word	0x3fe921fb
 80068e4:	7fefffff 	.word	0x7fefffff

080068e8 <__ieee754_rem_pio2>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	ec57 6b10 	vmov	r6, r7, d0
 80068f0:	4bc3      	ldr	r3, [pc, #780]	; (8006c00 <__ieee754_rem_pio2+0x318>)
 80068f2:	b08d      	sub	sp, #52	; 0x34
 80068f4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80068f8:	4598      	cmp	r8, r3
 80068fa:	4604      	mov	r4, r0
 80068fc:	9704      	str	r7, [sp, #16]
 80068fe:	dc07      	bgt.n	8006910 <__ieee754_rem_pio2+0x28>
 8006900:	2200      	movs	r2, #0
 8006902:	2300      	movs	r3, #0
 8006904:	ed84 0b00 	vstr	d0, [r4]
 8006908:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800690c:	2500      	movs	r5, #0
 800690e:	e027      	b.n	8006960 <__ieee754_rem_pio2+0x78>
 8006910:	4bbc      	ldr	r3, [pc, #752]	; (8006c04 <__ieee754_rem_pio2+0x31c>)
 8006912:	4598      	cmp	r8, r3
 8006914:	dc75      	bgt.n	8006a02 <__ieee754_rem_pio2+0x11a>
 8006916:	9b04      	ldr	r3, [sp, #16]
 8006918:	4dbb      	ldr	r5, [pc, #748]	; (8006c08 <__ieee754_rem_pio2+0x320>)
 800691a:	2b00      	cmp	r3, #0
 800691c:	ee10 0a10 	vmov	r0, s0
 8006920:	a3a9      	add	r3, pc, #676	; (adr r3, 8006bc8 <__ieee754_rem_pio2+0x2e0>)
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	4639      	mov	r1, r7
 8006928:	dd36      	ble.n	8006998 <__ieee754_rem_pio2+0xb0>
 800692a:	f7f9 fcc5 	bl	80002b8 <__aeabi_dsub>
 800692e:	45a8      	cmp	r8, r5
 8006930:	4606      	mov	r6, r0
 8006932:	460f      	mov	r7, r1
 8006934:	d018      	beq.n	8006968 <__ieee754_rem_pio2+0x80>
 8006936:	a3a6      	add	r3, pc, #664	; (adr r3, 8006bd0 <__ieee754_rem_pio2+0x2e8>)
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7f9 fcbc 	bl	80002b8 <__aeabi_dsub>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	e9c4 2300 	strd	r2, r3, [r4]
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	f7f9 fcb4 	bl	80002b8 <__aeabi_dsub>
 8006950:	a39f      	add	r3, pc, #636	; (adr r3, 8006bd0 <__ieee754_rem_pio2+0x2e8>)
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	f7f9 fcaf 	bl	80002b8 <__aeabi_dsub>
 800695a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800695e:	2501      	movs	r5, #1
 8006960:	4628      	mov	r0, r5
 8006962:	b00d      	add	sp, #52	; 0x34
 8006964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006968:	a39b      	add	r3, pc, #620	; (adr r3, 8006bd8 <__ieee754_rem_pio2+0x2f0>)
 800696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696e:	f7f9 fca3 	bl	80002b8 <__aeabi_dsub>
 8006972:	a39b      	add	r3, pc, #620	; (adr r3, 8006be0 <__ieee754_rem_pio2+0x2f8>)
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	4606      	mov	r6, r0
 800697a:	460f      	mov	r7, r1
 800697c:	f7f9 fc9c 	bl	80002b8 <__aeabi_dsub>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	e9c4 2300 	strd	r2, r3, [r4]
 8006988:	4630      	mov	r0, r6
 800698a:	4639      	mov	r1, r7
 800698c:	f7f9 fc94 	bl	80002b8 <__aeabi_dsub>
 8006990:	a393      	add	r3, pc, #588	; (adr r3, 8006be0 <__ieee754_rem_pio2+0x2f8>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	e7de      	b.n	8006956 <__ieee754_rem_pio2+0x6e>
 8006998:	f7f9 fc90 	bl	80002bc <__adddf3>
 800699c:	45a8      	cmp	r8, r5
 800699e:	4606      	mov	r6, r0
 80069a0:	460f      	mov	r7, r1
 80069a2:	d016      	beq.n	80069d2 <__ieee754_rem_pio2+0xea>
 80069a4:	a38a      	add	r3, pc, #552	; (adr r3, 8006bd0 <__ieee754_rem_pio2+0x2e8>)
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	f7f9 fc87 	bl	80002bc <__adddf3>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	e9c4 2300 	strd	r2, r3, [r4]
 80069b6:	4630      	mov	r0, r6
 80069b8:	4639      	mov	r1, r7
 80069ba:	f7f9 fc7d 	bl	80002b8 <__aeabi_dsub>
 80069be:	a384      	add	r3, pc, #528	; (adr r3, 8006bd0 <__ieee754_rem_pio2+0x2e8>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fc7a 	bl	80002bc <__adddf3>
 80069c8:	f04f 35ff 	mov.w	r5, #4294967295
 80069cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80069d0:	e7c6      	b.n	8006960 <__ieee754_rem_pio2+0x78>
 80069d2:	a381      	add	r3, pc, #516	; (adr r3, 8006bd8 <__ieee754_rem_pio2+0x2f0>)
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f7f9 fc70 	bl	80002bc <__adddf3>
 80069dc:	a380      	add	r3, pc, #512	; (adr r3, 8006be0 <__ieee754_rem_pio2+0x2f8>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	4606      	mov	r6, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	f7f9 fc69 	bl	80002bc <__adddf3>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	e9c4 2300 	strd	r2, r3, [r4]
 80069f2:	4630      	mov	r0, r6
 80069f4:	4639      	mov	r1, r7
 80069f6:	f7f9 fc5f 	bl	80002b8 <__aeabi_dsub>
 80069fa:	a379      	add	r3, pc, #484	; (adr r3, 8006be0 <__ieee754_rem_pio2+0x2f8>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	e7e0      	b.n	80069c4 <__ieee754_rem_pio2+0xdc>
 8006a02:	4b82      	ldr	r3, [pc, #520]	; (8006c0c <__ieee754_rem_pio2+0x324>)
 8006a04:	4598      	cmp	r8, r3
 8006a06:	f300 80d0 	bgt.w	8006baa <__ieee754_rem_pio2+0x2c2>
 8006a0a:	f000 fe23 	bl	8007654 <fabs>
 8006a0e:	ec57 6b10 	vmov	r6, r7, d0
 8006a12:	ee10 0a10 	vmov	r0, s0
 8006a16:	a374      	add	r3, pc, #464	; (adr r3, 8006be8 <__ieee754_rem_pio2+0x300>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	f7f9 fe03 	bl	8000628 <__aeabi_dmul>
 8006a22:	2200      	movs	r2, #0
 8006a24:	4b7a      	ldr	r3, [pc, #488]	; (8006c10 <__ieee754_rem_pio2+0x328>)
 8006a26:	f7f9 fc49 	bl	80002bc <__adddf3>
 8006a2a:	f7fa f897 	bl	8000b5c <__aeabi_d2iz>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	f7f9 fd90 	bl	8000554 <__aeabi_i2d>
 8006a34:	a364      	add	r3, pc, #400	; (adr r3, 8006bc8 <__ieee754_rem_pio2+0x2e0>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a3e:	f7f9 fdf3 	bl	8000628 <__aeabi_dmul>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4630      	mov	r0, r6
 8006a48:	4639      	mov	r1, r7
 8006a4a:	f7f9 fc35 	bl	80002b8 <__aeabi_dsub>
 8006a4e:	a360      	add	r3, pc, #384	; (adr r3, 8006bd0 <__ieee754_rem_pio2+0x2e8>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	4682      	mov	sl, r0
 8006a56:	468b      	mov	fp, r1
 8006a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a5c:	f7f9 fde4 	bl	8000628 <__aeabi_dmul>
 8006a60:	2d1f      	cmp	r5, #31
 8006a62:	4606      	mov	r6, r0
 8006a64:	460f      	mov	r7, r1
 8006a66:	dc0c      	bgt.n	8006a82 <__ieee754_rem_pio2+0x19a>
 8006a68:	1e6a      	subs	r2, r5, #1
 8006a6a:	4b6a      	ldr	r3, [pc, #424]	; (8006c14 <__ieee754_rem_pio2+0x32c>)
 8006a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a70:	4543      	cmp	r3, r8
 8006a72:	d006      	beq.n	8006a82 <__ieee754_rem_pio2+0x19a>
 8006a74:	4632      	mov	r2, r6
 8006a76:	463b      	mov	r3, r7
 8006a78:	4650      	mov	r0, sl
 8006a7a:	4659      	mov	r1, fp
 8006a7c:	f7f9 fc1c 	bl	80002b8 <__aeabi_dsub>
 8006a80:	e00e      	b.n	8006aa0 <__ieee754_rem_pio2+0x1b8>
 8006a82:	4632      	mov	r2, r6
 8006a84:	463b      	mov	r3, r7
 8006a86:	4650      	mov	r0, sl
 8006a88:	4659      	mov	r1, fp
 8006a8a:	f7f9 fc15 	bl	80002b8 <__aeabi_dsub>
 8006a8e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006a92:	9305      	str	r3, [sp, #20]
 8006a94:	9a05      	ldr	r2, [sp, #20]
 8006a96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b10      	cmp	r3, #16
 8006a9e:	dc02      	bgt.n	8006aa6 <__ieee754_rem_pio2+0x1be>
 8006aa0:	e9c4 0100 	strd	r0, r1, [r4]
 8006aa4:	e039      	b.n	8006b1a <__ieee754_rem_pio2+0x232>
 8006aa6:	a34c      	add	r3, pc, #304	; (adr r3, 8006bd8 <__ieee754_rem_pio2+0x2f0>)
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab0:	f7f9 fdba 	bl	8000628 <__aeabi_dmul>
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4650      	mov	r0, sl
 8006abe:	4659      	mov	r1, fp
 8006ac0:	f7f9 fbfa 	bl	80002b8 <__aeabi_dsub>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4680      	mov	r8, r0
 8006aca:	4689      	mov	r9, r1
 8006acc:	4650      	mov	r0, sl
 8006ace:	4659      	mov	r1, fp
 8006ad0:	f7f9 fbf2 	bl	80002b8 <__aeabi_dsub>
 8006ad4:	4632      	mov	r2, r6
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	f7f9 fbee 	bl	80002b8 <__aeabi_dsub>
 8006adc:	a340      	add	r3, pc, #256	; (adr r3, 8006be0 <__ieee754_rem_pio2+0x2f8>)
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aea:	f7f9 fd9d 	bl	8000628 <__aeabi_dmul>
 8006aee:	4632      	mov	r2, r6
 8006af0:	463b      	mov	r3, r7
 8006af2:	f7f9 fbe1 	bl	80002b8 <__aeabi_dsub>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4606      	mov	r6, r0
 8006afc:	460f      	mov	r7, r1
 8006afe:	4640      	mov	r0, r8
 8006b00:	4649      	mov	r1, r9
 8006b02:	f7f9 fbd9 	bl	80002b8 <__aeabi_dsub>
 8006b06:	9a05      	ldr	r2, [sp, #20]
 8006b08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b31      	cmp	r3, #49	; 0x31
 8006b10:	dc20      	bgt.n	8006b54 <__ieee754_rem_pio2+0x26c>
 8006b12:	e9c4 0100 	strd	r0, r1, [r4]
 8006b16:	46c2      	mov	sl, r8
 8006b18:	46cb      	mov	fp, r9
 8006b1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006b1e:	4650      	mov	r0, sl
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	4659      	mov	r1, fp
 8006b26:	f7f9 fbc7 	bl	80002b8 <__aeabi_dsub>
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	4632      	mov	r2, r6
 8006b2e:	f7f9 fbc3 	bl	80002b8 <__aeabi_dsub>
 8006b32:	9b04      	ldr	r3, [sp, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006b3a:	f6bf af11 	bge.w	8006960 <__ieee754_rem_pio2+0x78>
 8006b3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006b42:	6063      	str	r3, [r4, #4]
 8006b44:	f8c4 8000 	str.w	r8, [r4]
 8006b48:	60a0      	str	r0, [r4, #8]
 8006b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b4e:	60e3      	str	r3, [r4, #12]
 8006b50:	426d      	negs	r5, r5
 8006b52:	e705      	b.n	8006960 <__ieee754_rem_pio2+0x78>
 8006b54:	a326      	add	r3, pc, #152	; (adr r3, 8006bf0 <__ieee754_rem_pio2+0x308>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5e:	f7f9 fd63 	bl	8000628 <__aeabi_dmul>
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	f7f9 fba3 	bl	80002b8 <__aeabi_dsub>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4682      	mov	sl, r0
 8006b78:	468b      	mov	fp, r1
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	f7f9 fb9b 	bl	80002b8 <__aeabi_dsub>
 8006b82:	4632      	mov	r2, r6
 8006b84:	463b      	mov	r3, r7
 8006b86:	f7f9 fb97 	bl	80002b8 <__aeabi_dsub>
 8006b8a:	a31b      	add	r3, pc, #108	; (adr r3, 8006bf8 <__ieee754_rem_pio2+0x310>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	4606      	mov	r6, r0
 8006b92:	460f      	mov	r7, r1
 8006b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b98:	f7f9 fd46 	bl	8000628 <__aeabi_dmul>
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	f7f9 fb8a 	bl	80002b8 <__aeabi_dsub>
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	e764      	b.n	8006a74 <__ieee754_rem_pio2+0x18c>
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <__ieee754_rem_pio2+0x330>)
 8006bac:	4598      	cmp	r8, r3
 8006bae:	dd35      	ble.n	8006c1c <__ieee754_rem_pio2+0x334>
 8006bb0:	ee10 2a10 	vmov	r2, s0
 8006bb4:	463b      	mov	r3, r7
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7f9 fb7d 	bl	80002b8 <__aeabi_dsub>
 8006bbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006bc2:	e9c4 0100 	strd	r0, r1, [r4]
 8006bc6:	e6a1      	b.n	800690c <__ieee754_rem_pio2+0x24>
 8006bc8:	54400000 	.word	0x54400000
 8006bcc:	3ff921fb 	.word	0x3ff921fb
 8006bd0:	1a626331 	.word	0x1a626331
 8006bd4:	3dd0b461 	.word	0x3dd0b461
 8006bd8:	1a600000 	.word	0x1a600000
 8006bdc:	3dd0b461 	.word	0x3dd0b461
 8006be0:	2e037073 	.word	0x2e037073
 8006be4:	3ba3198a 	.word	0x3ba3198a
 8006be8:	6dc9c883 	.word	0x6dc9c883
 8006bec:	3fe45f30 	.word	0x3fe45f30
 8006bf0:	2e000000 	.word	0x2e000000
 8006bf4:	3ba3198a 	.word	0x3ba3198a
 8006bf8:	252049c1 	.word	0x252049c1
 8006bfc:	397b839a 	.word	0x397b839a
 8006c00:	3fe921fb 	.word	0x3fe921fb
 8006c04:	4002d97b 	.word	0x4002d97b
 8006c08:	3ff921fb 	.word	0x3ff921fb
 8006c0c:	413921fb 	.word	0x413921fb
 8006c10:	3fe00000 	.word	0x3fe00000
 8006c14:	0800797c 	.word	0x0800797c
 8006c18:	7fefffff 	.word	0x7fefffff
 8006c1c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006c20:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006c24:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006c28:	4630      	mov	r0, r6
 8006c2a:	460f      	mov	r7, r1
 8006c2c:	f7f9 ff96 	bl	8000b5c <__aeabi_d2iz>
 8006c30:	f7f9 fc90 	bl	8000554 <__aeabi_i2d>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c40:	f7f9 fb3a 	bl	80002b8 <__aeabi_dsub>
 8006c44:	2200      	movs	r2, #0
 8006c46:	4b1f      	ldr	r3, [pc, #124]	; (8006cc4 <__ieee754_rem_pio2+0x3dc>)
 8006c48:	f7f9 fcee 	bl	8000628 <__aeabi_dmul>
 8006c4c:	460f      	mov	r7, r1
 8006c4e:	4606      	mov	r6, r0
 8006c50:	f7f9 ff84 	bl	8000b5c <__aeabi_d2iz>
 8006c54:	f7f9 fc7e 	bl	8000554 <__aeabi_i2d>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	4639      	mov	r1, r7
 8006c60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c64:	f7f9 fb28 	bl	80002b8 <__aeabi_dsub>
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <__ieee754_rem_pio2+0x3dc>)
 8006c6c:	f7f9 fcdc 	bl	8000628 <__aeabi_dmul>
 8006c70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c74:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006c78:	f04f 0803 	mov.w	r8, #3
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	2700      	movs	r7, #0
 8006c80:	4632      	mov	r2, r6
 8006c82:	463b      	mov	r3, r7
 8006c84:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8006c8c:	f7f9 ff34 	bl	8000af8 <__aeabi_dcmpeq>
 8006c90:	b9b0      	cbnz	r0, 8006cc0 <__ieee754_rem_pio2+0x3d8>
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <__ieee754_rem_pio2+0x3e0>)
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	2302      	movs	r3, #2
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	4643      	mov	r3, r8
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	a806      	add	r0, sp, #24
 8006ca2:	f000 f8dd 	bl	8006e60 <__kernel_rem_pio2>
 8006ca6:	9b04      	ldr	r3, [sp, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	4605      	mov	r5, r0
 8006cac:	f6bf ae58 	bge.w	8006960 <__ieee754_rem_pio2+0x78>
 8006cb0:	6863      	ldr	r3, [r4, #4]
 8006cb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006cb6:	6063      	str	r3, [r4, #4]
 8006cb8:	68e3      	ldr	r3, [r4, #12]
 8006cba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006cbe:	e746      	b.n	8006b4e <__ieee754_rem_pio2+0x266>
 8006cc0:	46d0      	mov	r8, sl
 8006cc2:	e7dd      	b.n	8006c80 <__ieee754_rem_pio2+0x398>
 8006cc4:	41700000 	.word	0x41700000
 8006cc8:	080079fc 	.word	0x080079fc
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <__kernel_cos>:
 8006cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	ec59 8b10 	vmov	r8, r9, d0
 8006cd8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006cdc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006ce0:	ed2d 8b02 	vpush	{d8}
 8006ce4:	eeb0 8a41 	vmov.f32	s16, s2
 8006ce8:	eef0 8a61 	vmov.f32	s17, s3
 8006cec:	da07      	bge.n	8006cfe <__kernel_cos+0x2e>
 8006cee:	ee10 0a10 	vmov	r0, s0
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	f7f9 ff32 	bl	8000b5c <__aeabi_d2iz>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f000 8089 	beq.w	8006e10 <__kernel_cos+0x140>
 8006cfe:	4642      	mov	r2, r8
 8006d00:	464b      	mov	r3, r9
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	f7f9 fc8f 	bl	8000628 <__aeabi_dmul>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4b4e      	ldr	r3, [pc, #312]	; (8006e48 <__kernel_cos+0x178>)
 8006d0e:	4604      	mov	r4, r0
 8006d10:	460d      	mov	r5, r1
 8006d12:	f7f9 fc89 	bl	8000628 <__aeabi_dmul>
 8006d16:	a340      	add	r3, pc, #256	; (adr r3, 8006e18 <__kernel_cos+0x148>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	468b      	mov	fp, r1
 8006d20:	4620      	mov	r0, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	f7f9 fc80 	bl	8000628 <__aeabi_dmul>
 8006d28:	a33d      	add	r3, pc, #244	; (adr r3, 8006e20 <__kernel_cos+0x150>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 fac5 	bl	80002bc <__adddf3>
 8006d32:	4622      	mov	r2, r4
 8006d34:	462b      	mov	r3, r5
 8006d36:	f7f9 fc77 	bl	8000628 <__aeabi_dmul>
 8006d3a:	a33b      	add	r3, pc, #236	; (adr r3, 8006e28 <__kernel_cos+0x158>)
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f7f9 faba 	bl	80002b8 <__aeabi_dsub>
 8006d44:	4622      	mov	r2, r4
 8006d46:	462b      	mov	r3, r5
 8006d48:	f7f9 fc6e 	bl	8000628 <__aeabi_dmul>
 8006d4c:	a338      	add	r3, pc, #224	; (adr r3, 8006e30 <__kernel_cos+0x160>)
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	f7f9 fab3 	bl	80002bc <__adddf3>
 8006d56:	4622      	mov	r2, r4
 8006d58:	462b      	mov	r3, r5
 8006d5a:	f7f9 fc65 	bl	8000628 <__aeabi_dmul>
 8006d5e:	a336      	add	r3, pc, #216	; (adr r3, 8006e38 <__kernel_cos+0x168>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f7f9 faa8 	bl	80002b8 <__aeabi_dsub>
 8006d68:	4622      	mov	r2, r4
 8006d6a:	462b      	mov	r3, r5
 8006d6c:	f7f9 fc5c 	bl	8000628 <__aeabi_dmul>
 8006d70:	a333      	add	r3, pc, #204	; (adr r3, 8006e40 <__kernel_cos+0x170>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f7f9 faa1 	bl	80002bc <__adddf3>
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	f7f9 fc53 	bl	8000628 <__aeabi_dmul>
 8006d82:	4622      	mov	r2, r4
 8006d84:	462b      	mov	r3, r5
 8006d86:	f7f9 fc4f 	bl	8000628 <__aeabi_dmul>
 8006d8a:	ec53 2b18 	vmov	r2, r3, d8
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	4640      	mov	r0, r8
 8006d94:	4649      	mov	r1, r9
 8006d96:	f7f9 fc47 	bl	8000628 <__aeabi_dmul>
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4620      	mov	r0, r4
 8006da2:	f7f9 fa89 	bl	80002b8 <__aeabi_dsub>
 8006da6:	4b29      	ldr	r3, [pc, #164]	; (8006e4c <__kernel_cos+0x17c>)
 8006da8:	429e      	cmp	r6, r3
 8006daa:	4680      	mov	r8, r0
 8006dac:	4689      	mov	r9, r1
 8006dae:	dc11      	bgt.n	8006dd4 <__kernel_cos+0x104>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4650      	mov	r0, sl
 8006db6:	4659      	mov	r1, fp
 8006db8:	f7f9 fa7e 	bl	80002b8 <__aeabi_dsub>
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4924      	ldr	r1, [pc, #144]	; (8006e50 <__kernel_cos+0x180>)
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f7f9 fa78 	bl	80002b8 <__aeabi_dsub>
 8006dc8:	ecbd 8b02 	vpop	{d8}
 8006dcc:	ec41 0b10 	vmov	d0, r0, r1
 8006dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd4:	4b1f      	ldr	r3, [pc, #124]	; (8006e54 <__kernel_cos+0x184>)
 8006dd6:	491e      	ldr	r1, [pc, #120]	; (8006e50 <__kernel_cos+0x180>)
 8006dd8:	429e      	cmp	r6, r3
 8006dda:	bfcc      	ite	gt
 8006ddc:	4d1e      	ldrgt	r5, [pc, #120]	; (8006e58 <__kernel_cos+0x188>)
 8006dde:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006de2:	2400      	movs	r4, #0
 8006de4:	4622      	mov	r2, r4
 8006de6:	462b      	mov	r3, r5
 8006de8:	2000      	movs	r0, #0
 8006dea:	f7f9 fa65 	bl	80002b8 <__aeabi_dsub>
 8006dee:	4622      	mov	r2, r4
 8006df0:	4606      	mov	r6, r0
 8006df2:	460f      	mov	r7, r1
 8006df4:	462b      	mov	r3, r5
 8006df6:	4650      	mov	r0, sl
 8006df8:	4659      	mov	r1, fp
 8006dfa:	f7f9 fa5d 	bl	80002b8 <__aeabi_dsub>
 8006dfe:	4642      	mov	r2, r8
 8006e00:	464b      	mov	r3, r9
 8006e02:	f7f9 fa59 	bl	80002b8 <__aeabi_dsub>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	e7d9      	b.n	8006dc4 <__kernel_cos+0xf4>
 8006e10:	2000      	movs	r0, #0
 8006e12:	490f      	ldr	r1, [pc, #60]	; (8006e50 <__kernel_cos+0x180>)
 8006e14:	e7d8      	b.n	8006dc8 <__kernel_cos+0xf8>
 8006e16:	bf00      	nop
 8006e18:	be8838d4 	.word	0xbe8838d4
 8006e1c:	bda8fae9 	.word	0xbda8fae9
 8006e20:	bdb4b1c4 	.word	0xbdb4b1c4
 8006e24:	3e21ee9e 	.word	0x3e21ee9e
 8006e28:	809c52ad 	.word	0x809c52ad
 8006e2c:	3e927e4f 	.word	0x3e927e4f
 8006e30:	19cb1590 	.word	0x19cb1590
 8006e34:	3efa01a0 	.word	0x3efa01a0
 8006e38:	16c15177 	.word	0x16c15177
 8006e3c:	3f56c16c 	.word	0x3f56c16c
 8006e40:	5555554c 	.word	0x5555554c
 8006e44:	3fa55555 	.word	0x3fa55555
 8006e48:	3fe00000 	.word	0x3fe00000
 8006e4c:	3fd33332 	.word	0x3fd33332
 8006e50:	3ff00000 	.word	0x3ff00000
 8006e54:	3fe90000 	.word	0x3fe90000
 8006e58:	3fd20000 	.word	0x3fd20000
 8006e5c:	00000000 	.word	0x00000000

08006e60 <__kernel_rem_pio2>:
 8006e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e64:	ed2d 8b02 	vpush	{d8}
 8006e68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006e6c:	1ed4      	subs	r4, r2, #3
 8006e6e:	9308      	str	r3, [sp, #32]
 8006e70:	9101      	str	r1, [sp, #4]
 8006e72:	4bc5      	ldr	r3, [pc, #788]	; (8007188 <__kernel_rem_pio2+0x328>)
 8006e74:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006e76:	9009      	str	r0, [sp, #36]	; 0x24
 8006e78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	9b08      	ldr	r3, [sp, #32]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	9307      	str	r3, [sp, #28]
 8006e84:	2318      	movs	r3, #24
 8006e86:	fb94 f4f3 	sdiv	r4, r4, r3
 8006e8a:	f06f 0317 	mvn.w	r3, #23
 8006e8e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006e92:	fb04 3303 	mla	r3, r4, r3, r3
 8006e96:	eb03 0a02 	add.w	sl, r3, r2
 8006e9a:	9b04      	ldr	r3, [sp, #16]
 8006e9c:	9a07      	ldr	r2, [sp, #28]
 8006e9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007178 <__kernel_rem_pio2+0x318>
 8006ea2:	eb03 0802 	add.w	r8, r3, r2
 8006ea6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006ea8:	1aa7      	subs	r7, r4, r2
 8006eaa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006eae:	ae22      	add	r6, sp, #136	; 0x88
 8006eb0:	2500      	movs	r5, #0
 8006eb2:	4545      	cmp	r5, r8
 8006eb4:	dd13      	ble.n	8006ede <__kernel_rem_pio2+0x7e>
 8006eb6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007178 <__kernel_rem_pio2+0x318>
 8006eba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	9b04      	ldr	r3, [sp, #16]
 8006ec2:	429e      	cmp	r6, r3
 8006ec4:	dc32      	bgt.n	8006f2c <__kernel_rem_pio2+0xcc>
 8006ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec8:	9302      	str	r3, [sp, #8]
 8006eca:	9b08      	ldr	r3, [sp, #32]
 8006ecc:	199d      	adds	r5, r3, r6
 8006ece:	ab22      	add	r3, sp, #136	; 0x88
 8006ed0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006ed4:	9306      	str	r3, [sp, #24]
 8006ed6:	ec59 8b18 	vmov	r8, r9, d8
 8006eda:	2700      	movs	r7, #0
 8006edc:	e01f      	b.n	8006f1e <__kernel_rem_pio2+0xbe>
 8006ede:	42ef      	cmn	r7, r5
 8006ee0:	d407      	bmi.n	8006ef2 <__kernel_rem_pio2+0x92>
 8006ee2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006ee6:	f7f9 fb35 	bl	8000554 <__aeabi_i2d>
 8006eea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006eee:	3501      	adds	r5, #1
 8006ef0:	e7df      	b.n	8006eb2 <__kernel_rem_pio2+0x52>
 8006ef2:	ec51 0b18 	vmov	r0, r1, d8
 8006ef6:	e7f8      	b.n	8006eea <__kernel_rem_pio2+0x8a>
 8006ef8:	9906      	ldr	r1, [sp, #24]
 8006efa:	9d02      	ldr	r5, [sp, #8]
 8006efc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006f00:	9106      	str	r1, [sp, #24]
 8006f02:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006f06:	9502      	str	r5, [sp, #8]
 8006f08:	f7f9 fb8e 	bl	8000628 <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4640      	mov	r0, r8
 8006f12:	4649      	mov	r1, r9
 8006f14:	f7f9 f9d2 	bl	80002bc <__adddf3>
 8006f18:	3701      	adds	r7, #1
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	4689      	mov	r9, r1
 8006f1e:	9b07      	ldr	r3, [sp, #28]
 8006f20:	429f      	cmp	r7, r3
 8006f22:	dde9      	ble.n	8006ef8 <__kernel_rem_pio2+0x98>
 8006f24:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006f28:	3601      	adds	r6, #1
 8006f2a:	e7c9      	b.n	8006ec0 <__kernel_rem_pio2+0x60>
 8006f2c:	9b04      	ldr	r3, [sp, #16]
 8006f2e:	aa0e      	add	r2, sp, #56	; 0x38
 8006f30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f34:	930c      	str	r3, [sp, #48]	; 0x30
 8006f36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006f38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006f3c:	9c04      	ldr	r4, [sp, #16]
 8006f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f40:	ab9a      	add	r3, sp, #616	; 0x268
 8006f42:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006f46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f4e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006f52:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006f56:	ab9a      	add	r3, sp, #616	; 0x268
 8006f58:	445b      	add	r3, fp
 8006f5a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006f5e:	2500      	movs	r5, #0
 8006f60:	1b63      	subs	r3, r4, r5
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dc78      	bgt.n	8007058 <__kernel_rem_pio2+0x1f8>
 8006f66:	4650      	mov	r0, sl
 8006f68:	ec49 8b10 	vmov	d0, r8, r9
 8006f6c:	f000 fc00 	bl	8007770 <scalbn>
 8006f70:	ec57 6b10 	vmov	r6, r7, d0
 8006f74:	2200      	movs	r2, #0
 8006f76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006f7a:	ee10 0a10 	vmov	r0, s0
 8006f7e:	4639      	mov	r1, r7
 8006f80:	f7f9 fb52 	bl	8000628 <__aeabi_dmul>
 8006f84:	ec41 0b10 	vmov	d0, r0, r1
 8006f88:	f000 fb6e 	bl	8007668 <floor>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	ec51 0b10 	vmov	r0, r1, d0
 8006f92:	4b7e      	ldr	r3, [pc, #504]	; (800718c <__kernel_rem_pio2+0x32c>)
 8006f94:	f7f9 fb48 	bl	8000628 <__aeabi_dmul>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7f9 f98a 	bl	80002b8 <__aeabi_dsub>
 8006fa4:	460f      	mov	r7, r1
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	f7f9 fdd8 	bl	8000b5c <__aeabi_d2iz>
 8006fac:	9006      	str	r0, [sp, #24]
 8006fae:	f7f9 fad1 	bl	8000554 <__aeabi_i2d>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	4639      	mov	r1, r7
 8006fba:	f7f9 f97d 	bl	80002b8 <__aeabi_dsub>
 8006fbe:	f1ba 0f00 	cmp.w	sl, #0
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	460f      	mov	r7, r1
 8006fc6:	dd6c      	ble.n	80070a2 <__kernel_rem_pio2+0x242>
 8006fc8:	1e62      	subs	r2, r4, #1
 8006fca:	ab0e      	add	r3, sp, #56	; 0x38
 8006fcc:	f1ca 0118 	rsb	r1, sl, #24
 8006fd0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006fd4:	9d06      	ldr	r5, [sp, #24]
 8006fd6:	fa40 f301 	asr.w	r3, r0, r1
 8006fda:	441d      	add	r5, r3
 8006fdc:	408b      	lsls	r3, r1
 8006fde:	1ac0      	subs	r0, r0, r3
 8006fe0:	ab0e      	add	r3, sp, #56	; 0x38
 8006fe2:	9506      	str	r5, [sp, #24]
 8006fe4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006fe8:	f1ca 0317 	rsb	r3, sl, #23
 8006fec:	fa40 f303 	asr.w	r3, r0, r3
 8006ff0:	9302      	str	r3, [sp, #8]
 8006ff2:	9b02      	ldr	r3, [sp, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd62      	ble.n	80070be <__kernel_rem_pio2+0x25e>
 8006ff8:	9b06      	ldr	r3, [sp, #24]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	9306      	str	r3, [sp, #24]
 8007000:	4615      	mov	r5, r2
 8007002:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007006:	4294      	cmp	r4, r2
 8007008:	f300 8095 	bgt.w	8007136 <__kernel_rem_pio2+0x2d6>
 800700c:	f1ba 0f00 	cmp.w	sl, #0
 8007010:	dd07      	ble.n	8007022 <__kernel_rem_pio2+0x1c2>
 8007012:	f1ba 0f01 	cmp.w	sl, #1
 8007016:	f000 80a2 	beq.w	800715e <__kernel_rem_pio2+0x2fe>
 800701a:	f1ba 0f02 	cmp.w	sl, #2
 800701e:	f000 80c1 	beq.w	80071a4 <__kernel_rem_pio2+0x344>
 8007022:	9b02      	ldr	r3, [sp, #8]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d14a      	bne.n	80070be <__kernel_rem_pio2+0x25e>
 8007028:	4632      	mov	r2, r6
 800702a:	463b      	mov	r3, r7
 800702c:	2000      	movs	r0, #0
 800702e:	4958      	ldr	r1, [pc, #352]	; (8007190 <__kernel_rem_pio2+0x330>)
 8007030:	f7f9 f942 	bl	80002b8 <__aeabi_dsub>
 8007034:	4606      	mov	r6, r0
 8007036:	460f      	mov	r7, r1
 8007038:	2d00      	cmp	r5, #0
 800703a:	d040      	beq.n	80070be <__kernel_rem_pio2+0x25e>
 800703c:	4650      	mov	r0, sl
 800703e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007180 <__kernel_rem_pio2+0x320>
 8007042:	f000 fb95 	bl	8007770 <scalbn>
 8007046:	4630      	mov	r0, r6
 8007048:	4639      	mov	r1, r7
 800704a:	ec53 2b10 	vmov	r2, r3, d0
 800704e:	f7f9 f933 	bl	80002b8 <__aeabi_dsub>
 8007052:	4606      	mov	r6, r0
 8007054:	460f      	mov	r7, r1
 8007056:	e032      	b.n	80070be <__kernel_rem_pio2+0x25e>
 8007058:	2200      	movs	r2, #0
 800705a:	4b4e      	ldr	r3, [pc, #312]	; (8007194 <__kernel_rem_pio2+0x334>)
 800705c:	4640      	mov	r0, r8
 800705e:	4649      	mov	r1, r9
 8007060:	f7f9 fae2 	bl	8000628 <__aeabi_dmul>
 8007064:	f7f9 fd7a 	bl	8000b5c <__aeabi_d2iz>
 8007068:	f7f9 fa74 	bl	8000554 <__aeabi_i2d>
 800706c:	2200      	movs	r2, #0
 800706e:	4b4a      	ldr	r3, [pc, #296]	; (8007198 <__kernel_rem_pio2+0x338>)
 8007070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007074:	f7f9 fad8 	bl	8000628 <__aeabi_dmul>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4640      	mov	r0, r8
 800707e:	4649      	mov	r1, r9
 8007080:	f7f9 f91a 	bl	80002b8 <__aeabi_dsub>
 8007084:	f7f9 fd6a 	bl	8000b5c <__aeabi_d2iz>
 8007088:	ab0e      	add	r3, sp, #56	; 0x38
 800708a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800708e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007096:	f7f9 f911 	bl	80002bc <__adddf3>
 800709a:	3501      	adds	r5, #1
 800709c:	4680      	mov	r8, r0
 800709e:	4689      	mov	r9, r1
 80070a0:	e75e      	b.n	8006f60 <__kernel_rem_pio2+0x100>
 80070a2:	d105      	bne.n	80070b0 <__kernel_rem_pio2+0x250>
 80070a4:	1e63      	subs	r3, r4, #1
 80070a6:	aa0e      	add	r2, sp, #56	; 0x38
 80070a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80070ac:	15c3      	asrs	r3, r0, #23
 80070ae:	e79f      	b.n	8006ff0 <__kernel_rem_pio2+0x190>
 80070b0:	2200      	movs	r2, #0
 80070b2:	4b3a      	ldr	r3, [pc, #232]	; (800719c <__kernel_rem_pio2+0x33c>)
 80070b4:	f7f9 fd3e 	bl	8000b34 <__aeabi_dcmpge>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d139      	bne.n	8007130 <__kernel_rem_pio2+0x2d0>
 80070bc:	9002      	str	r0, [sp, #8]
 80070be:	2200      	movs	r2, #0
 80070c0:	2300      	movs	r3, #0
 80070c2:	4630      	mov	r0, r6
 80070c4:	4639      	mov	r1, r7
 80070c6:	f7f9 fd17 	bl	8000af8 <__aeabi_dcmpeq>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f000 80c7 	beq.w	800725e <__kernel_rem_pio2+0x3fe>
 80070d0:	1e65      	subs	r5, r4, #1
 80070d2:	462b      	mov	r3, r5
 80070d4:	2200      	movs	r2, #0
 80070d6:	9904      	ldr	r1, [sp, #16]
 80070d8:	428b      	cmp	r3, r1
 80070da:	da6a      	bge.n	80071b2 <__kernel_rem_pio2+0x352>
 80070dc:	2a00      	cmp	r2, #0
 80070de:	f000 8088 	beq.w	80071f2 <__kernel_rem_pio2+0x392>
 80070e2:	ab0e      	add	r3, sp, #56	; 0x38
 80070e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80070e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 80b4 	beq.w	800725a <__kernel_rem_pio2+0x3fa>
 80070f2:	4650      	mov	r0, sl
 80070f4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007180 <__kernel_rem_pio2+0x320>
 80070f8:	f000 fb3a 	bl	8007770 <scalbn>
 80070fc:	00ec      	lsls	r4, r5, #3
 80070fe:	ab72      	add	r3, sp, #456	; 0x1c8
 8007100:	191e      	adds	r6, r3, r4
 8007102:	ec59 8b10 	vmov	r8, r9, d0
 8007106:	f106 0a08 	add.w	sl, r6, #8
 800710a:	462f      	mov	r7, r5
 800710c:	2f00      	cmp	r7, #0
 800710e:	f280 80df 	bge.w	80072d0 <__kernel_rem_pio2+0x470>
 8007112:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007178 <__kernel_rem_pio2+0x318>
 8007116:	f04f 0a00 	mov.w	sl, #0
 800711a:	eba5 030a 	sub.w	r3, r5, sl
 800711e:	2b00      	cmp	r3, #0
 8007120:	f2c0 810a 	blt.w	8007338 <__kernel_rem_pio2+0x4d8>
 8007124:	f8df b078 	ldr.w	fp, [pc, #120]	; 80071a0 <__kernel_rem_pio2+0x340>
 8007128:	ec59 8b18 	vmov	r8, r9, d8
 800712c:	2700      	movs	r7, #0
 800712e:	e0f5      	b.n	800731c <__kernel_rem_pio2+0x4bc>
 8007130:	2302      	movs	r3, #2
 8007132:	9302      	str	r3, [sp, #8]
 8007134:	e760      	b.n	8006ff8 <__kernel_rem_pio2+0x198>
 8007136:	ab0e      	add	r3, sp, #56	; 0x38
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	b94d      	cbnz	r5, 8007152 <__kernel_rem_pio2+0x2f2>
 800713e:	b12b      	cbz	r3, 800714c <__kernel_rem_pio2+0x2ec>
 8007140:	a80e      	add	r0, sp, #56	; 0x38
 8007142:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007146:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800714a:	2301      	movs	r3, #1
 800714c:	3201      	adds	r2, #1
 800714e:	461d      	mov	r5, r3
 8007150:	e759      	b.n	8007006 <__kernel_rem_pio2+0x1a6>
 8007152:	a80e      	add	r0, sp, #56	; 0x38
 8007154:	1acb      	subs	r3, r1, r3
 8007156:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800715a:	462b      	mov	r3, r5
 800715c:	e7f6      	b.n	800714c <__kernel_rem_pio2+0x2ec>
 800715e:	1e62      	subs	r2, r4, #1
 8007160:	ab0e      	add	r3, sp, #56	; 0x38
 8007162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007166:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800716a:	a90e      	add	r1, sp, #56	; 0x38
 800716c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007170:	e757      	b.n	8007022 <__kernel_rem_pio2+0x1c2>
 8007172:	bf00      	nop
 8007174:	f3af 8000 	nop.w
	...
 8007184:	3ff00000 	.word	0x3ff00000
 8007188:	08007b48 	.word	0x08007b48
 800718c:	40200000 	.word	0x40200000
 8007190:	3ff00000 	.word	0x3ff00000
 8007194:	3e700000 	.word	0x3e700000
 8007198:	41700000 	.word	0x41700000
 800719c:	3fe00000 	.word	0x3fe00000
 80071a0:	08007b08 	.word	0x08007b08
 80071a4:	1e62      	subs	r2, r4, #1
 80071a6:	ab0e      	add	r3, sp, #56	; 0x38
 80071a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80071b0:	e7db      	b.n	800716a <__kernel_rem_pio2+0x30a>
 80071b2:	a90e      	add	r1, sp, #56	; 0x38
 80071b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	430a      	orrs	r2, r1
 80071bc:	e78b      	b.n	80070d6 <__kernel_rem_pio2+0x276>
 80071be:	3301      	adds	r3, #1
 80071c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d0fa      	beq.n	80071be <__kernel_rem_pio2+0x35e>
 80071c8:	9a08      	ldr	r2, [sp, #32]
 80071ca:	4422      	add	r2, r4
 80071cc:	00d2      	lsls	r2, r2, #3
 80071ce:	a922      	add	r1, sp, #136	; 0x88
 80071d0:	18e3      	adds	r3, r4, r3
 80071d2:	9206      	str	r2, [sp, #24]
 80071d4:	440a      	add	r2, r1
 80071d6:	9302      	str	r3, [sp, #8]
 80071d8:	f10b 0108 	add.w	r1, fp, #8
 80071dc:	f102 0308 	add.w	r3, r2, #8
 80071e0:	1c66      	adds	r6, r4, #1
 80071e2:	910a      	str	r1, [sp, #40]	; 0x28
 80071e4:	2500      	movs	r5, #0
 80071e6:	930d      	str	r3, [sp, #52]	; 0x34
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	42b3      	cmp	r3, r6
 80071ec:	da04      	bge.n	80071f8 <__kernel_rem_pio2+0x398>
 80071ee:	461c      	mov	r4, r3
 80071f0:	e6a6      	b.n	8006f40 <__kernel_rem_pio2+0xe0>
 80071f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071f4:	2301      	movs	r3, #1
 80071f6:	e7e3      	b.n	80071c0 <__kernel_rem_pio2+0x360>
 80071f8:	9b06      	ldr	r3, [sp, #24]
 80071fa:	18ef      	adds	r7, r5, r3
 80071fc:	ab22      	add	r3, sp, #136	; 0x88
 80071fe:	441f      	add	r7, r3
 8007200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007202:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007206:	f7f9 f9a5 	bl	8000554 <__aeabi_i2d>
 800720a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720c:	461c      	mov	r4, r3
 800720e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007210:	e9c7 0100 	strd	r0, r1, [r7]
 8007214:	eb03 0b05 	add.w	fp, r3, r5
 8007218:	2700      	movs	r7, #0
 800721a:	f04f 0800 	mov.w	r8, #0
 800721e:	f04f 0900 	mov.w	r9, #0
 8007222:	9b07      	ldr	r3, [sp, #28]
 8007224:	429f      	cmp	r7, r3
 8007226:	dd08      	ble.n	800723a <__kernel_rem_pio2+0x3da>
 8007228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722a:	aa72      	add	r2, sp, #456	; 0x1c8
 800722c:	18eb      	adds	r3, r5, r3
 800722e:	4413      	add	r3, r2
 8007230:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007234:	3601      	adds	r6, #1
 8007236:	3508      	adds	r5, #8
 8007238:	e7d6      	b.n	80071e8 <__kernel_rem_pio2+0x388>
 800723a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800723e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007242:	f7f9 f9f1 	bl	8000628 <__aeabi_dmul>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4640      	mov	r0, r8
 800724c:	4649      	mov	r1, r9
 800724e:	f7f9 f835 	bl	80002bc <__adddf3>
 8007252:	3701      	adds	r7, #1
 8007254:	4680      	mov	r8, r0
 8007256:	4689      	mov	r9, r1
 8007258:	e7e3      	b.n	8007222 <__kernel_rem_pio2+0x3c2>
 800725a:	3d01      	subs	r5, #1
 800725c:	e741      	b.n	80070e2 <__kernel_rem_pio2+0x282>
 800725e:	f1ca 0000 	rsb	r0, sl, #0
 8007262:	ec47 6b10 	vmov	d0, r6, r7
 8007266:	f000 fa83 	bl	8007770 <scalbn>
 800726a:	ec57 6b10 	vmov	r6, r7, d0
 800726e:	2200      	movs	r2, #0
 8007270:	4b99      	ldr	r3, [pc, #612]	; (80074d8 <__kernel_rem_pio2+0x678>)
 8007272:	ee10 0a10 	vmov	r0, s0
 8007276:	4639      	mov	r1, r7
 8007278:	f7f9 fc5c 	bl	8000b34 <__aeabi_dcmpge>
 800727c:	b1f8      	cbz	r0, 80072be <__kernel_rem_pio2+0x45e>
 800727e:	2200      	movs	r2, #0
 8007280:	4b96      	ldr	r3, [pc, #600]	; (80074dc <__kernel_rem_pio2+0x67c>)
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f9 f9cf 	bl	8000628 <__aeabi_dmul>
 800728a:	f7f9 fc67 	bl	8000b5c <__aeabi_d2iz>
 800728e:	4680      	mov	r8, r0
 8007290:	f7f9 f960 	bl	8000554 <__aeabi_i2d>
 8007294:	2200      	movs	r2, #0
 8007296:	4b90      	ldr	r3, [pc, #576]	; (80074d8 <__kernel_rem_pio2+0x678>)
 8007298:	f7f9 f9c6 	bl	8000628 <__aeabi_dmul>
 800729c:	460b      	mov	r3, r1
 800729e:	4602      	mov	r2, r0
 80072a0:	4639      	mov	r1, r7
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7f9 f808 	bl	80002b8 <__aeabi_dsub>
 80072a8:	f7f9 fc58 	bl	8000b5c <__aeabi_d2iz>
 80072ac:	1c65      	adds	r5, r4, #1
 80072ae:	ab0e      	add	r3, sp, #56	; 0x38
 80072b0:	f10a 0a18 	add.w	sl, sl, #24
 80072b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80072b8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80072bc:	e719      	b.n	80070f2 <__kernel_rem_pio2+0x292>
 80072be:	4630      	mov	r0, r6
 80072c0:	4639      	mov	r1, r7
 80072c2:	f7f9 fc4b 	bl	8000b5c <__aeabi_d2iz>
 80072c6:	ab0e      	add	r3, sp, #56	; 0x38
 80072c8:	4625      	mov	r5, r4
 80072ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80072ce:	e710      	b.n	80070f2 <__kernel_rem_pio2+0x292>
 80072d0:	ab0e      	add	r3, sp, #56	; 0x38
 80072d2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80072d6:	f7f9 f93d 	bl	8000554 <__aeabi_i2d>
 80072da:	4642      	mov	r2, r8
 80072dc:	464b      	mov	r3, r9
 80072de:	f7f9 f9a3 	bl	8000628 <__aeabi_dmul>
 80072e2:	2200      	movs	r2, #0
 80072e4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80072e8:	4b7c      	ldr	r3, [pc, #496]	; (80074dc <__kernel_rem_pio2+0x67c>)
 80072ea:	4640      	mov	r0, r8
 80072ec:	4649      	mov	r1, r9
 80072ee:	f7f9 f99b 	bl	8000628 <__aeabi_dmul>
 80072f2:	3f01      	subs	r7, #1
 80072f4:	4680      	mov	r8, r0
 80072f6:	4689      	mov	r9, r1
 80072f8:	e708      	b.n	800710c <__kernel_rem_pio2+0x2ac>
 80072fa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007306:	f7f9 f98f 	bl	8000628 <__aeabi_dmul>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4640      	mov	r0, r8
 8007310:	4649      	mov	r1, r9
 8007312:	f7f8 ffd3 	bl	80002bc <__adddf3>
 8007316:	3701      	adds	r7, #1
 8007318:	4680      	mov	r8, r0
 800731a:	4689      	mov	r9, r1
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	429f      	cmp	r7, r3
 8007320:	dc01      	bgt.n	8007326 <__kernel_rem_pio2+0x4c6>
 8007322:	45ba      	cmp	sl, r7
 8007324:	dae9      	bge.n	80072fa <__kernel_rem_pio2+0x49a>
 8007326:	ab4a      	add	r3, sp, #296	; 0x128
 8007328:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800732c:	e9c3 8900 	strd	r8, r9, [r3]
 8007330:	f10a 0a01 	add.w	sl, sl, #1
 8007334:	3e08      	subs	r6, #8
 8007336:	e6f0      	b.n	800711a <__kernel_rem_pio2+0x2ba>
 8007338:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800733a:	2b03      	cmp	r3, #3
 800733c:	d85b      	bhi.n	80073f6 <__kernel_rem_pio2+0x596>
 800733e:	e8df f003 	tbb	[pc, r3]
 8007342:	264a      	.short	0x264a
 8007344:	0226      	.short	0x0226
 8007346:	ab9a      	add	r3, sp, #616	; 0x268
 8007348:	441c      	add	r4, r3
 800734a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800734e:	46a2      	mov	sl, r4
 8007350:	46ab      	mov	fp, r5
 8007352:	f1bb 0f00 	cmp.w	fp, #0
 8007356:	dc6c      	bgt.n	8007432 <__kernel_rem_pio2+0x5d2>
 8007358:	46a2      	mov	sl, r4
 800735a:	46ab      	mov	fp, r5
 800735c:	f1bb 0f01 	cmp.w	fp, #1
 8007360:	f300 8086 	bgt.w	8007470 <__kernel_rem_pio2+0x610>
 8007364:	2000      	movs	r0, #0
 8007366:	2100      	movs	r1, #0
 8007368:	2d01      	cmp	r5, #1
 800736a:	f300 80a0 	bgt.w	80074ae <__kernel_rem_pio2+0x64e>
 800736e:	9b02      	ldr	r3, [sp, #8]
 8007370:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007374:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007378:	2b00      	cmp	r3, #0
 800737a:	f040 809e 	bne.w	80074ba <__kernel_rem_pio2+0x65a>
 800737e:	9b01      	ldr	r3, [sp, #4]
 8007380:	e9c3 7800 	strd	r7, r8, [r3]
 8007384:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007388:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800738c:	e033      	b.n	80073f6 <__kernel_rem_pio2+0x596>
 800738e:	3408      	adds	r4, #8
 8007390:	ab4a      	add	r3, sp, #296	; 0x128
 8007392:	441c      	add	r4, r3
 8007394:	462e      	mov	r6, r5
 8007396:	2000      	movs	r0, #0
 8007398:	2100      	movs	r1, #0
 800739a:	2e00      	cmp	r6, #0
 800739c:	da3a      	bge.n	8007414 <__kernel_rem_pio2+0x5b4>
 800739e:	9b02      	ldr	r3, [sp, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d03d      	beq.n	8007420 <__kernel_rem_pio2+0x5c0>
 80073a4:	4602      	mov	r2, r0
 80073a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073aa:	9c01      	ldr	r4, [sp, #4]
 80073ac:	e9c4 2300 	strd	r2, r3, [r4]
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80073b8:	f7f8 ff7e 	bl	80002b8 <__aeabi_dsub>
 80073bc:	ae4c      	add	r6, sp, #304	; 0x130
 80073be:	2401      	movs	r4, #1
 80073c0:	42a5      	cmp	r5, r4
 80073c2:	da30      	bge.n	8007426 <__kernel_rem_pio2+0x5c6>
 80073c4:	9b02      	ldr	r3, [sp, #8]
 80073c6:	b113      	cbz	r3, 80073ce <__kernel_rem_pio2+0x56e>
 80073c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073cc:	4619      	mov	r1, r3
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80073d4:	e00f      	b.n	80073f6 <__kernel_rem_pio2+0x596>
 80073d6:	ab9a      	add	r3, sp, #616	; 0x268
 80073d8:	441c      	add	r4, r3
 80073da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80073de:	2000      	movs	r0, #0
 80073e0:	2100      	movs	r1, #0
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	da10      	bge.n	8007408 <__kernel_rem_pio2+0x5a8>
 80073e6:	9b02      	ldr	r3, [sp, #8]
 80073e8:	b113      	cbz	r3, 80073f0 <__kernel_rem_pio2+0x590>
 80073ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073ee:	4619      	mov	r1, r3
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	e9c3 0100 	strd	r0, r1, [r3]
 80073f6:	9b06      	ldr	r3, [sp, #24]
 80073f8:	f003 0007 	and.w	r0, r3, #7
 80073fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007400:	ecbd 8b02 	vpop	{d8}
 8007404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007408:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800740c:	f7f8 ff56 	bl	80002bc <__adddf3>
 8007410:	3d01      	subs	r5, #1
 8007412:	e7e6      	b.n	80073e2 <__kernel_rem_pio2+0x582>
 8007414:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007418:	f7f8 ff50 	bl	80002bc <__adddf3>
 800741c:	3e01      	subs	r6, #1
 800741e:	e7bc      	b.n	800739a <__kernel_rem_pio2+0x53a>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	e7c1      	b.n	80073aa <__kernel_rem_pio2+0x54a>
 8007426:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800742a:	f7f8 ff47 	bl	80002bc <__adddf3>
 800742e:	3401      	adds	r4, #1
 8007430:	e7c6      	b.n	80073c0 <__kernel_rem_pio2+0x560>
 8007432:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007436:	ed3a 7b02 	vldmdb	sl!, {d7}
 800743a:	4640      	mov	r0, r8
 800743c:	ec53 2b17 	vmov	r2, r3, d7
 8007440:	4649      	mov	r1, r9
 8007442:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007446:	f7f8 ff39 	bl	80002bc <__adddf3>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4606      	mov	r6, r0
 8007450:	460f      	mov	r7, r1
 8007452:	4640      	mov	r0, r8
 8007454:	4649      	mov	r1, r9
 8007456:	f7f8 ff2f 	bl	80002b8 <__aeabi_dsub>
 800745a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800745e:	f7f8 ff2d 	bl	80002bc <__adddf3>
 8007462:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007466:	e9ca 0100 	strd	r0, r1, [sl]
 800746a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800746e:	e770      	b.n	8007352 <__kernel_rem_pio2+0x4f2>
 8007470:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007474:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007478:	4630      	mov	r0, r6
 800747a:	ec53 2b17 	vmov	r2, r3, d7
 800747e:	4639      	mov	r1, r7
 8007480:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007484:	f7f8 ff1a 	bl	80002bc <__adddf3>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4680      	mov	r8, r0
 800748e:	4689      	mov	r9, r1
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f8 ff10 	bl	80002b8 <__aeabi_dsub>
 8007498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800749c:	f7f8 ff0e 	bl	80002bc <__adddf3>
 80074a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074a4:	e9ca 0100 	strd	r0, r1, [sl]
 80074a8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80074ac:	e756      	b.n	800735c <__kernel_rem_pio2+0x4fc>
 80074ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80074b2:	f7f8 ff03 	bl	80002bc <__adddf3>
 80074b6:	3d01      	subs	r5, #1
 80074b8:	e756      	b.n	8007368 <__kernel_rem_pio2+0x508>
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	9a01      	ldr	r2, [sp, #4]
 80074be:	601f      	str	r7, [r3, #0]
 80074c0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80074c4:	605c      	str	r4, [r3, #4]
 80074c6:	609d      	str	r5, [r3, #8]
 80074c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80074cc:	60d3      	str	r3, [r2, #12]
 80074ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074d2:	6110      	str	r0, [r2, #16]
 80074d4:	6153      	str	r3, [r2, #20]
 80074d6:	e78e      	b.n	80073f6 <__kernel_rem_pio2+0x596>
 80074d8:	41700000 	.word	0x41700000
 80074dc:	3e700000 	.word	0x3e700000

080074e0 <__kernel_sin>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	ec55 4b10 	vmov	r4, r5, d0
 80074e8:	b085      	sub	sp, #20
 80074ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80074ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80074f2:	ed8d 1b00 	vstr	d1, [sp]
 80074f6:	9002      	str	r0, [sp, #8]
 80074f8:	da06      	bge.n	8007508 <__kernel_sin+0x28>
 80074fa:	ee10 0a10 	vmov	r0, s0
 80074fe:	4629      	mov	r1, r5
 8007500:	f7f9 fb2c 	bl	8000b5c <__aeabi_d2iz>
 8007504:	2800      	cmp	r0, #0
 8007506:	d051      	beq.n	80075ac <__kernel_sin+0xcc>
 8007508:	4622      	mov	r2, r4
 800750a:	462b      	mov	r3, r5
 800750c:	4620      	mov	r0, r4
 800750e:	4629      	mov	r1, r5
 8007510:	f7f9 f88a 	bl	8000628 <__aeabi_dmul>
 8007514:	4682      	mov	sl, r0
 8007516:	468b      	mov	fp, r1
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4620      	mov	r0, r4
 800751e:	4629      	mov	r1, r5
 8007520:	f7f9 f882 	bl	8000628 <__aeabi_dmul>
 8007524:	a341      	add	r3, pc, #260	; (adr r3, 800762c <__kernel_sin+0x14c>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	4680      	mov	r8, r0
 800752c:	4689      	mov	r9, r1
 800752e:	4650      	mov	r0, sl
 8007530:	4659      	mov	r1, fp
 8007532:	f7f9 f879 	bl	8000628 <__aeabi_dmul>
 8007536:	a33f      	add	r3, pc, #252	; (adr r3, 8007634 <__kernel_sin+0x154>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f7f8 febc 	bl	80002b8 <__aeabi_dsub>
 8007540:	4652      	mov	r2, sl
 8007542:	465b      	mov	r3, fp
 8007544:	f7f9 f870 	bl	8000628 <__aeabi_dmul>
 8007548:	a33c      	add	r3, pc, #240	; (adr r3, 800763c <__kernel_sin+0x15c>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f8 feb5 	bl	80002bc <__adddf3>
 8007552:	4652      	mov	r2, sl
 8007554:	465b      	mov	r3, fp
 8007556:	f7f9 f867 	bl	8000628 <__aeabi_dmul>
 800755a:	a33a      	add	r3, pc, #232	; (adr r3, 8007644 <__kernel_sin+0x164>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 feaa 	bl	80002b8 <__aeabi_dsub>
 8007564:	4652      	mov	r2, sl
 8007566:	465b      	mov	r3, fp
 8007568:	f7f9 f85e 	bl	8000628 <__aeabi_dmul>
 800756c:	a337      	add	r3, pc, #220	; (adr r3, 800764c <__kernel_sin+0x16c>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f8 fea3 	bl	80002bc <__adddf3>
 8007576:	9b02      	ldr	r3, [sp, #8]
 8007578:	4606      	mov	r6, r0
 800757a:	460f      	mov	r7, r1
 800757c:	b9db      	cbnz	r3, 80075b6 <__kernel_sin+0xd6>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4650      	mov	r0, sl
 8007584:	4659      	mov	r1, fp
 8007586:	f7f9 f84f 	bl	8000628 <__aeabi_dmul>
 800758a:	a325      	add	r3, pc, #148	; (adr r3, 8007620 <__kernel_sin+0x140>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f7f8 fe92 	bl	80002b8 <__aeabi_dsub>
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	f7f9 f846 	bl	8000628 <__aeabi_dmul>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4620      	mov	r0, r4
 80075a2:	4629      	mov	r1, r5
 80075a4:	f7f8 fe8a 	bl	80002bc <__adddf3>
 80075a8:	4604      	mov	r4, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	ec45 4b10 	vmov	d0, r4, r5
 80075b0:	b005      	add	sp, #20
 80075b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b6:	2200      	movs	r2, #0
 80075b8:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <__kernel_sin+0x148>)
 80075ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075be:	f7f9 f833 	bl	8000628 <__aeabi_dmul>
 80075c2:	4632      	mov	r2, r6
 80075c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c8:	463b      	mov	r3, r7
 80075ca:	4640      	mov	r0, r8
 80075cc:	4649      	mov	r1, r9
 80075ce:	f7f9 f82b 	bl	8000628 <__aeabi_dmul>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075da:	f7f8 fe6d 	bl	80002b8 <__aeabi_dsub>
 80075de:	4652      	mov	r2, sl
 80075e0:	465b      	mov	r3, fp
 80075e2:	f7f9 f821 	bl	8000628 <__aeabi_dmul>
 80075e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ea:	f7f8 fe65 	bl	80002b8 <__aeabi_dsub>
 80075ee:	a30c      	add	r3, pc, #48	; (adr r3, 8007620 <__kernel_sin+0x140>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	4606      	mov	r6, r0
 80075f6:	460f      	mov	r7, r1
 80075f8:	4640      	mov	r0, r8
 80075fa:	4649      	mov	r1, r9
 80075fc:	f7f9 f814 	bl	8000628 <__aeabi_dmul>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4630      	mov	r0, r6
 8007606:	4639      	mov	r1, r7
 8007608:	f7f8 fe58 	bl	80002bc <__adddf3>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4620      	mov	r0, r4
 8007612:	4629      	mov	r1, r5
 8007614:	f7f8 fe50 	bl	80002b8 <__aeabi_dsub>
 8007618:	e7c6      	b.n	80075a8 <__kernel_sin+0xc8>
 800761a:	bf00      	nop
 800761c:	f3af 8000 	nop.w
 8007620:	55555549 	.word	0x55555549
 8007624:	3fc55555 	.word	0x3fc55555
 8007628:	3fe00000 	.word	0x3fe00000
 800762c:	5acfd57c 	.word	0x5acfd57c
 8007630:	3de5d93a 	.word	0x3de5d93a
 8007634:	8a2b9ceb 	.word	0x8a2b9ceb
 8007638:	3e5ae5e6 	.word	0x3e5ae5e6
 800763c:	57b1fe7d 	.word	0x57b1fe7d
 8007640:	3ec71de3 	.word	0x3ec71de3
 8007644:	19c161d5 	.word	0x19c161d5
 8007648:	3f2a01a0 	.word	0x3f2a01a0
 800764c:	1110f8a6 	.word	0x1110f8a6
 8007650:	3f811111 	.word	0x3f811111

08007654 <fabs>:
 8007654:	ec51 0b10 	vmov	r0, r1, d0
 8007658:	ee10 2a10 	vmov	r2, s0
 800765c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007660:	ec43 2b10 	vmov	d0, r2, r3
 8007664:	4770      	bx	lr
	...

08007668 <floor>:
 8007668:	ec51 0b10 	vmov	r0, r1, d0
 800766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007670:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007674:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007678:	2e13      	cmp	r6, #19
 800767a:	460c      	mov	r4, r1
 800767c:	ee10 5a10 	vmov	r5, s0
 8007680:	4680      	mov	r8, r0
 8007682:	dc34      	bgt.n	80076ee <floor+0x86>
 8007684:	2e00      	cmp	r6, #0
 8007686:	da16      	bge.n	80076b6 <floor+0x4e>
 8007688:	a335      	add	r3, pc, #212	; (adr r3, 8007760 <floor+0xf8>)
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f7f8 fe15 	bl	80002bc <__adddf3>
 8007692:	2200      	movs	r2, #0
 8007694:	2300      	movs	r3, #0
 8007696:	f7f9 fa57 	bl	8000b48 <__aeabi_dcmpgt>
 800769a:	b148      	cbz	r0, 80076b0 <floor+0x48>
 800769c:	2c00      	cmp	r4, #0
 800769e:	da59      	bge.n	8007754 <floor+0xec>
 80076a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80076a4:	4a30      	ldr	r2, [pc, #192]	; (8007768 <floor+0x100>)
 80076a6:	432b      	orrs	r3, r5
 80076a8:	2500      	movs	r5, #0
 80076aa:	42ab      	cmp	r3, r5
 80076ac:	bf18      	it	ne
 80076ae:	4614      	movne	r4, r2
 80076b0:	4621      	mov	r1, r4
 80076b2:	4628      	mov	r0, r5
 80076b4:	e025      	b.n	8007702 <floor+0x9a>
 80076b6:	4f2d      	ldr	r7, [pc, #180]	; (800776c <floor+0x104>)
 80076b8:	4137      	asrs	r7, r6
 80076ba:	ea01 0307 	and.w	r3, r1, r7
 80076be:	4303      	orrs	r3, r0
 80076c0:	d01f      	beq.n	8007702 <floor+0x9a>
 80076c2:	a327      	add	r3, pc, #156	; (adr r3, 8007760 <floor+0xf8>)
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	f7f8 fdf8 	bl	80002bc <__adddf3>
 80076cc:	2200      	movs	r2, #0
 80076ce:	2300      	movs	r3, #0
 80076d0:	f7f9 fa3a 	bl	8000b48 <__aeabi_dcmpgt>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d0eb      	beq.n	80076b0 <floor+0x48>
 80076d8:	2c00      	cmp	r4, #0
 80076da:	bfbe      	ittt	lt
 80076dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80076e0:	fa43 f606 	asrlt.w	r6, r3, r6
 80076e4:	19a4      	addlt	r4, r4, r6
 80076e6:	ea24 0407 	bic.w	r4, r4, r7
 80076ea:	2500      	movs	r5, #0
 80076ec:	e7e0      	b.n	80076b0 <floor+0x48>
 80076ee:	2e33      	cmp	r6, #51	; 0x33
 80076f0:	dd0b      	ble.n	800770a <floor+0xa2>
 80076f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80076f6:	d104      	bne.n	8007702 <floor+0x9a>
 80076f8:	ee10 2a10 	vmov	r2, s0
 80076fc:	460b      	mov	r3, r1
 80076fe:	f7f8 fddd 	bl	80002bc <__adddf3>
 8007702:	ec41 0b10 	vmov	d0, r0, r1
 8007706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800770e:	f04f 33ff 	mov.w	r3, #4294967295
 8007712:	fa23 f707 	lsr.w	r7, r3, r7
 8007716:	4207      	tst	r7, r0
 8007718:	d0f3      	beq.n	8007702 <floor+0x9a>
 800771a:	a311      	add	r3, pc, #68	; (adr r3, 8007760 <floor+0xf8>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f7f8 fdcc 	bl	80002bc <__adddf3>
 8007724:	2200      	movs	r2, #0
 8007726:	2300      	movs	r3, #0
 8007728:	f7f9 fa0e 	bl	8000b48 <__aeabi_dcmpgt>
 800772c:	2800      	cmp	r0, #0
 800772e:	d0bf      	beq.n	80076b0 <floor+0x48>
 8007730:	2c00      	cmp	r4, #0
 8007732:	da02      	bge.n	800773a <floor+0xd2>
 8007734:	2e14      	cmp	r6, #20
 8007736:	d103      	bne.n	8007740 <floor+0xd8>
 8007738:	3401      	adds	r4, #1
 800773a:	ea25 0507 	bic.w	r5, r5, r7
 800773e:	e7b7      	b.n	80076b0 <floor+0x48>
 8007740:	2301      	movs	r3, #1
 8007742:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007746:	fa03 f606 	lsl.w	r6, r3, r6
 800774a:	4435      	add	r5, r6
 800774c:	4545      	cmp	r5, r8
 800774e:	bf38      	it	cc
 8007750:	18e4      	addcc	r4, r4, r3
 8007752:	e7f2      	b.n	800773a <floor+0xd2>
 8007754:	2500      	movs	r5, #0
 8007756:	462c      	mov	r4, r5
 8007758:	e7aa      	b.n	80076b0 <floor+0x48>
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w
 8007760:	8800759c 	.word	0x8800759c
 8007764:	7e37e43c 	.word	0x7e37e43c
 8007768:	bff00000 	.word	0xbff00000
 800776c:	000fffff 	.word	0x000fffff

08007770 <scalbn>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	ec55 4b10 	vmov	r4, r5, d0
 8007776:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800777a:	4606      	mov	r6, r0
 800777c:	462b      	mov	r3, r5
 800777e:	b9aa      	cbnz	r2, 80077ac <scalbn+0x3c>
 8007780:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007784:	4323      	orrs	r3, r4
 8007786:	d03b      	beq.n	8007800 <scalbn+0x90>
 8007788:	4b31      	ldr	r3, [pc, #196]	; (8007850 <scalbn+0xe0>)
 800778a:	4629      	mov	r1, r5
 800778c:	2200      	movs	r2, #0
 800778e:	ee10 0a10 	vmov	r0, s0
 8007792:	f7f8 ff49 	bl	8000628 <__aeabi_dmul>
 8007796:	4b2f      	ldr	r3, [pc, #188]	; (8007854 <scalbn+0xe4>)
 8007798:	429e      	cmp	r6, r3
 800779a:	4604      	mov	r4, r0
 800779c:	460d      	mov	r5, r1
 800779e:	da12      	bge.n	80077c6 <scalbn+0x56>
 80077a0:	a327      	add	r3, pc, #156	; (adr r3, 8007840 <scalbn+0xd0>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f8 ff3f 	bl	8000628 <__aeabi_dmul>
 80077aa:	e009      	b.n	80077c0 <scalbn+0x50>
 80077ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80077b0:	428a      	cmp	r2, r1
 80077b2:	d10c      	bne.n	80077ce <scalbn+0x5e>
 80077b4:	ee10 2a10 	vmov	r2, s0
 80077b8:	4620      	mov	r0, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f8 fd7e 	bl	80002bc <__adddf3>
 80077c0:	4604      	mov	r4, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	e01c      	b.n	8007800 <scalbn+0x90>
 80077c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80077ca:	460b      	mov	r3, r1
 80077cc:	3a36      	subs	r2, #54	; 0x36
 80077ce:	4432      	add	r2, r6
 80077d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80077d4:	428a      	cmp	r2, r1
 80077d6:	dd0b      	ble.n	80077f0 <scalbn+0x80>
 80077d8:	ec45 4b11 	vmov	d1, r4, r5
 80077dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007848 <scalbn+0xd8>
 80077e0:	f000 f83c 	bl	800785c <copysign>
 80077e4:	a318      	add	r3, pc, #96	; (adr r3, 8007848 <scalbn+0xd8>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	ec51 0b10 	vmov	r0, r1, d0
 80077ee:	e7da      	b.n	80077a6 <scalbn+0x36>
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	dd08      	ble.n	8007806 <scalbn+0x96>
 80077f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80077f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80077fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007800:	ec45 4b10 	vmov	d0, r4, r5
 8007804:	bd70      	pop	{r4, r5, r6, pc}
 8007806:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800780a:	da0d      	bge.n	8007828 <scalbn+0xb8>
 800780c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007810:	429e      	cmp	r6, r3
 8007812:	ec45 4b11 	vmov	d1, r4, r5
 8007816:	dce1      	bgt.n	80077dc <scalbn+0x6c>
 8007818:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007840 <scalbn+0xd0>
 800781c:	f000 f81e 	bl	800785c <copysign>
 8007820:	a307      	add	r3, pc, #28	; (adr r3, 8007840 <scalbn+0xd0>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	e7e0      	b.n	80077ea <scalbn+0x7a>
 8007828:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800782c:	3236      	adds	r2, #54	; 0x36
 800782e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007832:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007836:	4620      	mov	r0, r4
 8007838:	4629      	mov	r1, r5
 800783a:	2200      	movs	r2, #0
 800783c:	4b06      	ldr	r3, [pc, #24]	; (8007858 <scalbn+0xe8>)
 800783e:	e7b2      	b.n	80077a6 <scalbn+0x36>
 8007840:	c2f8f359 	.word	0xc2f8f359
 8007844:	01a56e1f 	.word	0x01a56e1f
 8007848:	8800759c 	.word	0x8800759c
 800784c:	7e37e43c 	.word	0x7e37e43c
 8007850:	43500000 	.word	0x43500000
 8007854:	ffff3cb0 	.word	0xffff3cb0
 8007858:	3c900000 	.word	0x3c900000

0800785c <copysign>:
 800785c:	ec51 0b10 	vmov	r0, r1, d0
 8007860:	ee11 0a90 	vmov	r0, s3
 8007864:	ee10 2a10 	vmov	r2, s0
 8007868:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800786c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007870:	ea41 0300 	orr.w	r3, r1, r0
 8007874:	ec43 2b10 	vmov	d0, r2, r3
 8007878:	4770      	bx	lr
	...

0800787c <_init>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	bf00      	nop
 8007880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007882:	bc08      	pop	{r3}
 8007884:	469e      	mov	lr, r3
 8007886:	4770      	bx	lr

08007888 <_fini>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	bf00      	nop
 800788c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788e:	bc08      	pop	{r3}
 8007890:	469e      	mov	lr, r3
 8007892:	4770      	bx	lr
