
MyServoAmp_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e0  080059e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059e0  080059e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059e8  080059e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059ec  080059ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  08005a60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005a60  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f52a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024b4  00000000  00000000  0002f5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  00031a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00032880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e4e  00000000  00000000  00033538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c26e  00000000  00000000  00057386  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5700  00000000  00000000  000635f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138cf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004154  00000000  00000000  00138d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080058e4 	.word	0x080058e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080058e4 	.word	0x080058e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e00:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <MX_ADC1_Init+0xa0>)
 8000e02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e30:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e52:	f001 f81f 	bl	8001e94 <HAL_ADC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e5c:	f000 fbdc 	bl	8001618 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_ADC1_Init+0x9c>)
 8000e72:	f001 f853 	bl	8001f1c <HAL_ADC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e7c:	f000 fbcc 	bl	8001618 <Error_Handler>
  }

}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200000e4 	.word	0x200000e4
 8000e8c:	40012000 	.word	0x40012000

08000e90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000ea4:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <MX_ADC2_Init+0xa0>)
 8000ea6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000ecc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000ed4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000ef6:	f000 ffcd 	bl	8001e94 <HAL_ADC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000f00:	f000 fb8a 	bl	8001618 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f04:	2304      	movs	r3, #4
 8000f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_ADC2_Init+0x9c>)
 8000f16:	f001 f801 	bl	8001f1c <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000f20:	f000 fb7a 	bl	8001618 <Error_Handler>
  }

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000009c 	.word	0x2000009c
 8000f30:	40012100 	.word	0x40012100

08000f34 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f48:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <MX_ADC3_Init+0xa0>)
 8000f4a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f52:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f78:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000f9a:	f000 ff7b 	bl	8001e94 <HAL_ADC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8000fa4:	f000 fb38 	bl	8001618 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_ADC3_Init+0x9c>)
 8000fba:	f000 ffaf 	bl	8001f1c <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000fc4:	f000 fb28 	bl	8001618 <Error_Handler>
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000012c 	.word	0x2000012c
 8000fd4:	40012200 	.word	0x40012200

08000fd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	; 0x38
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a45      	ldr	r2, [pc, #276]	; (800110c <HAL_ADC_MspInit+0x134>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d128      	bne.n	800104c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
 8000ffe:	4b44      	ldr	r3, [pc, #272]	; (8001110 <HAL_ADC_MspInit+0x138>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a43      	ldr	r2, [pc, #268]	; (8001110 <HAL_ADC_MspInit+0x138>)
 8001004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b41      	ldr	r3, [pc, #260]	; (8001110 <HAL_ADC_MspInit+0x138>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	623b      	str	r3, [r7, #32]
 8001014:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <HAL_ADC_MspInit+0x138>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a3c      	ldr	r2, [pc, #240]	; (8001110 <HAL_ADC_MspInit+0x138>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <HAL_ADC_MspInit+0x138>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001036:	2303      	movs	r3, #3
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4833      	ldr	r0, [pc, #204]	; (8001114 <HAL_ADC_MspInit+0x13c>)
 8001046:	f001 faa9 	bl	800259c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800104a:	e05a      	b.n	8001102 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a31      	ldr	r2, [pc, #196]	; (8001118 <HAL_ADC_MspInit+0x140>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d128      	bne.n	80010a8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <HAL_ADC_MspInit+0x138>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <HAL_ADC_MspInit+0x138>)
 8001060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <HAL_ADC_MspInit+0x138>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_ADC_MspInit+0x138>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a25      	ldr	r2, [pc, #148]	; (8001110 <HAL_ADC_MspInit+0x138>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_ADC_MspInit+0x138>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800108e:	2310      	movs	r3, #16
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	481c      	ldr	r0, [pc, #112]	; (8001114 <HAL_ADC_MspInit+0x13c>)
 80010a2:	f001 fa7b 	bl	800259c <HAL_GPIO_Init>
}
 80010a6:	e02c      	b.n	8001102 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_ADC_MspInit+0x144>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d127      	bne.n	8001102 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_ADC_MspInit+0x138>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <HAL_ADC_MspInit+0x138>)
 80010bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_ADC_MspInit+0x138>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_ADC_MspInit+0x138>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_ADC_MspInit+0x138>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_ADC_MspInit+0x138>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010ea:	2302      	movs	r3, #2
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_ADC_MspInit+0x13c>)
 80010fe:	f001 fa4d 	bl	800259c <HAL_GPIO_Init>
}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	; 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40012000 	.word	0x40012000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	40012100 	.word	0x40012100
 800111c:	40012200 	.word	0x40012200

08001120 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <MX_GPIO_Init+0x108>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a3a      	ldr	r2, [pc, #232]	; (8001228 <MX_GPIO_Init+0x108>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <MX_GPIO_Init+0x108>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b34      	ldr	r3, [pc, #208]	; (8001228 <MX_GPIO_Init+0x108>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a33      	ldr	r2, [pc, #204]	; (8001228 <MX_GPIO_Init+0x108>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <MX_GPIO_Init+0x108>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <MX_GPIO_Init+0x108>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <MX_GPIO_Init+0x108>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_GPIO_Init+0x108>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2120      	movs	r1, #32
 800118e:	4827      	ldr	r0, [pc, #156]	; (800122c <MX_GPIO_Init+0x10c>)
 8001190:	f001 fb96 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GATE_BR_GPIO_Port, GATE_BR_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800119a:	4825      	ldr	r0, [pc, #148]	; (8001230 <MX_GPIO_Init+0x110>)
 800119c:	f001 fb90 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <MX_GPIO_Init+0x114>)
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <MX_GPIO_Init+0x110>)
 80011b6:	f001 f9f1 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ba:	2320      	movs	r3, #32
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4816      	ldr	r0, [pc, #88]	; (800122c <MX_GPIO_Init+0x10c>)
 80011d2:	f001 f9e3 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GATE_BR_Pin;
 80011d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GATE_BR_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4810      	ldr	r0, [pc, #64]	; (8001230 <MX_GPIO_Init+0x110>)
 80011f0:	f001 f9d4 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_GPIO_Init+0x114>)
 80011fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4619      	mov	r1, r3
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <MX_GPIO_Init+0x10c>)
 800120a:	f001 f9c7 	bl	800259c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2028      	movs	r0, #40	; 0x28
 8001214:	f001 f98b 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001218:	2028      	movs	r0, #40	; 0x28
 800121a:	f001 f9a4 	bl	8002566 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020800 	.word	0x40020800
 8001234:	10210000 	.word	0x10210000

08001238 <IncEnc_Init>:

IncEnc_TypeDef incEnc;


void IncEnc_Init()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

	memset(&incEnc, 0x00, sizeof(incEnc));
 800123c:	2234      	movs	r2, #52	; 0x34
 800123e:	2100      	movs	r1, #0
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <IncEnc_Init+0x44>)
 8001242:	f003 fbff 	bl	8004a44 <memset>

	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001246:	213c      	movs	r1, #60	; 0x3c
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <IncEnc_Init+0x48>)
 800124a:	f002 f971 	bl	8003530 <HAL_TIM_Encoder_Start_IT>

	incEnc.Init.GearRatio_out2enc = 1;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <IncEnc_Init+0x44>)
 8001250:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001254:	605a      	str	r2, [r3, #4]
	incEnc.Init.PPR = 2048;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <IncEnc_Init+0x44>)
 8001258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800125c:	609a      	str	r2, [r3, #8]
	incEnc.Init.count_max = 65535;
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <IncEnc_Init+0x44>)
 8001260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001264:	60da      	str	r2, [r3, #12]
	incEnc.Init.cycleTime = 1E-3;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <IncEnc_Init+0x44>)
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <IncEnc_Init+0x4c>)
 800126a:	611a      	str	r2, [r3, #16]
	incEnc.Init.prescale = 1;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <IncEnc_Init+0x44>)
 800126e:	2201      	movs	r2, #1
 8001270:	615a      	str	r2, [r3, #20]

	incEnc.htim = &htim1;
 8001272:	4b02      	ldr	r3, [pc, #8]	; (800127c <IncEnc_Init+0x44>)
 8001274:	4a02      	ldr	r2, [pc, #8]	; (8001280 <IncEnc_Init+0x48>)
 8001276:	601a      	str	r2, [r3, #0]



}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000174 	.word	0x20000174
 8001280:	200001e8 	.word	0x200001e8
 8001284:	3a83126f 	.word	0x3a83126f

08001288 <refreshIncEnc>:




void refreshIncEnc(IncEnc_TypeDef *IncEnc)
{
 8001288:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]


	// load now data
	IncEnc->raw_count = IncEnc->htim->Instance->CNT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]


	int32_t count_diff = (int32_t)IncEnc->raw_count - IncEnc->p_raw_count;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	60fb      	str	r3, [r7, #12]

	// refresh past data
	IncEnc->p_raw_count = IncEnc->raw_count;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	61da      	str	r2, [r3, #28]

	// Unwrapping process
	if(count_diff < -1 * (int32_t)((IncEnc->Init.count_max + 1) >> 1))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	3301      	adds	r3, #1
 80012b8:	085b      	lsrs	r3, r3, #1
 80012ba:	425b      	negs	r3, r3
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	429a      	cmp	r2, r3
 80012c0:	da06      	bge.n	80012d0 <refreshIncEnc+0x48>
	{
		count_diff += IncEnc->Init.count_max + 1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	e00d      	b.n	80012ec <refreshIncEnc+0x64>
	}
	else if(count_diff > (int32_t)((IncEnc->Init.count_max + 1) >> 1))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	085b      	lsrs	r3, r3, #1
 80012d8:	461a      	mov	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4293      	cmp	r3, r2
 80012de:	dd05      	ble.n	80012ec <refreshIncEnc+0x64>
	{
		count_diff -= IncEnc->Init.count_max + 1;
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
	}

	IncEnc->count += count_diff;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	441a      	add	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	621a      	str	r2, [r3, #32]

	IncEnc->position = IncEnc->count / (IncEnc->Init.PPR * 4.0 * IncEnc->Init.GearRatio_out2enc) * 2.0 * M_PI;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f929 	bl	8000554 <__aeabi_i2d>
 8001302:	4604      	mov	r4, r0
 8001304:	460d      	mov	r5, r1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f912 	bl	8000534 <__aeabi_ui2d>
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <refreshIncEnc+0x198>)
 8001316:	f7ff f987 	bl	8000628 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4690      	mov	r8, r2
 8001320:	4699      	mov	r9, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f926 	bl	8000578 <__aeabi_f2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4640      	mov	r0, r8
 8001332:	4649      	mov	r1, r9
 8001334:	f7ff f978 	bl	8000628 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7ff fa9c 	bl	800087c <__aeabi_ddiv>
 8001344:	4603      	mov	r3, r0
 8001346:	460c      	mov	r4, r1
 8001348:	4618      	mov	r0, r3
 800134a:	4621      	mov	r1, r4
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	f7fe ffb4 	bl	80002bc <__adddf3>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	a32a      	add	r3, pc, #168	; (adr r3, 8001408 <refreshIncEnc+0x180>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f961 	bl	8000628 <__aeabi_dmul>
 8001366:	4603      	mov	r3, r0
 8001368:	460c      	mov	r4, r1
 800136a:	4618      	mov	r0, r3
 800136c:	4621      	mov	r1, r4
 800136e:	f7ff fb6d 	bl	8000a4c <__aeabi_d2f>
 8001372:	4602      	mov	r2, r0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	625a      	str	r2, [r3, #36]	; 0x24


	IncEnc->speed = IncEnc->speed * 0.6 + 0.4 * (IncEnc->position - IncEnc->p_position) / IncEnc->Init.cycleTime;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8fb 	bl	8000578 <__aeabi_f2d>
 8001382:	a323      	add	r3, pc, #140	; (adr r3, 8001410 <refreshIncEnc+0x188>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f94e 	bl	8000628 <__aeabi_dmul>
 800138c:	4603      	mov	r3, r0
 800138e:	460c      	mov	r4, r1
 8001390:	4625      	mov	r5, r4
 8001392:	461c      	mov	r4, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	ee17 0a90 	vmov	r0, s15
 80013a8:	f7ff f8e6 	bl	8000578 <__aeabi_f2d>
 80013ac:	a31a      	add	r3, pc, #104	; (adr r3, 8001418 <refreshIncEnc+0x190>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f939 	bl	8000628 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4690      	mov	r8, r2
 80013bc:	4699      	mov	r9, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8d8 	bl	8000578 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4640      	mov	r0, r8
 80013ce:	4649      	mov	r1, r9
 80013d0:	f7ff fa54 	bl	800087c <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7fe ff6e 	bl	80002bc <__adddf3>
 80013e0:	4603      	mov	r3, r0
 80013e2:	460c      	mov	r4, r1
 80013e4:	4618      	mov	r0, r3
 80013e6:	4621      	mov	r1, r4
 80013e8:	f7ff fb30 	bl	8000a4c <__aeabi_d2f>
 80013ec:	4602      	mov	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c


	IncEnc->p_position = IncEnc->position;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28

}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001404:	f3af 8000 	nop.w
 8001408:	54442d18 	.word	0x54442d18
 800140c:	400921fb 	.word	0x400921fb
 8001410:	33333333 	.word	0x33333333
 8001414:	3fe33333 	.word	0x3fe33333
 8001418:	9999999a 	.word	0x9999999a
 800141c:	3fd99999 	.word	0x3fd99999
 8001420:	40100000 	.word	0x40100000

08001424 <resetIncEnc>:




void resetIncEnc(IncEnc_TypeDef *IncEnc)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

	IncEnc->htim->Instance->CNT = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24

	IncEnc->raw_count = 0;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
	IncEnc->p_raw_count = 0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
	IncEnc->count = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
	IncEnc->p_position = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
	IncEnc->speed = 0.0f;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 800146e:	1df9      	adds	r1, r7, #7
 8001470:	2301      	movs	r3, #1
 8001472:	2201      	movs	r2, #1
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <__io_putchar+0x20>)
 8001476:	f002 fe5c 	bl	8004132 <HAL_UART_Transmit>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000228 	.word	0x20000228

08001488 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
	printf("EXTI : %d\n", GPIO_Pin);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <HAL_GPIO_EXTI_Callback+0x24>)
 8001498:	f003 fadc 	bl	8004a54 <iprintf>

	resetIncEnc(&incEnc);
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <HAL_GPIO_EXTI_Callback+0x28>)
 800149e:	f7ff ffc1 	bl	8001424 <resetIncEnc>

}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	080058fc 	.word	0x080058fc
 80014b0:	20000174 	.word	0x20000174

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f000 fc58 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f83e 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c0:	f7ff fe2e 	bl	8001120 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014c4:	f000 fbb6 	bl	8001c34 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014c8:	f7ff fc90 	bl	8000dec <MX_ADC1_Init>
  MX_ADC2_Init();
 80014cc:	f7ff fce0 	bl	8000e90 <MX_ADC2_Init>
  MX_ADC3_Init();
 80014d0:	f7ff fd30 	bl	8000f34 <MX_ADC3_Init>
  MX_TIM1_Init();
 80014d4:	f000 f9ba 	bl	800184c <MX_TIM1_Init>
  MX_TIM8_Init();
 80014d8:	f000 fa10 	bl	80018fc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	2120      	movs	r1, #32
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <main+0x74>)
 80014e2:	f001 f9ed 	bl	80028c0 <HAL_GPIO_WritePin>


  printf("Hello myServoAmpProject. \n");
 80014e6:	4811      	ldr	r0, [pc, #68]	; (800152c <main+0x78>)
 80014e8:	f003 fb28 	bl	8004b3c <puts>

  IncEnc_Init();
 80014ec:	f7ff fea4 	bl	8001238 <IncEnc_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static int count = 0;

	  HAL_Delay(1);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f000 fcad 	bl	8001e50 <HAL_Delay>

	  refreshIncEnc(&incEnc);
 80014f6:	480e      	ldr	r0, [pc, #56]	; (8001530 <main+0x7c>)
 80014f8:	f7ff fec6 	bl	8001288 <refreshIncEnc>

	  if(count < 10)
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <main+0x80>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b09      	cmp	r3, #9
 8001502:	dc05      	bgt.n	8001510 <main+0x5c>
	  {
		  count++;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <main+0x80>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <main+0x80>)
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e7ef      	b.n	80014f0 <main+0x3c>
	  }
	  else
	  {
		  printf("count = %d\n", incEnc.htim->Instance->CNT);
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <main+0x7c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <main+0x84>)
 800151c:	f003 fa9a 	bl	8004a54 <iprintf>
		  count = 0;
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <main+0x80>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
  {
 8001526:	e7e3      	b.n	80014f0 <main+0x3c>
 8001528:	40020000 	.word	0x40020000
 800152c:	08005908 	.word	0x08005908
 8001530:	20000174 	.word	0x20000174
 8001534:	2000008c 	.word	0x2000008c
 8001538:	08005924 	.word	0x08005924

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	; 0x50
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	2234      	movs	r2, #52	; 0x34
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fa7a 	bl	8004a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <SystemClock_Config+0xd4>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a29      	ldr	r2, [pc, #164]	; (8001610 <SystemClock_Config+0xd4>)
 800156a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <SystemClock_Config+0xd4>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <SystemClock_Config+0xd8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001588:	4a22      	ldr	r2, [pc, #136]	; (8001614 <SystemClock_Config+0xd8>)
 800158a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <SystemClock_Config+0xd8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800159c:	2302      	movs	r3, #2
 800159e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a4:	2310      	movs	r3, #16
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a8:	2302      	movs	r3, #2
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015b0:	2310      	movs	r3, #16
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015ba:	2304      	movs	r3, #4
 80015bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015be:	2302      	movs	r3, #2
 80015c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 fc64 	bl	8002e98 <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015d6:	f000 f81f 	bl	8001618 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2302      	movs	r3, #2
 80015e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	2102      	movs	r1, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 f994 	bl	8002924 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001602:	f000 f809 	bl	8001618 <Error_Handler>
  }
}
 8001606:	bf00      	nop
 8001608:	3750      	adds	r7, #80	; 0x50
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_MspInit+0x4c>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_MspInit+0x4c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001666:	2007      	movs	r0, #7
 8001668:	f000 ff56 	bl	8002518 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40023800 	.word	0x40023800

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 fba0 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80016d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016dc:	f001 f90a 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016e4:	f001 f906 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_read>:
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e00a      	b.n	8001714 <_read+0x28>
 80016fe:	f3af 8000 	nop.w
 8001702:	4601      	mov	r1, r0
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	60ba      	str	r2, [r7, #8]
 800170a:	b2ca      	uxtb	r2, r1
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	dbf0      	blt.n	80016fe <_read+0x12>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_write>:
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e009      	b.n	800174c <_write+0x26>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fe8f 	bl	8001464 <__io_putchar>
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	dbf1      	blt.n	8001738 <_write+0x12>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_close>:
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_fstat>:
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	2300      	movs	r3, #0
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_isatty>:
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	2301      	movs	r3, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_lseek>:
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	2300      	movs	r3, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <_sbrk>:
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <_sbrk+0x50>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x16>
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <_sbrk+0x50>)
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <_sbrk+0x54>)
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <_sbrk+0x50>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <_sbrk+0x50>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	466a      	mov	r2, sp
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d907      	bls.n	8001802 <_sbrk+0x3a>
 80017f2:	f003 f8fd 	bl	80049f0 <__errno>
 80017f6:	4602      	mov	r2, r0
 80017f8:	230c      	movs	r3, #12
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001800:	e006      	b.n	8001810 <_sbrk+0x48>
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <_sbrk+0x50>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a03      	ldr	r2, [pc, #12]	; (8001818 <_sbrk+0x50>)
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000090 	.word	0x20000090
 800181c:	20000270 	.word	0x20000270

08001820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <SystemInit+0x28>)
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182a:	4a07      	ldr	r2, [pc, #28]	; (8001848 <SystemInit+0x28>)
 800182c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <SystemInit+0x28>)
 8001836:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800183a:	609a      	str	r2, [r3, #8]
#endif
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	2224      	movs	r2, #36	; 0x24
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f003 f8f2 	bl	8004a44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <MX_TIM1_Init+0xa8>)
 800186a:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <MX_TIM1_Init+0xac>)
 800186c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_TIM1_Init+0xa8>)
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_TIM1_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <MX_TIM1_Init+0xa8>)
 800187c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001880:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_TIM1_Init+0xa8>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_TIM1_Init+0xa8>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_TIM1_Init+0xa8>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001894:	2303      	movs	r3, #3
 8001896:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ac:	2301      	movs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_TIM1_Init+0xa8>)
 80018c0:	f001 fda4 	bl	800340c <HAL_TIM_Encoder_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80018ca:	f7ff fea5 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	; (80018f4 <MX_TIM1_Init+0xa8>)
 80018dc:	f002 fb0e 	bl	8003efc <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80018e6:	f7ff fe97 	bl	8001618 <Error_Handler>
  }

}
 80018ea:	bf00      	nop
 80018ec:	3730      	adds	r7, #48	; 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200001e8 	.word	0x200001e8
 80018f8:	40010000 	.word	0x40010000

080018fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b096      	sub	sp, #88	; 0x58
 8001900:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2220      	movs	r2, #32
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f003 f885 	bl	8004a44 <memset>

  htim8.Instance = TIM8;
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <MX_TIM8_Init+0x168>)
 800193c:	4a4a      	ldr	r2, [pc, #296]	; (8001a68 <MX_TIM8_Init+0x16c>)
 800193e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001948:	2220      	movs	r2, #32
 800194a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 800194c:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <MX_TIM8_Init+0x168>)
 800194e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001952:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800195a:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <MX_TIM8_Init+0x168>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001966:	483f      	ldr	r0, [pc, #252]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001968:	f001 fcf0 	bl	800334c <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001972:	f7ff fe51 	bl	8001618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001980:	4619      	mov	r1, r3
 8001982:	4838      	ldr	r0, [pc, #224]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001984:	f001 fef2 	bl	800376c <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800198e:	f7ff fe43 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001992:	4834      	ldr	r0, [pc, #208]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001994:	f001 fd05 	bl	80033a2 <HAL_TIM_PWM_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800199e:	f7ff fe3b 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019a2:	2320      	movs	r3, #32
 80019a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ae:	4619      	mov	r1, r3
 80019b0:	482c      	ldr	r0, [pc, #176]	; (8001a64 <MX_TIM8_Init+0x168>)
 80019b2:	f002 faa3 	bl	8003efc <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80019bc:	f7ff fe2c 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c0:	2360      	movs	r3, #96	; 0x60
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 80019c4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	2200      	movs	r2, #0
 80019e4:	4619      	mov	r1, r3
 80019e6:	481f      	ldr	r0, [pc, #124]	; (8001a64 <MX_TIM8_Init+0x168>)
 80019e8:	f001 fdfa 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80019f2:	f7ff fe11 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fa:	2204      	movs	r2, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4819      	ldr	r0, [pc, #100]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001a00:	f001 fdee 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001a0a:	f7ff fe05 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a12:	2208      	movs	r2, #8
 8001a14:	4619      	mov	r1, r3
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001a18:	f001 fde2 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001a22:	f7ff fdf9 	bl	8001618 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001a48:	f002 fad4 	bl	8003ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8001a52:	f7ff fde1 	bl	8001618 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001a56:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM8_Init+0x168>)
 8001a58:	f000 f872 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 8001a5c:	bf00      	nop
 8001a5e:	3758      	adds	r7, #88	; 0x58
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200001a8 	.word	0x200001a8
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d12c      	bne.n	8001ae8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ae4:	f000 fd5a 	bl	800259c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000

08001afc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <HAL_TIM_Base_MspInit+0x3c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10d      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_TIM_Base_MspInit+0x40>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_TIM_Base_MspInit+0x40>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_TIM_Base_MspInit+0x40>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40010400 	.word	0x40010400
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a30      	ldr	r2, [pc, #192]	; (8001c20 <HAL_TIM_MspPostInit+0xe0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d15a      	bne.n	8001c18 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_TIM_MspPostInit+0xe4>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a2e      	ldr	r2, [pc, #184]	; (8001c24 <HAL_TIM_MspPostInit+0xe4>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <HAL_TIM_MspPostInit+0xe4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <HAL_TIM_MspPostInit+0xe4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a27      	ldr	r2, [pc, #156]	; (8001c24 <HAL_TIM_MspPostInit+0xe4>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_TIM_MspPostInit+0xe4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_TIM_MspPostInit+0xe4>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <HAL_TIM_MspPostInit+0xe4>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_TIM_MspPostInit+0xe4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4815      	ldr	r0, [pc, #84]	; (8001c28 <HAL_TIM_MspPostInit+0xe8>)
 8001bd2:	f000 fce3 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001be6:	2303      	movs	r3, #3
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480e      	ldr	r0, [pc, #56]	; (8001c2c <HAL_TIM_MspPostInit+0xec>)
 8001bf2:	f000 fcd3 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001bf6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	4807      	ldr	r0, [pc, #28]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001c14:	f000 fcc2 	bl	800259c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40010400 	.word	0x40010400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020800 	.word	0x40020800

08001c34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <MX_USART2_UART_Init+0x50>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	f002 fa14 	bl	8004098 <HAL_UART_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c76:	f7ff fccf 	bl	8001618 <Error_Handler>
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000228 	.word	0x20000228
 8001c84:	40004400 	.word	0x40004400

08001c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_UART_MspInit+0x84>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12b      	bne.n	8001d02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_UART_MspInit+0x88>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_UART_MspInit+0x88>)
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_UART_MspInit+0x88>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_UART_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <HAL_UART_MspInit+0x88>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_UART_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_UART_MspInit+0x8c>)
 8001cfe:	f000 fc4d 	bl	800259c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40004400 	.word	0x40004400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000

08001d18 <Reset_Handler>:
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopFillZerobss+0x14>
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	e003      	b.n	8001d28 <LoopCopyDataInit>

08001d20 <CopyDataInit>:
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <LoopFillZerobss+0x18>)
 8001d22:	585b      	ldr	r3, [r3, r1]
 8001d24:	5043      	str	r3, [r0, r1]
 8001d26:	3104      	adds	r1, #4

08001d28 <LoopCopyDataInit>:
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <LoopFillZerobss+0x1c>)
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LoopFillZerobss+0x20>)
 8001d2c:	1842      	adds	r2, r0, r1
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d3f6      	bcc.n	8001d20 <CopyDataInit>
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <LoopFillZerobss+0x24>)
 8001d34:	e002      	b.n	8001d3c <LoopFillZerobss>

08001d36 <FillZerobss>:
 8001d36:	2300      	movs	r3, #0
 8001d38:	f842 3b04 	str.w	r3, [r2], #4

08001d3c <LoopFillZerobss>:
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <LoopFillZerobss+0x28>)
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3f9      	bcc.n	8001d36 <FillZerobss>
 8001d42:	f7ff fd6d 	bl	8001820 <SystemInit>
 8001d46:	f002 fe59 	bl	80049fc <__libc_init_array>
 8001d4a:	f7ff fbb3 	bl	80014b4 <main>
 8001d4e:	4770      	bx	lr
 8001d50:	20020000 	.word	0x20020000
 8001d54:	080059f0 	.word	0x080059f0
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000070 	.word	0x20000070
 8001d60:	20000070 	.word	0x20000070
 8001d64:	20000270 	.word	0x20000270

08001d68 <ADC_IRQHandler>:
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 fbbf 	bl	8002518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7ff fc42 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fbd7 	bl	8002582 <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 fb9f 	bl	800252e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000268 	.word	0x20000268

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000268 	.word	0x20000268

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_Delay+0x40>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000008 	.word	0x20000008

08001e94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e033      	b.n	8001f12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff f890 	bl	8000fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eda:	f023 0302 	bic.w	r3, r3, #2
 8001ede:	f043 0202 	orr.w	r2, r3, #2
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f94a 	bl	8002180 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f023 0303 	bic.w	r3, r3, #3
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
 8001f02:	e001      	b.n	8001f08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x1c>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e113      	b.n	8002160 <HAL_ADC_ConfigChannel+0x244>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b09      	cmp	r3, #9
 8001f46:	d925      	bls.n	8001f94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68d9      	ldr	r1, [r3, #12]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b1e      	subs	r3, #30
 8001f5e:	2207      	movs	r2, #7
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43da      	mvns	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68d9      	ldr	r1, [r3, #12]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4603      	mov	r3, r0
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4403      	add	r3, r0
 8001f86:	3b1e      	subs	r3, #30
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	e022      	b.n	8001fda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6919      	ldr	r1, [r3, #16]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	2207      	movs	r2, #7
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6919      	ldr	r1, [r3, #16]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4618      	mov	r0, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4403      	add	r3, r0
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d824      	bhi.n	800202c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b05      	subs	r3, #5
 8001ff4:	221f      	movs	r2, #31
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	400a      	ands	r2, r1
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	4618      	mov	r0, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	3b05      	subs	r3, #5
 800201e:	fa00 f203 	lsl.w	r2, r0, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	635a      	str	r2, [r3, #52]	; 0x34
 800202a:	e04c      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b0c      	cmp	r3, #12
 8002032:	d824      	bhi.n	800207e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b23      	subs	r3, #35	; 0x23
 8002046:	221f      	movs	r2, #31
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43da      	mvns	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	400a      	ands	r2, r1
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	3b23      	subs	r3, #35	; 0x23
 8002070:	fa00 f203 	lsl.w	r2, r0, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
 800207c:	e023      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3b41      	subs	r3, #65	; 0x41
 8002090:	221f      	movs	r2, #31
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	400a      	ands	r2, r1
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	3b41      	subs	r3, #65	; 0x41
 80020ba:	fa00 f203 	lsl.w	r2, r0, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_ADC_ConfigChannel+0x250>)
 80020c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a28      	ldr	r2, [pc, #160]	; (8002170 <HAL_ADC_ConfigChannel+0x254>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d10f      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1d8>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b12      	cmp	r3, #18
 80020da:	d10b      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <HAL_ADC_ConfigChannel+0x254>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12b      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x23a>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_ADC_ConfigChannel+0x258>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x1f4>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b11      	cmp	r3, #17
 800210e:	d122      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_ADC_ConfigChannel+0x258>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d111      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_ADC_ConfigChannel+0x25c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a11      	ldr	r2, [pc, #68]	; (800217c <HAL_ADC_ConfigChannel+0x260>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	0c9a      	lsrs	r2, r3, #18
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002148:	e002      	b.n	8002150 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3b01      	subs	r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f9      	bne.n	800214a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40012300 	.word	0x40012300
 8002170:	40012000 	.word	0x40012000
 8002174:	10000012 	.word	0x10000012
 8002178:	20000000 	.word	0x20000000
 800217c:	431bde83 	.word	0x431bde83

08002180 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002188:	4b79      	ldr	r3, [pc, #484]	; (8002370 <ADC_Init+0x1f0>)
 800218a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	021a      	lsls	r2, r3, #8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	4a58      	ldr	r2, [pc, #352]	; (8002374 <ADC_Init+0x1f4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d022      	beq.n	800225e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002226:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e00f      	b.n	800227e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800226c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0202 	bic.w	r2, r2, #2
 800228c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6899      	ldr	r1, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7e1b      	ldrb	r3, [r3, #24]
 8002298:	005a      	lsls	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	3b01      	subs	r3, #1
 80022d8:	035a      	lsls	r2, r3, #13
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	e007      	b.n	80022f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	3b01      	subs	r3, #1
 8002310:	051a      	lsls	r2, r3, #20
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6899      	ldr	r1, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002336:	025a      	lsls	r2, r3, #9
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6899      	ldr	r1, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	029a      	lsls	r2, r3, #10
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40012300 	.word	0x40012300
 8002374:	0f000001 	.word	0x0f000001

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e4:	d301      	bcc.n	80024ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <SysTick_Config+0x40>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f2:	210f      	movs	r1, #15
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f7ff ff8e 	bl	8002418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <SysTick_Config+0x40>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SysTick_Config+0x40>)
 8002504:	2207      	movs	r2, #7
 8002506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	e000e010 	.word	0xe000e010

08002518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff29 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002540:	f7ff ff3e 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f7ff ff8e 	bl	800246c <NVIC_EncodePriority>
 8002550:	4602      	mov	r2, r0
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff5d 	bl	8002418 <__NVIC_SetPriority>
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff31 	bl	80023dc <__NVIC_EnableIRQ>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffa2 	bl	80024d4 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e165      	b.n	8002884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b8:	2201      	movs	r2, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	f040 8154 	bne.w	800287e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d00b      	beq.n	80025f6 <HAL_GPIO_Init+0x5a>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d007      	beq.n	80025f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ea:	2b11      	cmp	r3, #17
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b12      	cmp	r3, #18
 80025f4:	d130      	bne.n	8002658 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 0201 	and.w	r2, r3, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0xfc>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b12      	cmp	r3, #18
 8002696:	d123      	bne.n	80026e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	08da      	lsrs	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3208      	adds	r2, #8
 80026a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	220f      	movs	r2, #15
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	08da      	lsrs	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	69b9      	ldr	r1, [r7, #24]
 80026dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0203 	and.w	r2, r3, #3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80ae 	beq.w	800287e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_GPIO_Init+0x2fc>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a5b      	ldr	r2, [pc, #364]	; (8002898 <HAL_GPIO_Init+0x2fc>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_GPIO_Init+0x2fc>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800273e:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_GPIO_Init+0x300>)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	220f      	movs	r2, #15
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4e      	ldr	r2, [pc, #312]	; (80028a0 <HAL_GPIO_Init+0x304>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d025      	beq.n	80027b6 <HAL_GPIO_Init+0x21a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4d      	ldr	r2, [pc, #308]	; (80028a4 <HAL_GPIO_Init+0x308>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01f      	beq.n	80027b2 <HAL_GPIO_Init+0x216>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <HAL_GPIO_Init+0x30c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d019      	beq.n	80027ae <HAL_GPIO_Init+0x212>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_GPIO_Init+0x310>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_GPIO_Init+0x20e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_GPIO_Init+0x314>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00d      	beq.n	80027a6 <HAL_GPIO_Init+0x20a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a49      	ldr	r2, [pc, #292]	; (80028b4 <HAL_GPIO_Init+0x318>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <HAL_GPIO_Init+0x206>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a48      	ldr	r2, [pc, #288]	; (80028b8 <HAL_GPIO_Init+0x31c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_GPIO_Init+0x202>
 800279a:	2306      	movs	r3, #6
 800279c:	e00c      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 800279e:	2307      	movs	r3, #7
 80027a0:	e00a      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027a2:	2305      	movs	r3, #5
 80027a4:	e008      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e004      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e002      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027b6:	2300      	movs	r3, #0
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f002 0203 	and.w	r2, r2, #3
 80027be:	0092      	lsls	r2, r2, #2
 80027c0:	4093      	lsls	r3, r2
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c8:	4934      	ldr	r1, [pc, #208]	; (800289c <HAL_GPIO_Init+0x300>)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3302      	adds	r3, #2
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_GPIO_Init+0x320>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027fa:	4a30      	ldr	r2, [pc, #192]	; (80028bc <HAL_GPIO_Init+0x320>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002800:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_GPIO_Init+0x320>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002824:	4a25      	ldr	r2, [pc, #148]	; (80028bc <HAL_GPIO_Init+0x320>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_GPIO_Init+0x320>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_GPIO_Init+0x320>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_GPIO_Init+0x320>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002878:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_GPIO_Init+0x320>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3301      	adds	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	f67f ae96 	bls.w	80025b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800288c:	bf00      	nop
 800288e:	3724      	adds	r7, #36	; 0x24
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40023800 	.word	0x40023800
 800289c:	40013800 	.word	0x40013800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40020c00 	.word	0x40020c00
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40021400 	.word	0x40021400
 80028b8:	40021800 	.word	0x40021800
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fdb8 	bl	8001488 <HAL_GPIO_EXTI_Callback>
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0cc      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b68      	ldr	r3, [pc, #416]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d90c      	bls.n	8002960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800299a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d044      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d119      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e067      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4934      	ldr	r1, [pc, #208]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7ff fa10 	bl	8001e38 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7ff fa0c 	bl	8001e38 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e04f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d20c      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f855 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f970 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023c00 	.word	0x40023c00
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08005930 	.word	0x08005930
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20000004 	.word	0x20000004

08002af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff0 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b10:	4601      	mov	r1, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0a9b      	lsrs	r3, r3, #10
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	08005940 	.word	0x08005940

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b34:	f7ff ffdc 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b38:	4601      	mov	r1, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	0b5b      	lsrs	r3, r3, #13
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	08005940 	.word	0x08005940

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b72:	4bc6      	ldr	r3, [pc, #792]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	f200 817e 	bhi.w	8002e7c <HAL_RCC_GetSysClockFreq+0x324>
 8002b80:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <HAL_RCC_GetSysClockFreq+0x30>)
 8002b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b86:	bf00      	nop
 8002b88:	08002bbd 	.word	0x08002bbd
 8002b8c:	08002e7d 	.word	0x08002e7d
 8002b90:	08002e7d 	.word	0x08002e7d
 8002b94:	08002e7d 	.word	0x08002e7d
 8002b98:	08002bc3 	.word	0x08002bc3
 8002b9c:	08002e7d 	.word	0x08002e7d
 8002ba0:	08002e7d 	.word	0x08002e7d
 8002ba4:	08002e7d 	.word	0x08002e7d
 8002ba8:	08002bc9 	.word	0x08002bc9
 8002bac:	08002e7d 	.word	0x08002e7d
 8002bb0:	08002e7d 	.word	0x08002e7d
 8002bb4:	08002e7d 	.word	0x08002e7d
 8002bb8:	08002d25 	.word	0x08002d25
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bbc:	4bb4      	ldr	r3, [pc, #720]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x338>)
 8002bbe:	613b      	str	r3, [r7, #16]
       break;
 8002bc0:	e15f      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc2:	4bb4      	ldr	r3, [pc, #720]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002bc4:	613b      	str	r3, [r7, #16]
      break;
 8002bc6:	e15c      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc8:	4bb0      	ldr	r3, [pc, #704]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd2:	4bae      	ldr	r3, [pc, #696]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d04a      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bde:	4bab      	ldr	r3, [pc, #684]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	f04f 0400 	mov.w	r4, #0
 8002be8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	ea03 0501 	and.w	r5, r3, r1
 8002bf4:	ea04 0602 	and.w	r6, r4, r2
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	4632      	mov	r2, r6
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	0154      	lsls	r4, r2, #5
 8002c06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c0a:	014b      	lsls	r3, r1, #5
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4622      	mov	r2, r4
 8002c10:	1b49      	subs	r1, r1, r5
 8002c12:	eb62 0206 	sbc.w	r2, r2, r6
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	f04f 0400 	mov.w	r4, #0
 8002c1e:	0194      	lsls	r4, r2, #6
 8002c20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c24:	018b      	lsls	r3, r1, #6
 8002c26:	1a5b      	subs	r3, r3, r1
 8002c28:	eb64 0402 	sbc.w	r4, r4, r2
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	00e2      	lsls	r2, r4, #3
 8002c36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c3a:	00d9      	lsls	r1, r3, #3
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4614      	mov	r4, r2
 8002c40:	195b      	adds	r3, r3, r5
 8002c42:	eb44 0406 	adc.w	r4, r4, r6
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	0262      	lsls	r2, r4, #9
 8002c50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c54:	0259      	lsls	r1, r3, #9
 8002c56:	460b      	mov	r3, r1
 8002c58:	4614      	mov	r4, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f04f 0400 	mov.w	r4, #0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	f7fd ff40 	bl	8000aec <__aeabi_uldivmod>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e049      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4b85      	ldr	r3, [pc, #532]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	ea03 0501 	and.w	r5, r3, r1
 8002c8a:	ea04 0602 	and.w	r6, r4, r2
 8002c8e:	4629      	mov	r1, r5
 8002c90:	4632      	mov	r2, r6
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	f04f 0400 	mov.w	r4, #0
 8002c9a:	0154      	lsls	r4, r2, #5
 8002c9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ca0:	014b      	lsls	r3, r1, #5
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	1b49      	subs	r1, r1, r5
 8002ca8:	eb62 0206 	sbc.w	r2, r2, r6
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f04f 0400 	mov.w	r4, #0
 8002cb4:	0194      	lsls	r4, r2, #6
 8002cb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cba:	018b      	lsls	r3, r1, #6
 8002cbc:	1a5b      	subs	r3, r3, r1
 8002cbe:	eb64 0402 	sbc.w	r4, r4, r2
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	00e2      	lsls	r2, r4, #3
 8002ccc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cd0:	00d9      	lsls	r1, r3, #3
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	195b      	adds	r3, r3, r5
 8002cd8:	eb44 0406 	adc.w	r4, r4, r6
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	02a2      	lsls	r2, r4, #10
 8002ce6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cea:	0299      	lsls	r1, r3, #10
 8002cec:	460b      	mov	r3, r1
 8002cee:	4614      	mov	r4, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f04f 0400 	mov.w	r4, #0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	f7fd fef5 	bl	8000aec <__aeabi_uldivmod>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d08:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	3301      	adds	r3, #1
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	613b      	str	r3, [r7, #16]
      break;
 8002d22:	e0ae      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d24:	4b59      	ldr	r3, [pc, #356]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d2c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2e:	4b57      	ldr	r3, [pc, #348]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d04a      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	4b54      	ldr	r3, [pc, #336]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	f04f 0400 	mov.w	r4, #0
 8002d44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	ea03 0501 	and.w	r5, r3, r1
 8002d50:	ea04 0602 	and.w	r6, r4, r2
 8002d54:	4629      	mov	r1, r5
 8002d56:	4632      	mov	r2, r6
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	f04f 0400 	mov.w	r4, #0
 8002d60:	0154      	lsls	r4, r2, #5
 8002d62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d66:	014b      	lsls	r3, r1, #5
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	1b49      	subs	r1, r1, r5
 8002d6e:	eb62 0206 	sbc.w	r2, r2, r6
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	f04f 0400 	mov.w	r4, #0
 8002d7a:	0194      	lsls	r4, r2, #6
 8002d7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d80:	018b      	lsls	r3, r1, #6
 8002d82:	1a5b      	subs	r3, r3, r1
 8002d84:	eb64 0402 	sbc.w	r4, r4, r2
 8002d88:	f04f 0100 	mov.w	r1, #0
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	00e2      	lsls	r2, r4, #3
 8002d92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d96:	00d9      	lsls	r1, r3, #3
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4614      	mov	r4, r2
 8002d9c:	195b      	adds	r3, r3, r5
 8002d9e:	eb44 0406 	adc.w	r4, r4, r6
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	0262      	lsls	r2, r4, #9
 8002dac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002db0:	0259      	lsls	r1, r3, #9
 8002db2:	460b      	mov	r3, r1
 8002db4:	4614      	mov	r4, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	4621      	mov	r1, r4
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f04f 0400 	mov.w	r4, #0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	f7fd fe92 	bl	8000aec <__aeabi_uldivmod>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e049      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd0:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	ea03 0501 	and.w	r5, r3, r1
 8002de6:	ea04 0602 	and.w	r6, r4, r2
 8002dea:	4629      	mov	r1, r5
 8002dec:	4632      	mov	r2, r6
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	f04f 0400 	mov.w	r4, #0
 8002df6:	0154      	lsls	r4, r2, #5
 8002df8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dfc:	014b      	lsls	r3, r1, #5
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4622      	mov	r2, r4
 8002e02:	1b49      	subs	r1, r1, r5
 8002e04:	eb62 0206 	sbc.w	r2, r2, r6
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	f04f 0400 	mov.w	r4, #0
 8002e10:	0194      	lsls	r4, r2, #6
 8002e12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	1a5b      	subs	r3, r3, r1
 8002e1a:	eb64 0402 	sbc.w	r4, r4, r2
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	00e2      	lsls	r2, r4, #3
 8002e28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e2c:	00d9      	lsls	r1, r3, #3
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	195b      	adds	r3, r3, r5
 8002e34:	eb44 0406 	adc.w	r4, r4, r6
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	02a2      	lsls	r2, r4, #10
 8002e42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e46:	0299      	lsls	r1, r3, #10
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4614      	mov	r4, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	4621      	mov	r1, r4
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f04f 0400 	mov.w	r4, #0
 8002e56:	461a      	mov	r2, r3
 8002e58:	4623      	mov	r3, r4
 8002e5a:	f7fd fe47 	bl	8000aec <__aeabi_uldivmod>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	460c      	mov	r4, r1
 8002e62:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0f1b      	lsrs	r3, r3, #28
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	613b      	str	r3, [r7, #16]
      break;
 8002e7a:	e002      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x338>)
 8002e7e:	613b      	str	r3, [r7, #16]
      break;
 8002e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e82:	693b      	ldr	r3, [r7, #16]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200

08002e98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8083 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eb2:	4b95      	ldr	r3, [pc, #596]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d019      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ebe:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d106      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eca:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed8:	4b8b      	ldr	r3, [pc, #556]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	d112      	bne.n	8002f0a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee4:	4b88      	ldr	r3, [pc, #544]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef2:	4b85      	ldr	r3, [pc, #532]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d05b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x11e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d157      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e216      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x8a>
 8002f14:	4b7c      	ldr	r3, [pc, #496]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7b      	ldr	r2, [pc, #492]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e01d      	b.n	8002f5e <HAL_RCC_OscConfig+0xc6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2a:	d10c      	bne.n	8002f46 <HAL_RCC_OscConfig+0xae>
 8002f2c:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a75      	ldr	r2, [pc, #468]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b73      	ldr	r3, [pc, #460]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a72      	ldr	r2, [pc, #456]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e00b      	b.n	8002f5e <HAL_RCC_OscConfig+0xc6>
 8002f46:	4b70      	ldr	r3, [pc, #448]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6f      	ldr	r2, [pc, #444]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b6d      	ldr	r3, [pc, #436]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6c      	ldr	r2, [pc, #432]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d013      	beq.n	8002f8e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fe ff67 	bl	8001e38 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6e:	f7fe ff63 	bl	8001e38 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e1db      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f80:	4b61      	ldr	r3, [pc, #388]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0xd6>
 8002f8c:	e014      	b.n	8002fb8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe ff53 	bl	8001e38 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f96:	f7fe ff4f 	bl	8001e38 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b64      	cmp	r3, #100	; 0x64
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e1c7      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa8:	4b57      	ldr	r3, [pc, #348]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0xfe>
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d06f      	beq.n	80030a4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fc4:	4b50      	ldr	r3, [pc, #320]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d017      	beq.n	8003000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fdc:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00b      	beq.n	8003000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe8:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d11c      	bne.n	800302e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff4:	4b44      	ldr	r3, [pc, #272]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003000:	4b41      	ldr	r3, [pc, #260]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_OscConfig+0x180>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e18f      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4938      	ldr	r1, [pc, #224]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302c:	e03a      	b.n	80030a4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d020      	beq.n	8003078 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003036:	4b35      	ldr	r3, [pc, #212]	; (800310c <HAL_RCC_OscConfig+0x274>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fefc 	bl	8001e38 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe fef8 	bl	8001e38 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e170      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4b29      	ldr	r3, [pc, #164]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4925      	ldr	r1, [pc, #148]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
 8003076:	e015      	b.n	80030a4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCC_OscConfig+0x274>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fedb 	bl	8001e38 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003086:	f7fe fed7 	bl	8001e38 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e14f      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d037      	beq.n	8003120 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d016      	beq.n	80030e6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_RCC_OscConfig+0x278>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fe febb 	bl	8001e38 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe feb7 	bl	8001e38 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e12f      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 80030da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x22e>
 80030e4:	e01c      	b.n	8003120 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_OscConfig+0x278>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ec:	f7fe fea4 	bl	8001e38 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f2:	e00f      	b.n	8003114 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f4:	f7fe fea0 	bl	8001e38 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d908      	bls.n	8003114 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e118      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	42470000 	.word	0x42470000
 8003110:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	4b8a      	ldr	r3, [pc, #552]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e9      	bne.n	80030f4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8097 	beq.w	800325c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b83      	ldr	r3, [pc, #524]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b7f      	ldr	r3, [pc, #508]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a7e      	ldr	r2, [pc, #504]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b7c      	ldr	r3, [pc, #496]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	4b79      	ldr	r3, [pc, #484]	; (8003344 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d118      	bne.n	800319c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316a:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_RCC_OscConfig+0x4ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a75      	ldr	r2, [pc, #468]	; (8003344 <HAL_RCC_OscConfig+0x4ac>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003176:	f7fe fe5f 	bl	8001e38 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317e:	f7fe fe5b 	bl	8001e38 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0d3      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <HAL_RCC_OscConfig+0x4ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x31a>
 80031a4:	4b66      	ldr	r3, [pc, #408]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x354>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x33c>
 80031ba:	4b61      	ldr	r3, [pc, #388]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a60      	ldr	r2, [pc, #384]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a5d      	ldr	r2, [pc, #372]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0x354>
 80031d4:	4b5a      	ldr	r3, [pc, #360]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4a59      	ldr	r2, [pc, #356]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	; 0x70
 80031e0:	4b57      	ldr	r3, [pc, #348]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	4a56      	ldr	r2, [pc, #344]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe fe20 	bl	8001e38 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe fe1c 	bl	8001e38 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e092      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	4b4b      	ldr	r3, [pc, #300]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0ee      	beq.n	80031fc <HAL_RCC_OscConfig+0x364>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fe fe0a 	bl	8001e38 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fe fe06 	bl	8001e38 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e07c      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	4b40      	ldr	r3, [pc, #256]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ee      	bne.n	8003228 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	4a3a      	ldr	r2, [pc, #232]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d068      	beq.n	8003336 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b08      	cmp	r3, #8
 800326e:	d060      	beq.n	8003332 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d145      	bne.n	8003304 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b33      	ldr	r3, [pc, #204]	; (8003348 <HAL_RCC_OscConfig+0x4b0>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fe fddb 	bl	8001e38 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fdd7 	bl	8001e38 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e04f      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	019b      	lsls	r3, r3, #6
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	3b01      	subs	r3, #1
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	061b      	lsls	r3, r3, #24
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	071b      	lsls	r3, r3, #28
 80032d0:	491b      	ldr	r1, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <HAL_RCC_OscConfig+0x4b0>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fdac 	bl	8001e38 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fe fda8 	bl	8001e38 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e020      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x44c>
 8003302:	e018      	b.n	8003336 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x4b0>)
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe fd95 	bl	8001e38 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe fd91 	bl	8001e38 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e009      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x4a8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f0      	bne.n	8003312 <HAL_RCC_OscConfig+0x47a>
 8003330:	e001      	b.n	8003336 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	40007000 	.word	0x40007000
 8003348:	42470060 	.word	0x42470060

0800334c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e01d      	b.n	800339a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe fbc2 	bl	8001afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 faa6 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e01d      	b.n	80033f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f815 	bl	80033f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3304      	adds	r3, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f000 fa7b 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e083      	b.n	8003528 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7fe fb19 	bl	8001a6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003450:	f023 0307 	bic.w	r3, r3, #7
 8003454:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f000 fa3b 	bl	80038dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	4313      	orrs	r3, r2
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80034ac:	f023 030c 	bic.w	r3, r3, #12
 80034b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	4313      	orrs	r3, r2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	011a      	lsls	r2, r3, #4
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	031b      	lsls	r3, r3, #12
 80034dc:	4313      	orrs	r3, r2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80034ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80034f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4313      	orrs	r3, r2
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_TIM_Encoder_Start_IT+0x16>
 8003540:	2b04      	cmp	r3, #4
 8003542:	d010      	beq.n	8003566 <HAL_TIM_Encoder_Start_IT+0x36>
 8003544:	e01f      	b.n	8003586 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2201      	movs	r2, #1
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fcae 	bl	8003eb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0202 	orr.w	r2, r2, #2
 8003562:	60da      	str	r2, [r3, #12]
      break;
 8003564:	e02e      	b.n	80035c4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2201      	movs	r2, #1
 800356c:	2104      	movs	r1, #4
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fc9e 	bl	8003eb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0204 	orr.w	r2, r2, #4
 8003582:	60da      	str	r2, [r3, #12]
      break;
 8003584:	e01e      	b.n	80035c4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2201      	movs	r2, #1
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fc8e 	bl	8003eb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2201      	movs	r2, #1
 800359a:	2104      	movs	r1, #4
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fc87 	bl	8003eb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0202 	orr.w	r2, r2, #2
 80035b0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0204 	orr.w	r2, r2, #4
 80035c0:	60da      	str	r2, [r3, #12]
      break;
 80035c2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0b4      	b.n	8003764 <HAL_TIM_PWM_ConfigChannel+0x184>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	f200 809f 	bhi.w	8003750 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	0800364d 	.word	0x0800364d
 800361c:	08003751 	.word	0x08003751
 8003620:	08003751 	.word	0x08003751
 8003624:	08003751 	.word	0x08003751
 8003628:	0800368d 	.word	0x0800368d
 800362c:	08003751 	.word	0x08003751
 8003630:	08003751 	.word	0x08003751
 8003634:	08003751 	.word	0x08003751
 8003638:	080036cf 	.word	0x080036cf
 800363c:	08003751 	.word	0x08003751
 8003640:	08003751 	.word	0x08003751
 8003644:	08003751 	.word	0x08003751
 8003648:	0800370f 	.word	0x0800370f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f9e2 	bl	8003a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6999      	ldr	r1, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	619a      	str	r2, [r3, #24]
      break;
 800368a:	e062      	b.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fa32 	bl	8003afc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6999      	ldr	r1, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	021a      	lsls	r2, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]
      break;
 80036cc:	e041      	b.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fa87 	bl	8003be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0208 	orr.w	r2, r2, #8
 80036e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0204 	bic.w	r2, r2, #4
 80036f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	61da      	str	r2, [r3, #28]
      break;
 800370c:	e021      	b.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fadb 	bl	8003cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69d9      	ldr	r1, [r3, #28]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	021a      	lsls	r2, r3, #8
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	61da      	str	r2, [r3, #28]
      break;
 800374e:	e000      	b.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003750:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIM_ConfigClockSource+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e0a6      	b.n	80038d2 <HAL_TIM_ConfigClockSource+0x166>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d067      	beq.n	800388c <HAL_TIM_ConfigClockSource+0x120>
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d80b      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x6c>
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d073      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0x140>
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d802      	bhi.n	80037ce <HAL_TIM_ConfigClockSource+0x62>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d06f      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037cc:	e078      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d06c      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0x140>
 80037d2:	2b30      	cmp	r3, #48	; 0x30
 80037d4:	d06a      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037d6:	e073      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037d8:	2b70      	cmp	r3, #112	; 0x70
 80037da:	d00d      	beq.n	80037f8 <HAL_TIM_ConfigClockSource+0x8c>
 80037dc:	2b70      	cmp	r3, #112	; 0x70
 80037de:	d804      	bhi.n	80037ea <HAL_TIM_ConfigClockSource+0x7e>
 80037e0:	2b50      	cmp	r3, #80	; 0x50
 80037e2:	d033      	beq.n	800384c <HAL_TIM_ConfigClockSource+0xe0>
 80037e4:	2b60      	cmp	r3, #96	; 0x60
 80037e6:	d041      	beq.n	800386c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80037e8:	e06a      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ee:	d066      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x152>
 80037f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f4:	d017      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80037f6:	e063      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f000 fb32 	bl	8003e70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800381a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	609a      	str	r2, [r3, #8]
      break;
 8003824:	e04c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f000 fb1b 	bl	8003e70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003848:	609a      	str	r2, [r3, #8]
      break;
 800384a:	e039      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	6859      	ldr	r1, [r3, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	461a      	mov	r2, r3
 800385a:	f000 fa8f 	bl	8003d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2150      	movs	r1, #80	; 0x50
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fae8 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 800386a:	e029      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6859      	ldr	r1, [r3, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	461a      	mov	r2, r3
 800387a:	f000 faae 	bl	8003dda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2160      	movs	r1, #96	; 0x60
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fad8 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 800388a:	e019      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	461a      	mov	r2, r3
 800389a:	f000 fa6f 	bl	8003d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2140      	movs	r1, #64	; 0x40
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fac8 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 80038aa:	e009      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 fabf 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 80038bc:	e000      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80038be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a40      	ldr	r2, [pc, #256]	; (80039f0 <TIM_Base_SetConfig+0x114>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d00f      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a3d      	ldr	r2, [pc, #244]	; (80039f4 <TIM_Base_SetConfig+0x118>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a3c      	ldr	r2, [pc, #240]	; (80039f8 <TIM_Base_SetConfig+0x11c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a3b      	ldr	r2, [pc, #236]	; (80039fc <TIM_Base_SetConfig+0x120>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <TIM_Base_SetConfig+0x124>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a2f      	ldr	r2, [pc, #188]	; (80039f0 <TIM_Base_SetConfig+0x114>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d02b      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d027      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2c      	ldr	r2, [pc, #176]	; (80039f4 <TIM_Base_SetConfig+0x118>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d023      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2b      	ldr	r2, [pc, #172]	; (80039f8 <TIM_Base_SetConfig+0x11c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01f      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <TIM_Base_SetConfig+0x120>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01b      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a29      	ldr	r2, [pc, #164]	; (8003a00 <TIM_Base_SetConfig+0x124>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d017      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a28      	ldr	r2, [pc, #160]	; (8003a04 <TIM_Base_SetConfig+0x128>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <TIM_Base_SetConfig+0x12c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00f      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <TIM_Base_SetConfig+0x130>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <TIM_Base_SetConfig+0x134>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a24      	ldr	r2, [pc, #144]	; (8003a14 <TIM_Base_SetConfig+0x138>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a23      	ldr	r2, [pc, #140]	; (8003a18 <TIM_Base_SetConfig+0x13c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <TIM_Base_SetConfig+0x114>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_Base_SetConfig+0xf8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <TIM_Base_SetConfig+0x124>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d103      	bne.n	80039dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	615a      	str	r2, [r3, #20]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40000c00 	.word	0x40000c00
 8003a00:	40010400 	.word	0x40010400
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800
 8003a10:	40001800 	.word	0x40001800
 8003a14:	40001c00 	.word	0x40001c00
 8003a18:	40002000 	.word	0x40002000

08003a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0302 	bic.w	r3, r3, #2
 8003a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <TIM_OC1_SetConfig+0xd8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_OC1_SetConfig+0x64>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <TIM_OC1_SetConfig+0xdc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10c      	bne.n	8003a9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0308 	bic.w	r3, r3, #8
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <TIM_OC1_SetConfig+0xd8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <TIM_OC1_SetConfig+0x8e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <TIM_OC1_SetConfig+0xdc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d111      	bne.n	8003ace <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	621a      	str	r2, [r3, #32]
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40010400 	.word	0x40010400

08003afc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f023 0210 	bic.w	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 0320 	bic.w	r3, r3, #32
 8003b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a22      	ldr	r2, [pc, #136]	; (8003be0 <TIM_OC2_SetConfig+0xe4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC2_SetConfig+0x68>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <TIM_OC2_SetConfig+0xe8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d10d      	bne.n	8003b80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <TIM_OC2_SetConfig+0xe4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_OC2_SetConfig+0x94>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <TIM_OC2_SetConfig+0xe8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d113      	bne.n	8003bb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40010400 	.word	0x40010400

08003be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <TIM_OC3_SetConfig+0xe0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_OC3_SetConfig+0x66>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a20      	ldr	r2, [pc, #128]	; (8003ccc <TIM_OC3_SetConfig+0xe4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10d      	bne.n	8003c6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <TIM_OC3_SetConfig+0xe0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_OC3_SetConfig+0x92>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <TIM_OC3_SetConfig+0xe4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d113      	bne.n	8003ca2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40010400 	.word	0x40010400

08003cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	031b      	lsls	r3, r3, #12
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <TIM_OC4_SetConfig+0xa4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_OC4_SetConfig+0x68>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <TIM_OC4_SetConfig+0xa8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d109      	bne.n	8003d4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40010400 	.word	0x40010400

08003d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f023 0201 	bic.w	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 030a 	bic.w	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f023 0210 	bic.w	r2, r3, #16
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	031b      	lsls	r3, r3, #12
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f043 0307 	orr.w	r3, r3, #7
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	609a      	str	r2, [r3, #8]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a1a      	ldr	r2, [r3, #32]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1a      	ldr	r2, [r3, #32]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e05a      	b.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d022      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f60:	d01d      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a17      	ldr	r2, [pc, #92]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40010400 	.word	0x40010400
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40001800 	.word	0x40001800

08003ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800400c:	2302      	movs	r3, #2
 800400e:	e03d      	b.n	800408c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e03f      	b.n	800412a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd fde2 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	; 0x24
 80040c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f90b 	bl	80042f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b088      	sub	sp, #32
 8004136:	af02      	add	r7, sp, #8
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4613      	mov	r3, r2
 8004140:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b20      	cmp	r3, #32
 8004150:	f040 8083 	bne.w	800425a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_UART_Transmit+0x2e>
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e07b      	b.n	800425c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_UART_Transmit+0x40>
 800416e:	2302      	movs	r3, #2
 8004170:	e074      	b.n	800425c <HAL_UART_Transmit+0x12a>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2221      	movs	r2, #33	; 0x21
 8004184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004188:	f7fd fe56 	bl	8001e38 <HAL_GetTick>
 800418c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80041a2:	e042      	b.n	800422a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ba:	d122      	bne.n	8004202 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	2180      	movs	r1, #128	; 0x80
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f84c 	bl	8004264 <UART_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e042      	b.n	800425c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3302      	adds	r3, #2
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	e017      	b.n	800422a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	e013      	b.n	800422a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2180      	movs	r1, #128	; 0x80
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f829 	bl	8004264 <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e01f      	b.n	800425c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	60ba      	str	r2, [r7, #8]
 8004222:	781a      	ldrb	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1b7      	bne.n	80041a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2200      	movs	r2, #0
 800423c:	2140      	movs	r1, #64	; 0x40
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f810 	bl	8004264 <UART_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e006      	b.n	800425c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e000      	b.n	800425c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
  }
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004274:	e02c      	b.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d028      	beq.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x30>
 8004284:	f7fd fdd8 	bl	8001e38 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	429a      	cmp	r2, r3
 8004292:	d21d      	bcs.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e00f      	b.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	429a      	cmp	r2, r3
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d0c3      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800433a:	f023 030c 	bic.w	r3, r3, #12
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	430b      	orrs	r3, r1
 8004346:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004366:	f040 818b 	bne.w	8004680 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4ac1      	ldr	r2, [pc, #772]	; (8004674 <UART_SetConfig+0x37c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d005      	beq.n	8004380 <UART_SetConfig+0x88>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4abf      	ldr	r2, [pc, #764]	; (8004678 <UART_SetConfig+0x380>)
 800437a:	4293      	cmp	r3, r2
 800437c:	f040 80bd 	bne.w	80044fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004380:	f7fe fbd6 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8004384:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	461d      	mov	r5, r3
 800438a:	f04f 0600 	mov.w	r6, #0
 800438e:	46a8      	mov	r8, r5
 8004390:	46b1      	mov	r9, r6
 8004392:	eb18 0308 	adds.w	r3, r8, r8
 8004396:	eb49 0409 	adc.w	r4, r9, r9
 800439a:	4698      	mov	r8, r3
 800439c:	46a1      	mov	r9, r4
 800439e:	eb18 0805 	adds.w	r8, r8, r5
 80043a2:	eb49 0906 	adc.w	r9, r9, r6
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043ba:	4688      	mov	r8, r1
 80043bc:	4691      	mov	r9, r2
 80043be:	eb18 0005 	adds.w	r0, r8, r5
 80043c2:	eb49 0106 	adc.w	r1, r9, r6
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	461d      	mov	r5, r3
 80043cc:	f04f 0600 	mov.w	r6, #0
 80043d0:	196b      	adds	r3, r5, r5
 80043d2:	eb46 0406 	adc.w	r4, r6, r6
 80043d6:	461a      	mov	r2, r3
 80043d8:	4623      	mov	r3, r4
 80043da:	f7fc fb87 	bl	8000aec <__aeabi_uldivmod>
 80043de:	4603      	mov	r3, r0
 80043e0:	460c      	mov	r4, r1
 80043e2:	461a      	mov	r2, r3
 80043e4:	4ba5      	ldr	r3, [pc, #660]	; (800467c <UART_SetConfig+0x384>)
 80043e6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	461d      	mov	r5, r3
 80043f4:	f04f 0600 	mov.w	r6, #0
 80043f8:	46a9      	mov	r9, r5
 80043fa:	46b2      	mov	sl, r6
 80043fc:	eb19 0309 	adds.w	r3, r9, r9
 8004400:	eb4a 040a 	adc.w	r4, sl, sl
 8004404:	4699      	mov	r9, r3
 8004406:	46a2      	mov	sl, r4
 8004408:	eb19 0905 	adds.w	r9, r9, r5
 800440c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800441c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004420:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004424:	4689      	mov	r9, r1
 8004426:	4692      	mov	sl, r2
 8004428:	eb19 0005 	adds.w	r0, r9, r5
 800442c:	eb4a 0106 	adc.w	r1, sl, r6
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	461d      	mov	r5, r3
 8004436:	f04f 0600 	mov.w	r6, #0
 800443a:	196b      	adds	r3, r5, r5
 800443c:	eb46 0406 	adc.w	r4, r6, r6
 8004440:	461a      	mov	r2, r3
 8004442:	4623      	mov	r3, r4
 8004444:	f7fc fb52 	bl	8000aec <__aeabi_uldivmod>
 8004448:	4603      	mov	r3, r0
 800444a:	460c      	mov	r4, r1
 800444c:	461a      	mov	r2, r3
 800444e:	4b8b      	ldr	r3, [pc, #556]	; (800467c <UART_SetConfig+0x384>)
 8004450:	fba3 1302 	umull	r1, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	2164      	movs	r1, #100	; 0x64
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	3332      	adds	r3, #50	; 0x32
 8004462:	4a86      	ldr	r2, [pc, #536]	; (800467c <UART_SetConfig+0x384>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004470:	4498      	add	r8, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	461d      	mov	r5, r3
 8004476:	f04f 0600 	mov.w	r6, #0
 800447a:	46a9      	mov	r9, r5
 800447c:	46b2      	mov	sl, r6
 800447e:	eb19 0309 	adds.w	r3, r9, r9
 8004482:	eb4a 040a 	adc.w	r4, sl, sl
 8004486:	4699      	mov	r9, r3
 8004488:	46a2      	mov	sl, r4
 800448a:	eb19 0905 	adds.w	r9, r9, r5
 800448e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044a6:	4689      	mov	r9, r1
 80044a8:	4692      	mov	sl, r2
 80044aa:	eb19 0005 	adds.w	r0, r9, r5
 80044ae:	eb4a 0106 	adc.w	r1, sl, r6
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	461d      	mov	r5, r3
 80044b8:	f04f 0600 	mov.w	r6, #0
 80044bc:	196b      	adds	r3, r5, r5
 80044be:	eb46 0406 	adc.w	r4, r6, r6
 80044c2:	461a      	mov	r2, r3
 80044c4:	4623      	mov	r3, r4
 80044c6:	f7fc fb11 	bl	8000aec <__aeabi_uldivmod>
 80044ca:	4603      	mov	r3, r0
 80044cc:	460c      	mov	r4, r1
 80044ce:	461a      	mov	r2, r3
 80044d0:	4b6a      	ldr	r3, [pc, #424]	; (800467c <UART_SetConfig+0x384>)
 80044d2:	fba3 1302 	umull	r1, r3, r3, r2
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	2164      	movs	r1, #100	; 0x64
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	3332      	adds	r3, #50	; 0x32
 80044e4:	4a65      	ldr	r2, [pc, #404]	; (800467c <UART_SetConfig+0x384>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	f003 0207 	and.w	r2, r3, #7
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4442      	add	r2, r8
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	e26f      	b.n	80049da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044fa:	f7fe fb05 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 80044fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	461d      	mov	r5, r3
 8004504:	f04f 0600 	mov.w	r6, #0
 8004508:	46a8      	mov	r8, r5
 800450a:	46b1      	mov	r9, r6
 800450c:	eb18 0308 	adds.w	r3, r8, r8
 8004510:	eb49 0409 	adc.w	r4, r9, r9
 8004514:	4698      	mov	r8, r3
 8004516:	46a1      	mov	r9, r4
 8004518:	eb18 0805 	adds.w	r8, r8, r5
 800451c:	eb49 0906 	adc.w	r9, r9, r6
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800452c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004530:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004534:	4688      	mov	r8, r1
 8004536:	4691      	mov	r9, r2
 8004538:	eb18 0005 	adds.w	r0, r8, r5
 800453c:	eb49 0106 	adc.w	r1, r9, r6
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	461d      	mov	r5, r3
 8004546:	f04f 0600 	mov.w	r6, #0
 800454a:	196b      	adds	r3, r5, r5
 800454c:	eb46 0406 	adc.w	r4, r6, r6
 8004550:	461a      	mov	r2, r3
 8004552:	4623      	mov	r3, r4
 8004554:	f7fc faca 	bl	8000aec <__aeabi_uldivmod>
 8004558:	4603      	mov	r3, r0
 800455a:	460c      	mov	r4, r1
 800455c:	461a      	mov	r2, r3
 800455e:	4b47      	ldr	r3, [pc, #284]	; (800467c <UART_SetConfig+0x384>)
 8004560:	fba3 2302 	umull	r2, r3, r3, r2
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	461d      	mov	r5, r3
 800456e:	f04f 0600 	mov.w	r6, #0
 8004572:	46a9      	mov	r9, r5
 8004574:	46b2      	mov	sl, r6
 8004576:	eb19 0309 	adds.w	r3, r9, r9
 800457a:	eb4a 040a 	adc.w	r4, sl, sl
 800457e:	4699      	mov	r9, r3
 8004580:	46a2      	mov	sl, r4
 8004582:	eb19 0905 	adds.w	r9, r9, r5
 8004586:	eb4a 0a06 	adc.w	sl, sl, r6
 800458a:	f04f 0100 	mov.w	r1, #0
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004596:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800459a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800459e:	4689      	mov	r9, r1
 80045a0:	4692      	mov	sl, r2
 80045a2:	eb19 0005 	adds.w	r0, r9, r5
 80045a6:	eb4a 0106 	adc.w	r1, sl, r6
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	461d      	mov	r5, r3
 80045b0:	f04f 0600 	mov.w	r6, #0
 80045b4:	196b      	adds	r3, r5, r5
 80045b6:	eb46 0406 	adc.w	r4, r6, r6
 80045ba:	461a      	mov	r2, r3
 80045bc:	4623      	mov	r3, r4
 80045be:	f7fc fa95 	bl	8000aec <__aeabi_uldivmod>
 80045c2:	4603      	mov	r3, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b2c      	ldr	r3, [pc, #176]	; (800467c <UART_SetConfig+0x384>)
 80045ca:	fba3 1302 	umull	r1, r3, r3, r2
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2164      	movs	r1, #100	; 0x64
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	3332      	adds	r3, #50	; 0x32
 80045dc:	4a27      	ldr	r2, [pc, #156]	; (800467c <UART_SetConfig+0x384>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045ea:	4498      	add	r8, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	461d      	mov	r5, r3
 80045f0:	f04f 0600 	mov.w	r6, #0
 80045f4:	46a9      	mov	r9, r5
 80045f6:	46b2      	mov	sl, r6
 80045f8:	eb19 0309 	adds.w	r3, r9, r9
 80045fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004600:	4699      	mov	r9, r3
 8004602:	46a2      	mov	sl, r4
 8004604:	eb19 0905 	adds.w	r9, r9, r5
 8004608:	eb4a 0a06 	adc.w	sl, sl, r6
 800460c:	f04f 0100 	mov.w	r1, #0
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800461c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004620:	4689      	mov	r9, r1
 8004622:	4692      	mov	sl, r2
 8004624:	eb19 0005 	adds.w	r0, r9, r5
 8004628:	eb4a 0106 	adc.w	r1, sl, r6
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	461d      	mov	r5, r3
 8004632:	f04f 0600 	mov.w	r6, #0
 8004636:	196b      	adds	r3, r5, r5
 8004638:	eb46 0406 	adc.w	r4, r6, r6
 800463c:	461a      	mov	r2, r3
 800463e:	4623      	mov	r3, r4
 8004640:	f7fc fa54 	bl	8000aec <__aeabi_uldivmod>
 8004644:	4603      	mov	r3, r0
 8004646:	460c      	mov	r4, r1
 8004648:	461a      	mov	r2, r3
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <UART_SetConfig+0x384>)
 800464c:	fba3 1302 	umull	r1, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2164      	movs	r1, #100	; 0x64
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	3332      	adds	r3, #50	; 0x32
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <UART_SetConfig+0x384>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	f003 0207 	and.w	r2, r3, #7
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4442      	add	r2, r8
 8004670:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004672:	e1b2      	b.n	80049da <UART_SetConfig+0x6e2>
 8004674:	40011000 	.word	0x40011000
 8004678:	40011400 	.word	0x40011400
 800467c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4ad7      	ldr	r2, [pc, #860]	; (80049e4 <UART_SetConfig+0x6ec>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d005      	beq.n	8004696 <UART_SetConfig+0x39e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4ad6      	ldr	r2, [pc, #856]	; (80049e8 <UART_SetConfig+0x6f0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	f040 80d1 	bne.w	8004838 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004696:	f7fe fa4b 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 800469a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	469a      	mov	sl, r3
 80046a0:	f04f 0b00 	mov.w	fp, #0
 80046a4:	46d0      	mov	r8, sl
 80046a6:	46d9      	mov	r9, fp
 80046a8:	eb18 0308 	adds.w	r3, r8, r8
 80046ac:	eb49 0409 	adc.w	r4, r9, r9
 80046b0:	4698      	mov	r8, r3
 80046b2:	46a1      	mov	r9, r4
 80046b4:	eb18 080a 	adds.w	r8, r8, sl
 80046b8:	eb49 090b 	adc.w	r9, r9, fp
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046d0:	4688      	mov	r8, r1
 80046d2:	4691      	mov	r9, r2
 80046d4:	eb1a 0508 	adds.w	r5, sl, r8
 80046d8:	eb4b 0609 	adc.w	r6, fp, r9
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4619      	mov	r1, r3
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	f04f 0400 	mov.w	r4, #0
 80046ee:	0094      	lsls	r4, r2, #2
 80046f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046f4:	008b      	lsls	r3, r1, #2
 80046f6:	461a      	mov	r2, r3
 80046f8:	4623      	mov	r3, r4
 80046fa:	4628      	mov	r0, r5
 80046fc:	4631      	mov	r1, r6
 80046fe:	f7fc f9f5 	bl	8000aec <__aeabi_uldivmod>
 8004702:	4603      	mov	r3, r0
 8004704:	460c      	mov	r4, r1
 8004706:	461a      	mov	r2, r3
 8004708:	4bb8      	ldr	r3, [pc, #736]	; (80049ec <UART_SetConfig+0x6f4>)
 800470a:	fba3 2302 	umull	r2, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	469b      	mov	fp, r3
 8004718:	f04f 0c00 	mov.w	ip, #0
 800471c:	46d9      	mov	r9, fp
 800471e:	46e2      	mov	sl, ip
 8004720:	eb19 0309 	adds.w	r3, r9, r9
 8004724:	eb4a 040a 	adc.w	r4, sl, sl
 8004728:	4699      	mov	r9, r3
 800472a:	46a2      	mov	sl, r4
 800472c:	eb19 090b 	adds.w	r9, r9, fp
 8004730:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004740:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004744:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004748:	4689      	mov	r9, r1
 800474a:	4692      	mov	sl, r2
 800474c:	eb1b 0509 	adds.w	r5, fp, r9
 8004750:	eb4c 060a 	adc.w	r6, ip, sl
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4619      	mov	r1, r3
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	f04f 0400 	mov.w	r4, #0
 8004766:	0094      	lsls	r4, r2, #2
 8004768:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800476c:	008b      	lsls	r3, r1, #2
 800476e:	461a      	mov	r2, r3
 8004770:	4623      	mov	r3, r4
 8004772:	4628      	mov	r0, r5
 8004774:	4631      	mov	r1, r6
 8004776:	f7fc f9b9 	bl	8000aec <__aeabi_uldivmod>
 800477a:	4603      	mov	r3, r0
 800477c:	460c      	mov	r4, r1
 800477e:	461a      	mov	r2, r3
 8004780:	4b9a      	ldr	r3, [pc, #616]	; (80049ec <UART_SetConfig+0x6f4>)
 8004782:	fba3 1302 	umull	r1, r3, r3, r2
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2164      	movs	r1, #100	; 0x64
 800478a:	fb01 f303 	mul.w	r3, r1, r3
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	3332      	adds	r3, #50	; 0x32
 8004794:	4a95      	ldr	r2, [pc, #596]	; (80049ec <UART_SetConfig+0x6f4>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a0:	4498      	add	r8, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	469b      	mov	fp, r3
 80047a6:	f04f 0c00 	mov.w	ip, #0
 80047aa:	46d9      	mov	r9, fp
 80047ac:	46e2      	mov	sl, ip
 80047ae:	eb19 0309 	adds.w	r3, r9, r9
 80047b2:	eb4a 040a 	adc.w	r4, sl, sl
 80047b6:	4699      	mov	r9, r3
 80047b8:	46a2      	mov	sl, r4
 80047ba:	eb19 090b 	adds.w	r9, r9, fp
 80047be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047d6:	4689      	mov	r9, r1
 80047d8:	4692      	mov	sl, r2
 80047da:	eb1b 0509 	adds.w	r5, fp, r9
 80047de:	eb4c 060a 	adc.w	r6, ip, sl
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4619      	mov	r1, r3
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	f04f 0400 	mov.w	r4, #0
 80047f4:	0094      	lsls	r4, r2, #2
 80047f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047fa:	008b      	lsls	r3, r1, #2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4623      	mov	r3, r4
 8004800:	4628      	mov	r0, r5
 8004802:	4631      	mov	r1, r6
 8004804:	f7fc f972 	bl	8000aec <__aeabi_uldivmod>
 8004808:	4603      	mov	r3, r0
 800480a:	460c      	mov	r4, r1
 800480c:	461a      	mov	r2, r3
 800480e:	4b77      	ldr	r3, [pc, #476]	; (80049ec <UART_SetConfig+0x6f4>)
 8004810:	fba3 1302 	umull	r1, r3, r3, r2
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	2164      	movs	r1, #100	; 0x64
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	3332      	adds	r3, #50	; 0x32
 8004822:	4a72      	ldr	r2, [pc, #456]	; (80049ec <UART_SetConfig+0x6f4>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f003 020f 	and.w	r2, r3, #15
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4442      	add	r2, r8
 8004834:	609a      	str	r2, [r3, #8]
 8004836:	e0d0      	b.n	80049da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004838:	f7fe f966 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 800483c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	469a      	mov	sl, r3
 8004842:	f04f 0b00 	mov.w	fp, #0
 8004846:	46d0      	mov	r8, sl
 8004848:	46d9      	mov	r9, fp
 800484a:	eb18 0308 	adds.w	r3, r8, r8
 800484e:	eb49 0409 	adc.w	r4, r9, r9
 8004852:	4698      	mov	r8, r3
 8004854:	46a1      	mov	r9, r4
 8004856:	eb18 080a 	adds.w	r8, r8, sl
 800485a:	eb49 090b 	adc.w	r9, r9, fp
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800486a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800486e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004872:	4688      	mov	r8, r1
 8004874:	4691      	mov	r9, r2
 8004876:	eb1a 0508 	adds.w	r5, sl, r8
 800487a:	eb4b 0609 	adc.w	r6, fp, r9
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4619      	mov	r1, r3
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	f04f 0400 	mov.w	r4, #0
 8004890:	0094      	lsls	r4, r2, #2
 8004892:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004896:	008b      	lsls	r3, r1, #2
 8004898:	461a      	mov	r2, r3
 800489a:	4623      	mov	r3, r4
 800489c:	4628      	mov	r0, r5
 800489e:	4631      	mov	r1, r6
 80048a0:	f7fc f924 	bl	8000aec <__aeabi_uldivmod>
 80048a4:	4603      	mov	r3, r0
 80048a6:	460c      	mov	r4, r1
 80048a8:	461a      	mov	r2, r3
 80048aa:	4b50      	ldr	r3, [pc, #320]	; (80049ec <UART_SetConfig+0x6f4>)
 80048ac:	fba3 2302 	umull	r2, r3, r3, r2
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	469b      	mov	fp, r3
 80048ba:	f04f 0c00 	mov.w	ip, #0
 80048be:	46d9      	mov	r9, fp
 80048c0:	46e2      	mov	sl, ip
 80048c2:	eb19 0309 	adds.w	r3, r9, r9
 80048c6:	eb4a 040a 	adc.w	r4, sl, sl
 80048ca:	4699      	mov	r9, r3
 80048cc:	46a2      	mov	sl, r4
 80048ce:	eb19 090b 	adds.w	r9, r9, fp
 80048d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048ea:	4689      	mov	r9, r1
 80048ec:	4692      	mov	sl, r2
 80048ee:	eb1b 0509 	adds.w	r5, fp, r9
 80048f2:	eb4c 060a 	adc.w	r6, ip, sl
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4619      	mov	r1, r3
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	f04f 0400 	mov.w	r4, #0
 8004908:	0094      	lsls	r4, r2, #2
 800490a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800490e:	008b      	lsls	r3, r1, #2
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	4628      	mov	r0, r5
 8004916:	4631      	mov	r1, r6
 8004918:	f7fc f8e8 	bl	8000aec <__aeabi_uldivmod>
 800491c:	4603      	mov	r3, r0
 800491e:	460c      	mov	r4, r1
 8004920:	461a      	mov	r2, r3
 8004922:	4b32      	ldr	r3, [pc, #200]	; (80049ec <UART_SetConfig+0x6f4>)
 8004924:	fba3 1302 	umull	r1, r3, r3, r2
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	2164      	movs	r1, #100	; 0x64
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	3332      	adds	r3, #50	; 0x32
 8004936:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <UART_SetConfig+0x6f4>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004942:	4498      	add	r8, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	469b      	mov	fp, r3
 8004948:	f04f 0c00 	mov.w	ip, #0
 800494c:	46d9      	mov	r9, fp
 800494e:	46e2      	mov	sl, ip
 8004950:	eb19 0309 	adds.w	r3, r9, r9
 8004954:	eb4a 040a 	adc.w	r4, sl, sl
 8004958:	4699      	mov	r9, r3
 800495a:	46a2      	mov	sl, r4
 800495c:	eb19 090b 	adds.w	r9, r9, fp
 8004960:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004964:	f04f 0100 	mov.w	r1, #0
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004970:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004978:	4689      	mov	r9, r1
 800497a:	4692      	mov	sl, r2
 800497c:	eb1b 0509 	adds.w	r5, fp, r9
 8004980:	eb4c 060a 	adc.w	r6, ip, sl
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4619      	mov	r1, r3
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	f04f 0400 	mov.w	r4, #0
 8004996:	0094      	lsls	r4, r2, #2
 8004998:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800499c:	008b      	lsls	r3, r1, #2
 800499e:	461a      	mov	r2, r3
 80049a0:	4623      	mov	r3, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	4631      	mov	r1, r6
 80049a6:	f7fc f8a1 	bl	8000aec <__aeabi_uldivmod>
 80049aa:	4603      	mov	r3, r0
 80049ac:	460c      	mov	r4, r1
 80049ae:	461a      	mov	r2, r3
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <UART_SetConfig+0x6f4>)
 80049b2:	fba3 1302 	umull	r1, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2164      	movs	r1, #100	; 0x64
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	3332      	adds	r3, #50	; 0x32
 80049c4:	4a09      	ldr	r2, [pc, #36]	; (80049ec <UART_SetConfig+0x6f4>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4442      	add	r2, r8
 80049d6:	609a      	str	r2, [r3, #8]
}
 80049d8:	e7ff      	b.n	80049da <UART_SetConfig+0x6e2>
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e4:	40011000 	.word	0x40011000
 80049e8:	40011400 	.word	0x40011400
 80049ec:	51eb851f 	.word	0x51eb851f

080049f0 <__errno>:
 80049f0:	4b01      	ldr	r3, [pc, #4]	; (80049f8 <__errno+0x8>)
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	2000000c 	.word	0x2000000c

080049fc <__libc_init_array>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	4e0d      	ldr	r6, [pc, #52]	; (8004a34 <__libc_init_array+0x38>)
 8004a00:	4c0d      	ldr	r4, [pc, #52]	; (8004a38 <__libc_init_array+0x3c>)
 8004a02:	1ba4      	subs	r4, r4, r6
 8004a04:	10a4      	asrs	r4, r4, #2
 8004a06:	2500      	movs	r5, #0
 8004a08:	42a5      	cmp	r5, r4
 8004a0a:	d109      	bne.n	8004a20 <__libc_init_array+0x24>
 8004a0c:	4e0b      	ldr	r6, [pc, #44]	; (8004a3c <__libc_init_array+0x40>)
 8004a0e:	4c0c      	ldr	r4, [pc, #48]	; (8004a40 <__libc_init_array+0x44>)
 8004a10:	f000 ff68 	bl	80058e4 <_init>
 8004a14:	1ba4      	subs	r4, r4, r6
 8004a16:	10a4      	asrs	r4, r4, #2
 8004a18:	2500      	movs	r5, #0
 8004a1a:	42a5      	cmp	r5, r4
 8004a1c:	d105      	bne.n	8004a2a <__libc_init_array+0x2e>
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a24:	4798      	blx	r3
 8004a26:	3501      	adds	r5, #1
 8004a28:	e7ee      	b.n	8004a08 <__libc_init_array+0xc>
 8004a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a2e:	4798      	blx	r3
 8004a30:	3501      	adds	r5, #1
 8004a32:	e7f2      	b.n	8004a1a <__libc_init_array+0x1e>
 8004a34:	080059e8 	.word	0x080059e8
 8004a38:	080059e8 	.word	0x080059e8
 8004a3c:	080059e8 	.word	0x080059e8
 8004a40:	080059ec 	.word	0x080059ec

08004a44 <memset>:
 8004a44:	4402      	add	r2, r0
 8004a46:	4603      	mov	r3, r0
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <memset+0xa>
 8004a4c:	4770      	bx	lr
 8004a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a52:	e7f9      	b.n	8004a48 <memset+0x4>

08004a54 <iprintf>:
 8004a54:	b40f      	push	{r0, r1, r2, r3}
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <iprintf+0x2c>)
 8004a58:	b513      	push	{r0, r1, r4, lr}
 8004a5a:	681c      	ldr	r4, [r3, #0]
 8004a5c:	b124      	cbz	r4, 8004a68 <iprintf+0x14>
 8004a5e:	69a3      	ldr	r3, [r4, #24]
 8004a60:	b913      	cbnz	r3, 8004a68 <iprintf+0x14>
 8004a62:	4620      	mov	r0, r4
 8004a64:	f000 fa22 	bl	8004eac <__sinit>
 8004a68:	ab05      	add	r3, sp, #20
 8004a6a:	9a04      	ldr	r2, [sp, #16]
 8004a6c:	68a1      	ldr	r1, [r4, #8]
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 fbdb 	bl	800522c <_vfiprintf_r>
 8004a76:	b002      	add	sp, #8
 8004a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a7c:	b004      	add	sp, #16
 8004a7e:	4770      	bx	lr
 8004a80:	2000000c 	.word	0x2000000c

08004a84 <_puts_r>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	460e      	mov	r6, r1
 8004a88:	4605      	mov	r5, r0
 8004a8a:	b118      	cbz	r0, 8004a94 <_puts_r+0x10>
 8004a8c:	6983      	ldr	r3, [r0, #24]
 8004a8e:	b90b      	cbnz	r3, 8004a94 <_puts_r+0x10>
 8004a90:	f000 fa0c 	bl	8004eac <__sinit>
 8004a94:	69ab      	ldr	r3, [r5, #24]
 8004a96:	68ac      	ldr	r4, [r5, #8]
 8004a98:	b913      	cbnz	r3, 8004aa0 <_puts_r+0x1c>
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 fa06 	bl	8004eac <__sinit>
 8004aa0:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <_puts_r+0xac>)
 8004aa2:	429c      	cmp	r4, r3
 8004aa4:	d117      	bne.n	8004ad6 <_puts_r+0x52>
 8004aa6:	686c      	ldr	r4, [r5, #4]
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	071b      	lsls	r3, r3, #28
 8004aac:	d51d      	bpl.n	8004aea <_puts_r+0x66>
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	b1db      	cbz	r3, 8004aea <_puts_r+0x66>
 8004ab2:	3e01      	subs	r6, #1
 8004ab4:	68a3      	ldr	r3, [r4, #8]
 8004ab6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60a3      	str	r3, [r4, #8]
 8004abe:	b9e9      	cbnz	r1, 8004afc <_puts_r+0x78>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	da2e      	bge.n	8004b22 <_puts_r+0x9e>
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	210a      	movs	r1, #10
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f000 f83f 	bl	8004b4c <__swbuf_r>
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d011      	beq.n	8004af6 <_puts_r+0x72>
 8004ad2:	200a      	movs	r0, #10
 8004ad4:	e011      	b.n	8004afa <_puts_r+0x76>
 8004ad6:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <_puts_r+0xb0>)
 8004ad8:	429c      	cmp	r4, r3
 8004ada:	d101      	bne.n	8004ae0 <_puts_r+0x5c>
 8004adc:	68ac      	ldr	r4, [r5, #8]
 8004ade:	e7e3      	b.n	8004aa8 <_puts_r+0x24>
 8004ae0:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <_puts_r+0xb4>)
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	bf08      	it	eq
 8004ae6:	68ec      	ldreq	r4, [r5, #12]
 8004ae8:	e7de      	b.n	8004aa8 <_puts_r+0x24>
 8004aea:	4621      	mov	r1, r4
 8004aec:	4628      	mov	r0, r5
 8004aee:	f000 f87f 	bl	8004bf0 <__swsetup_r>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d0dd      	beq.n	8004ab2 <_puts_r+0x2e>
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	da04      	bge.n	8004b0a <_puts_r+0x86>
 8004b00:	69a2      	ldr	r2, [r4, #24]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	dc06      	bgt.n	8004b14 <_puts_r+0x90>
 8004b06:	290a      	cmp	r1, #10
 8004b08:	d004      	beq.n	8004b14 <_puts_r+0x90>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	6022      	str	r2, [r4, #0]
 8004b10:	7019      	strb	r1, [r3, #0]
 8004b12:	e7cf      	b.n	8004ab4 <_puts_r+0x30>
 8004b14:	4622      	mov	r2, r4
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 f818 	bl	8004b4c <__swbuf_r>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d1c9      	bne.n	8004ab4 <_puts_r+0x30>
 8004b20:	e7e9      	b.n	8004af6 <_puts_r+0x72>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	200a      	movs	r0, #10
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	6022      	str	r2, [r4, #0]
 8004b2a:	7018      	strb	r0, [r3, #0]
 8004b2c:	e7e5      	b.n	8004afa <_puts_r+0x76>
 8004b2e:	bf00      	nop
 8004b30:	0800596c 	.word	0x0800596c
 8004b34:	0800598c 	.word	0x0800598c
 8004b38:	0800594c 	.word	0x0800594c

08004b3c <puts>:
 8004b3c:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <puts+0xc>)
 8004b3e:	4601      	mov	r1, r0
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	f7ff bf9f 	b.w	8004a84 <_puts_r>
 8004b46:	bf00      	nop
 8004b48:	2000000c 	.word	0x2000000c

08004b4c <__swbuf_r>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	460e      	mov	r6, r1
 8004b50:	4614      	mov	r4, r2
 8004b52:	4605      	mov	r5, r0
 8004b54:	b118      	cbz	r0, 8004b5e <__swbuf_r+0x12>
 8004b56:	6983      	ldr	r3, [r0, #24]
 8004b58:	b90b      	cbnz	r3, 8004b5e <__swbuf_r+0x12>
 8004b5a:	f000 f9a7 	bl	8004eac <__sinit>
 8004b5e:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <__swbuf_r+0x98>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d12a      	bne.n	8004bba <__swbuf_r+0x6e>
 8004b64:	686c      	ldr	r4, [r5, #4]
 8004b66:	69a3      	ldr	r3, [r4, #24]
 8004b68:	60a3      	str	r3, [r4, #8]
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	071a      	lsls	r2, r3, #28
 8004b6e:	d52e      	bpl.n	8004bce <__swbuf_r+0x82>
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	b363      	cbz	r3, 8004bce <__swbuf_r+0x82>
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	6820      	ldr	r0, [r4, #0]
 8004b78:	1ac0      	subs	r0, r0, r3
 8004b7a:	6963      	ldr	r3, [r4, #20]
 8004b7c:	b2f6      	uxtb	r6, r6
 8004b7e:	4283      	cmp	r3, r0
 8004b80:	4637      	mov	r7, r6
 8004b82:	dc04      	bgt.n	8004b8e <__swbuf_r+0x42>
 8004b84:	4621      	mov	r1, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f926 	bl	8004dd8 <_fflush_r>
 8004b8c:	bb28      	cbnz	r0, 8004bda <__swbuf_r+0x8e>
 8004b8e:	68a3      	ldr	r3, [r4, #8]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	60a3      	str	r3, [r4, #8]
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	6022      	str	r2, [r4, #0]
 8004b9a:	701e      	strb	r6, [r3, #0]
 8004b9c:	6963      	ldr	r3, [r4, #20]
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	4283      	cmp	r3, r0
 8004ba2:	d004      	beq.n	8004bae <__swbuf_r+0x62>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	07db      	lsls	r3, r3, #31
 8004ba8:	d519      	bpl.n	8004bde <__swbuf_r+0x92>
 8004baa:	2e0a      	cmp	r6, #10
 8004bac:	d117      	bne.n	8004bde <__swbuf_r+0x92>
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f000 f911 	bl	8004dd8 <_fflush_r>
 8004bb6:	b190      	cbz	r0, 8004bde <__swbuf_r+0x92>
 8004bb8:	e00f      	b.n	8004bda <__swbuf_r+0x8e>
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <__swbuf_r+0x9c>)
 8004bbc:	429c      	cmp	r4, r3
 8004bbe:	d101      	bne.n	8004bc4 <__swbuf_r+0x78>
 8004bc0:	68ac      	ldr	r4, [r5, #8]
 8004bc2:	e7d0      	b.n	8004b66 <__swbuf_r+0x1a>
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <__swbuf_r+0xa0>)
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	bf08      	it	eq
 8004bca:	68ec      	ldreq	r4, [r5, #12]
 8004bcc:	e7cb      	b.n	8004b66 <__swbuf_r+0x1a>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f000 f80d 	bl	8004bf0 <__swsetup_r>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d0cc      	beq.n	8004b74 <__swbuf_r+0x28>
 8004bda:	f04f 37ff 	mov.w	r7, #4294967295
 8004bde:	4638      	mov	r0, r7
 8004be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	0800596c 	.word	0x0800596c
 8004be8:	0800598c 	.word	0x0800598c
 8004bec:	0800594c 	.word	0x0800594c

08004bf0 <__swsetup_r>:
 8004bf0:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <__swsetup_r+0xcc>)
 8004bf2:	b570      	push	{r4, r5, r6, lr}
 8004bf4:	681d      	ldr	r5, [r3, #0]
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	b125      	cbz	r5, 8004c06 <__swsetup_r+0x16>
 8004bfc:	69ab      	ldr	r3, [r5, #24]
 8004bfe:	b913      	cbnz	r3, 8004c06 <__swsetup_r+0x16>
 8004c00:	4628      	mov	r0, r5
 8004c02:	f000 f953 	bl	8004eac <__sinit>
 8004c06:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <__swsetup_r+0xd0>)
 8004c08:	429c      	cmp	r4, r3
 8004c0a:	d10f      	bne.n	8004c2c <__swsetup_r+0x3c>
 8004c0c:	686c      	ldr	r4, [r5, #4]
 8004c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	0715      	lsls	r5, r2, #28
 8004c16:	d42c      	bmi.n	8004c72 <__swsetup_r+0x82>
 8004c18:	06d0      	lsls	r0, r2, #27
 8004c1a:	d411      	bmi.n	8004c40 <__swsetup_r+0x50>
 8004c1c:	2209      	movs	r2, #9
 8004c1e:	6032      	str	r2, [r6, #0]
 8004c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2a:	e03e      	b.n	8004caa <__swsetup_r+0xba>
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <__swsetup_r+0xd4>)
 8004c2e:	429c      	cmp	r4, r3
 8004c30:	d101      	bne.n	8004c36 <__swsetup_r+0x46>
 8004c32:	68ac      	ldr	r4, [r5, #8]
 8004c34:	e7eb      	b.n	8004c0e <__swsetup_r+0x1e>
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <__swsetup_r+0xd8>)
 8004c38:	429c      	cmp	r4, r3
 8004c3a:	bf08      	it	eq
 8004c3c:	68ec      	ldreq	r4, [r5, #12]
 8004c3e:	e7e6      	b.n	8004c0e <__swsetup_r+0x1e>
 8004c40:	0751      	lsls	r1, r2, #29
 8004c42:	d512      	bpl.n	8004c6a <__swsetup_r+0x7a>
 8004c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c46:	b141      	cbz	r1, 8004c5a <__swsetup_r+0x6a>
 8004c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c4c:	4299      	cmp	r1, r3
 8004c4e:	d002      	beq.n	8004c56 <__swsetup_r+0x66>
 8004c50:	4630      	mov	r0, r6
 8004c52:	f000 fa19 	bl	8005088 <_free_r>
 8004c56:	2300      	movs	r3, #0
 8004c58:	6363      	str	r3, [r4, #52]	; 0x34
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c60:	81a3      	strh	r3, [r4, #12]
 8004c62:	2300      	movs	r3, #0
 8004c64:	6063      	str	r3, [r4, #4]
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f043 0308 	orr.w	r3, r3, #8
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	6923      	ldr	r3, [r4, #16]
 8004c74:	b94b      	cbnz	r3, 8004c8a <__swsetup_r+0x9a>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c80:	d003      	beq.n	8004c8a <__swsetup_r+0x9a>
 8004c82:	4621      	mov	r1, r4
 8004c84:	4630      	mov	r0, r6
 8004c86:	f000 f9bf 	bl	8005008 <__smakebuf_r>
 8004c8a:	89a2      	ldrh	r2, [r4, #12]
 8004c8c:	f012 0301 	ands.w	r3, r2, #1
 8004c90:	d00c      	beq.n	8004cac <__swsetup_r+0xbc>
 8004c92:	2300      	movs	r3, #0
 8004c94:	60a3      	str	r3, [r4, #8]
 8004c96:	6963      	ldr	r3, [r4, #20]
 8004c98:	425b      	negs	r3, r3
 8004c9a:	61a3      	str	r3, [r4, #24]
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	b953      	cbnz	r3, 8004cb6 <__swsetup_r+0xc6>
 8004ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004ca8:	d1ba      	bne.n	8004c20 <__swsetup_r+0x30>
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
 8004cac:	0792      	lsls	r2, r2, #30
 8004cae:	bf58      	it	pl
 8004cb0:	6963      	ldrpl	r3, [r4, #20]
 8004cb2:	60a3      	str	r3, [r4, #8]
 8004cb4:	e7f2      	b.n	8004c9c <__swsetup_r+0xac>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e7f7      	b.n	8004caa <__swsetup_r+0xba>
 8004cba:	bf00      	nop
 8004cbc:	2000000c 	.word	0x2000000c
 8004cc0:	0800596c 	.word	0x0800596c
 8004cc4:	0800598c 	.word	0x0800598c
 8004cc8:	0800594c 	.word	0x0800594c

08004ccc <__sflush_r>:
 8004ccc:	898a      	ldrh	r2, [r1, #12]
 8004cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	0710      	lsls	r0, r2, #28
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	d458      	bmi.n	8004d8c <__sflush_r+0xc0>
 8004cda:	684b      	ldr	r3, [r1, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	dc05      	bgt.n	8004cec <__sflush_r+0x20>
 8004ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dc02      	bgt.n	8004cec <__sflush_r+0x20>
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cee:	2e00      	cmp	r6, #0
 8004cf0:	d0f9      	beq.n	8004ce6 <__sflush_r+0x1a>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cf8:	682f      	ldr	r7, [r5, #0]
 8004cfa:	6a21      	ldr	r1, [r4, #32]
 8004cfc:	602b      	str	r3, [r5, #0]
 8004cfe:	d032      	beq.n	8004d66 <__sflush_r+0x9a>
 8004d00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	075a      	lsls	r2, r3, #29
 8004d06:	d505      	bpl.n	8004d14 <__sflush_r+0x48>
 8004d08:	6863      	ldr	r3, [r4, #4]
 8004d0a:	1ac0      	subs	r0, r0, r3
 8004d0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d0e:	b10b      	cbz	r3, 8004d14 <__sflush_r+0x48>
 8004d10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d12:	1ac0      	subs	r0, r0, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	4602      	mov	r2, r0
 8004d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d1a:	6a21      	ldr	r1, [r4, #32]
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b0      	blx	r6
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	d106      	bne.n	8004d34 <__sflush_r+0x68>
 8004d26:	6829      	ldr	r1, [r5, #0]
 8004d28:	291d      	cmp	r1, #29
 8004d2a:	d848      	bhi.n	8004dbe <__sflush_r+0xf2>
 8004d2c:	4a29      	ldr	r2, [pc, #164]	; (8004dd4 <__sflush_r+0x108>)
 8004d2e:	40ca      	lsrs	r2, r1
 8004d30:	07d6      	lsls	r6, r2, #31
 8004d32:	d544      	bpl.n	8004dbe <__sflush_r+0xf2>
 8004d34:	2200      	movs	r2, #0
 8004d36:	6062      	str	r2, [r4, #4]
 8004d38:	04d9      	lsls	r1, r3, #19
 8004d3a:	6922      	ldr	r2, [r4, #16]
 8004d3c:	6022      	str	r2, [r4, #0]
 8004d3e:	d504      	bpl.n	8004d4a <__sflush_r+0x7e>
 8004d40:	1c42      	adds	r2, r0, #1
 8004d42:	d101      	bne.n	8004d48 <__sflush_r+0x7c>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	b903      	cbnz	r3, 8004d4a <__sflush_r+0x7e>
 8004d48:	6560      	str	r0, [r4, #84]	; 0x54
 8004d4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d4c:	602f      	str	r7, [r5, #0]
 8004d4e:	2900      	cmp	r1, #0
 8004d50:	d0c9      	beq.n	8004ce6 <__sflush_r+0x1a>
 8004d52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d56:	4299      	cmp	r1, r3
 8004d58:	d002      	beq.n	8004d60 <__sflush_r+0x94>
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 f994 	bl	8005088 <_free_r>
 8004d60:	2000      	movs	r0, #0
 8004d62:	6360      	str	r0, [r4, #52]	; 0x34
 8004d64:	e7c0      	b.n	8004ce8 <__sflush_r+0x1c>
 8004d66:	2301      	movs	r3, #1
 8004d68:	4628      	mov	r0, r5
 8004d6a:	47b0      	blx	r6
 8004d6c:	1c41      	adds	r1, r0, #1
 8004d6e:	d1c8      	bne.n	8004d02 <__sflush_r+0x36>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0c5      	beq.n	8004d02 <__sflush_r+0x36>
 8004d76:	2b1d      	cmp	r3, #29
 8004d78:	d001      	beq.n	8004d7e <__sflush_r+0xb2>
 8004d7a:	2b16      	cmp	r3, #22
 8004d7c:	d101      	bne.n	8004d82 <__sflush_r+0xb6>
 8004d7e:	602f      	str	r7, [r5, #0]
 8004d80:	e7b1      	b.n	8004ce6 <__sflush_r+0x1a>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d88:	81a3      	strh	r3, [r4, #12]
 8004d8a:	e7ad      	b.n	8004ce8 <__sflush_r+0x1c>
 8004d8c:	690f      	ldr	r7, [r1, #16]
 8004d8e:	2f00      	cmp	r7, #0
 8004d90:	d0a9      	beq.n	8004ce6 <__sflush_r+0x1a>
 8004d92:	0793      	lsls	r3, r2, #30
 8004d94:	680e      	ldr	r6, [r1, #0]
 8004d96:	bf08      	it	eq
 8004d98:	694b      	ldreq	r3, [r1, #20]
 8004d9a:	600f      	str	r7, [r1, #0]
 8004d9c:	bf18      	it	ne
 8004d9e:	2300      	movne	r3, #0
 8004da0:	eba6 0807 	sub.w	r8, r6, r7
 8004da4:	608b      	str	r3, [r1, #8]
 8004da6:	f1b8 0f00 	cmp.w	r8, #0
 8004daa:	dd9c      	ble.n	8004ce6 <__sflush_r+0x1a>
 8004dac:	4643      	mov	r3, r8
 8004dae:	463a      	mov	r2, r7
 8004db0:	6a21      	ldr	r1, [r4, #32]
 8004db2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b0      	blx	r6
 8004db8:	2800      	cmp	r0, #0
 8004dba:	dc06      	bgt.n	8004dca <__sflush_r+0xfe>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	e78e      	b.n	8004ce8 <__sflush_r+0x1c>
 8004dca:	4407      	add	r7, r0
 8004dcc:	eba8 0800 	sub.w	r8, r8, r0
 8004dd0:	e7e9      	b.n	8004da6 <__sflush_r+0xda>
 8004dd2:	bf00      	nop
 8004dd4:	20400001 	.word	0x20400001

08004dd8 <_fflush_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	690b      	ldr	r3, [r1, #16]
 8004ddc:	4605      	mov	r5, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	b1db      	cbz	r3, 8004e1a <_fflush_r+0x42>
 8004de2:	b118      	cbz	r0, 8004dec <_fflush_r+0x14>
 8004de4:	6983      	ldr	r3, [r0, #24]
 8004de6:	b90b      	cbnz	r3, 8004dec <_fflush_r+0x14>
 8004de8:	f000 f860 	bl	8004eac <__sinit>
 8004dec:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <_fflush_r+0x48>)
 8004dee:	429c      	cmp	r4, r3
 8004df0:	d109      	bne.n	8004e06 <_fflush_r+0x2e>
 8004df2:	686c      	ldr	r4, [r5, #4]
 8004df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df8:	b17b      	cbz	r3, 8004e1a <_fflush_r+0x42>
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e02:	f7ff bf63 	b.w	8004ccc <__sflush_r>
 8004e06:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <_fflush_r+0x4c>)
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	d101      	bne.n	8004e10 <_fflush_r+0x38>
 8004e0c:	68ac      	ldr	r4, [r5, #8]
 8004e0e:	e7f1      	b.n	8004df4 <_fflush_r+0x1c>
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <_fflush_r+0x50>)
 8004e12:	429c      	cmp	r4, r3
 8004e14:	bf08      	it	eq
 8004e16:	68ec      	ldreq	r4, [r5, #12]
 8004e18:	e7ec      	b.n	8004df4 <_fflush_r+0x1c>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	bd38      	pop	{r3, r4, r5, pc}
 8004e1e:	bf00      	nop
 8004e20:	0800596c 	.word	0x0800596c
 8004e24:	0800598c 	.word	0x0800598c
 8004e28:	0800594c 	.word	0x0800594c

08004e2c <std>:
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	4604      	mov	r4, r0
 8004e32:	e9c0 3300 	strd	r3, r3, [r0]
 8004e36:	6083      	str	r3, [r0, #8]
 8004e38:	8181      	strh	r1, [r0, #12]
 8004e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8004e3c:	81c2      	strh	r2, [r0, #14]
 8004e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e42:	6183      	str	r3, [r0, #24]
 8004e44:	4619      	mov	r1, r3
 8004e46:	2208      	movs	r2, #8
 8004e48:	305c      	adds	r0, #92	; 0x5c
 8004e4a:	f7ff fdfb 	bl	8004a44 <memset>
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <std+0x38>)
 8004e50:	6263      	str	r3, [r4, #36]	; 0x24
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <std+0x3c>)
 8004e54:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <std+0x40>)
 8004e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <std+0x44>)
 8004e5c:	6224      	str	r4, [r4, #32]
 8004e5e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e60:	bd10      	pop	{r4, pc}
 8004e62:	bf00      	nop
 8004e64:	08005789 	.word	0x08005789
 8004e68:	080057ab 	.word	0x080057ab
 8004e6c:	080057e3 	.word	0x080057e3
 8004e70:	08005807 	.word	0x08005807

08004e74 <_cleanup_r>:
 8004e74:	4901      	ldr	r1, [pc, #4]	; (8004e7c <_cleanup_r+0x8>)
 8004e76:	f000 b885 	b.w	8004f84 <_fwalk_reent>
 8004e7a:	bf00      	nop
 8004e7c:	08004dd9 	.word	0x08004dd9

08004e80 <__sfmoreglue>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	1e4a      	subs	r2, r1, #1
 8004e84:	2568      	movs	r5, #104	; 0x68
 8004e86:	4355      	muls	r5, r2
 8004e88:	460e      	mov	r6, r1
 8004e8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e8e:	f000 f949 	bl	8005124 <_malloc_r>
 8004e92:	4604      	mov	r4, r0
 8004e94:	b140      	cbz	r0, 8004ea8 <__sfmoreglue+0x28>
 8004e96:	2100      	movs	r1, #0
 8004e98:	e9c0 1600 	strd	r1, r6, [r0]
 8004e9c:	300c      	adds	r0, #12
 8004e9e:	60a0      	str	r0, [r4, #8]
 8004ea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ea4:	f7ff fdce 	bl	8004a44 <memset>
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}

08004eac <__sinit>:
 8004eac:	6983      	ldr	r3, [r0, #24]
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	bb33      	cbnz	r3, 8004f02 <__sinit+0x56>
 8004eb4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004eb8:	6503      	str	r3, [r0, #80]	; 0x50
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <__sinit+0x58>)
 8004ebc:	4a12      	ldr	r2, [pc, #72]	; (8004f08 <__sinit+0x5c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6282      	str	r2, [r0, #40]	; 0x28
 8004ec2:	4298      	cmp	r0, r3
 8004ec4:	bf04      	itt	eq
 8004ec6:	2301      	moveq	r3, #1
 8004ec8:	6183      	streq	r3, [r0, #24]
 8004eca:	f000 f81f 	bl	8004f0c <__sfp>
 8004ece:	6060      	str	r0, [r4, #4]
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 f81b 	bl	8004f0c <__sfp>
 8004ed6:	60a0      	str	r0, [r4, #8]
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 f817 	bl	8004f0c <__sfp>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	60e0      	str	r0, [r4, #12]
 8004ee2:	2104      	movs	r1, #4
 8004ee4:	6860      	ldr	r0, [r4, #4]
 8004ee6:	f7ff ffa1 	bl	8004e2c <std>
 8004eea:	2201      	movs	r2, #1
 8004eec:	2109      	movs	r1, #9
 8004eee:	68a0      	ldr	r0, [r4, #8]
 8004ef0:	f7ff ff9c 	bl	8004e2c <std>
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	2112      	movs	r1, #18
 8004ef8:	68e0      	ldr	r0, [r4, #12]
 8004efa:	f7ff ff97 	bl	8004e2c <std>
 8004efe:	2301      	movs	r3, #1
 8004f00:	61a3      	str	r3, [r4, #24]
 8004f02:	bd10      	pop	{r4, pc}
 8004f04:	08005948 	.word	0x08005948
 8004f08:	08004e75 	.word	0x08004e75

08004f0c <__sfp>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <__sfp+0x70>)
 8004f10:	681e      	ldr	r6, [r3, #0]
 8004f12:	69b3      	ldr	r3, [r6, #24]
 8004f14:	4607      	mov	r7, r0
 8004f16:	b913      	cbnz	r3, 8004f1e <__sfp+0x12>
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff ffc7 	bl	8004eac <__sinit>
 8004f1e:	3648      	adds	r6, #72	; 0x48
 8004f20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	d503      	bpl.n	8004f30 <__sfp+0x24>
 8004f28:	6833      	ldr	r3, [r6, #0]
 8004f2a:	b133      	cbz	r3, 8004f3a <__sfp+0x2e>
 8004f2c:	6836      	ldr	r6, [r6, #0]
 8004f2e:	e7f7      	b.n	8004f20 <__sfp+0x14>
 8004f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f34:	b16d      	cbz	r5, 8004f52 <__sfp+0x46>
 8004f36:	3468      	adds	r4, #104	; 0x68
 8004f38:	e7f4      	b.n	8004f24 <__sfp+0x18>
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	f7ff ff9f 	bl	8004e80 <__sfmoreglue>
 8004f42:	6030      	str	r0, [r6, #0]
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d1f1      	bne.n	8004f2c <__sfp+0x20>
 8004f48:	230c      	movs	r3, #12
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	4620      	mov	r0, r4
 8004f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <__sfp+0x74>)
 8004f54:	6665      	str	r5, [r4, #100]	; 0x64
 8004f56:	e9c4 5500 	strd	r5, r5, [r4]
 8004f5a:	60a5      	str	r5, [r4, #8]
 8004f5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004f60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004f64:	2208      	movs	r2, #8
 8004f66:	4629      	mov	r1, r5
 8004f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f6c:	f7ff fd6a 	bl	8004a44 <memset>
 8004f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f78:	e7e9      	b.n	8004f4e <__sfp+0x42>
 8004f7a:	bf00      	nop
 8004f7c:	08005948 	.word	0x08005948
 8004f80:	ffff0001 	.word	0xffff0001

08004f84 <_fwalk_reent>:
 8004f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f88:	4680      	mov	r8, r0
 8004f8a:	4689      	mov	r9, r1
 8004f8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f90:	2600      	movs	r6, #0
 8004f92:	b914      	cbnz	r4, 8004f9a <_fwalk_reent+0x16>
 8004f94:	4630      	mov	r0, r6
 8004f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004f9e:	3f01      	subs	r7, #1
 8004fa0:	d501      	bpl.n	8004fa6 <_fwalk_reent+0x22>
 8004fa2:	6824      	ldr	r4, [r4, #0]
 8004fa4:	e7f5      	b.n	8004f92 <_fwalk_reent+0xe>
 8004fa6:	89ab      	ldrh	r3, [r5, #12]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d907      	bls.n	8004fbc <_fwalk_reent+0x38>
 8004fac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	d003      	beq.n	8004fbc <_fwalk_reent+0x38>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	47c8      	blx	r9
 8004fba:	4306      	orrs	r6, r0
 8004fbc:	3568      	adds	r5, #104	; 0x68
 8004fbe:	e7ee      	b.n	8004f9e <_fwalk_reent+0x1a>

08004fc0 <__swhatbuf_r>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	460e      	mov	r6, r1
 8004fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	b096      	sub	sp, #88	; 0x58
 8004fcc:	4614      	mov	r4, r2
 8004fce:	461d      	mov	r5, r3
 8004fd0:	da07      	bge.n	8004fe2 <__swhatbuf_r+0x22>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	602b      	str	r3, [r5, #0]
 8004fd6:	89b3      	ldrh	r3, [r6, #12]
 8004fd8:	061a      	lsls	r2, r3, #24
 8004fda:	d410      	bmi.n	8004ffe <__swhatbuf_r+0x3e>
 8004fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe0:	e00e      	b.n	8005000 <__swhatbuf_r+0x40>
 8004fe2:	466a      	mov	r2, sp
 8004fe4:	f000 fc36 	bl	8005854 <_fstat_r>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	dbf2      	blt.n	8004fd2 <__swhatbuf_r+0x12>
 8004fec:	9a01      	ldr	r2, [sp, #4]
 8004fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ff6:	425a      	negs	r2, r3
 8004ff8:	415a      	adcs	r2, r3
 8004ffa:	602a      	str	r2, [r5, #0]
 8004ffc:	e7ee      	b.n	8004fdc <__swhatbuf_r+0x1c>
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	2000      	movs	r0, #0
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	b016      	add	sp, #88	; 0x58
 8005006:	bd70      	pop	{r4, r5, r6, pc}

08005008 <__smakebuf_r>:
 8005008:	898b      	ldrh	r3, [r1, #12]
 800500a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800500c:	079d      	lsls	r5, r3, #30
 800500e:	4606      	mov	r6, r0
 8005010:	460c      	mov	r4, r1
 8005012:	d507      	bpl.n	8005024 <__smakebuf_r+0x1c>
 8005014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	2301      	movs	r3, #1
 800501e:	6163      	str	r3, [r4, #20]
 8005020:	b002      	add	sp, #8
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	ab01      	add	r3, sp, #4
 8005026:	466a      	mov	r2, sp
 8005028:	f7ff ffca 	bl	8004fc0 <__swhatbuf_r>
 800502c:	9900      	ldr	r1, [sp, #0]
 800502e:	4605      	mov	r5, r0
 8005030:	4630      	mov	r0, r6
 8005032:	f000 f877 	bl	8005124 <_malloc_r>
 8005036:	b948      	cbnz	r0, 800504c <__smakebuf_r+0x44>
 8005038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800503c:	059a      	lsls	r2, r3, #22
 800503e:	d4ef      	bmi.n	8005020 <__smakebuf_r+0x18>
 8005040:	f023 0303 	bic.w	r3, r3, #3
 8005044:	f043 0302 	orr.w	r3, r3, #2
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	e7e3      	b.n	8005014 <__smakebuf_r+0xc>
 800504c:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <__smakebuf_r+0x7c>)
 800504e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	81a3      	strh	r3, [r4, #12]
 800505a:	9b00      	ldr	r3, [sp, #0]
 800505c:	6163      	str	r3, [r4, #20]
 800505e:	9b01      	ldr	r3, [sp, #4]
 8005060:	6120      	str	r0, [r4, #16]
 8005062:	b15b      	cbz	r3, 800507c <__smakebuf_r+0x74>
 8005064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005068:	4630      	mov	r0, r6
 800506a:	f000 fc05 	bl	8005878 <_isatty_r>
 800506e:	b128      	cbz	r0, 800507c <__smakebuf_r+0x74>
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	81a3      	strh	r3, [r4, #12]
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	431d      	orrs	r5, r3
 8005080:	81a5      	strh	r5, [r4, #12]
 8005082:	e7cd      	b.n	8005020 <__smakebuf_r+0x18>
 8005084:	08004e75 	.word	0x08004e75

08005088 <_free_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4605      	mov	r5, r0
 800508c:	2900      	cmp	r1, #0
 800508e:	d045      	beq.n	800511c <_free_r+0x94>
 8005090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005094:	1f0c      	subs	r4, r1, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	bfb8      	it	lt
 800509a:	18e4      	addlt	r4, r4, r3
 800509c:	f000 fc0e 	bl	80058bc <__malloc_lock>
 80050a0:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <_free_r+0x98>)
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	4610      	mov	r0, r2
 80050a6:	b933      	cbnz	r3, 80050b6 <_free_r+0x2e>
 80050a8:	6063      	str	r3, [r4, #4]
 80050aa:	6014      	str	r4, [r2, #0]
 80050ac:	4628      	mov	r0, r5
 80050ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050b2:	f000 bc04 	b.w	80058be <__malloc_unlock>
 80050b6:	42a3      	cmp	r3, r4
 80050b8:	d90c      	bls.n	80050d4 <_free_r+0x4c>
 80050ba:	6821      	ldr	r1, [r4, #0]
 80050bc:	1862      	adds	r2, r4, r1
 80050be:	4293      	cmp	r3, r2
 80050c0:	bf04      	itt	eq
 80050c2:	681a      	ldreq	r2, [r3, #0]
 80050c4:	685b      	ldreq	r3, [r3, #4]
 80050c6:	6063      	str	r3, [r4, #4]
 80050c8:	bf04      	itt	eq
 80050ca:	1852      	addeq	r2, r2, r1
 80050cc:	6022      	streq	r2, [r4, #0]
 80050ce:	6004      	str	r4, [r0, #0]
 80050d0:	e7ec      	b.n	80050ac <_free_r+0x24>
 80050d2:	4613      	mov	r3, r2
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	b10a      	cbz	r2, 80050dc <_free_r+0x54>
 80050d8:	42a2      	cmp	r2, r4
 80050da:	d9fa      	bls.n	80050d2 <_free_r+0x4a>
 80050dc:	6819      	ldr	r1, [r3, #0]
 80050de:	1858      	adds	r0, r3, r1
 80050e0:	42a0      	cmp	r0, r4
 80050e2:	d10b      	bne.n	80050fc <_free_r+0x74>
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	4401      	add	r1, r0
 80050e8:	1858      	adds	r0, r3, r1
 80050ea:	4282      	cmp	r2, r0
 80050ec:	6019      	str	r1, [r3, #0]
 80050ee:	d1dd      	bne.n	80050ac <_free_r+0x24>
 80050f0:	6810      	ldr	r0, [r2, #0]
 80050f2:	6852      	ldr	r2, [r2, #4]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	4401      	add	r1, r0
 80050f8:	6019      	str	r1, [r3, #0]
 80050fa:	e7d7      	b.n	80050ac <_free_r+0x24>
 80050fc:	d902      	bls.n	8005104 <_free_r+0x7c>
 80050fe:	230c      	movs	r3, #12
 8005100:	602b      	str	r3, [r5, #0]
 8005102:	e7d3      	b.n	80050ac <_free_r+0x24>
 8005104:	6820      	ldr	r0, [r4, #0]
 8005106:	1821      	adds	r1, r4, r0
 8005108:	428a      	cmp	r2, r1
 800510a:	bf04      	itt	eq
 800510c:	6811      	ldreq	r1, [r2, #0]
 800510e:	6852      	ldreq	r2, [r2, #4]
 8005110:	6062      	str	r2, [r4, #4]
 8005112:	bf04      	itt	eq
 8005114:	1809      	addeq	r1, r1, r0
 8005116:	6021      	streq	r1, [r4, #0]
 8005118:	605c      	str	r4, [r3, #4]
 800511a:	e7c7      	b.n	80050ac <_free_r+0x24>
 800511c:	bd38      	pop	{r3, r4, r5, pc}
 800511e:	bf00      	nop
 8005120:	20000094 	.word	0x20000094

08005124 <_malloc_r>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	1ccd      	adds	r5, r1, #3
 8005128:	f025 0503 	bic.w	r5, r5, #3
 800512c:	3508      	adds	r5, #8
 800512e:	2d0c      	cmp	r5, #12
 8005130:	bf38      	it	cc
 8005132:	250c      	movcc	r5, #12
 8005134:	2d00      	cmp	r5, #0
 8005136:	4606      	mov	r6, r0
 8005138:	db01      	blt.n	800513e <_malloc_r+0x1a>
 800513a:	42a9      	cmp	r1, r5
 800513c:	d903      	bls.n	8005146 <_malloc_r+0x22>
 800513e:	230c      	movs	r3, #12
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	2000      	movs	r0, #0
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	f000 fbb9 	bl	80058bc <__malloc_lock>
 800514a:	4a21      	ldr	r2, [pc, #132]	; (80051d0 <_malloc_r+0xac>)
 800514c:	6814      	ldr	r4, [r2, #0]
 800514e:	4621      	mov	r1, r4
 8005150:	b991      	cbnz	r1, 8005178 <_malloc_r+0x54>
 8005152:	4c20      	ldr	r4, [pc, #128]	; (80051d4 <_malloc_r+0xb0>)
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	b91b      	cbnz	r3, 8005160 <_malloc_r+0x3c>
 8005158:	4630      	mov	r0, r6
 800515a:	f000 fb05 	bl	8005768 <_sbrk_r>
 800515e:	6020      	str	r0, [r4, #0]
 8005160:	4629      	mov	r1, r5
 8005162:	4630      	mov	r0, r6
 8005164:	f000 fb00 	bl	8005768 <_sbrk_r>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d124      	bne.n	80051b6 <_malloc_r+0x92>
 800516c:	230c      	movs	r3, #12
 800516e:	6033      	str	r3, [r6, #0]
 8005170:	4630      	mov	r0, r6
 8005172:	f000 fba4 	bl	80058be <__malloc_unlock>
 8005176:	e7e4      	b.n	8005142 <_malloc_r+0x1e>
 8005178:	680b      	ldr	r3, [r1, #0]
 800517a:	1b5b      	subs	r3, r3, r5
 800517c:	d418      	bmi.n	80051b0 <_malloc_r+0x8c>
 800517e:	2b0b      	cmp	r3, #11
 8005180:	d90f      	bls.n	80051a2 <_malloc_r+0x7e>
 8005182:	600b      	str	r3, [r1, #0]
 8005184:	50cd      	str	r5, [r1, r3]
 8005186:	18cc      	adds	r4, r1, r3
 8005188:	4630      	mov	r0, r6
 800518a:	f000 fb98 	bl	80058be <__malloc_unlock>
 800518e:	f104 000b 	add.w	r0, r4, #11
 8005192:	1d23      	adds	r3, r4, #4
 8005194:	f020 0007 	bic.w	r0, r0, #7
 8005198:	1ac3      	subs	r3, r0, r3
 800519a:	d0d3      	beq.n	8005144 <_malloc_r+0x20>
 800519c:	425a      	negs	r2, r3
 800519e:	50e2      	str	r2, [r4, r3]
 80051a0:	e7d0      	b.n	8005144 <_malloc_r+0x20>
 80051a2:	428c      	cmp	r4, r1
 80051a4:	684b      	ldr	r3, [r1, #4]
 80051a6:	bf16      	itet	ne
 80051a8:	6063      	strne	r3, [r4, #4]
 80051aa:	6013      	streq	r3, [r2, #0]
 80051ac:	460c      	movne	r4, r1
 80051ae:	e7eb      	b.n	8005188 <_malloc_r+0x64>
 80051b0:	460c      	mov	r4, r1
 80051b2:	6849      	ldr	r1, [r1, #4]
 80051b4:	e7cc      	b.n	8005150 <_malloc_r+0x2c>
 80051b6:	1cc4      	adds	r4, r0, #3
 80051b8:	f024 0403 	bic.w	r4, r4, #3
 80051bc:	42a0      	cmp	r0, r4
 80051be:	d005      	beq.n	80051cc <_malloc_r+0xa8>
 80051c0:	1a21      	subs	r1, r4, r0
 80051c2:	4630      	mov	r0, r6
 80051c4:	f000 fad0 	bl	8005768 <_sbrk_r>
 80051c8:	3001      	adds	r0, #1
 80051ca:	d0cf      	beq.n	800516c <_malloc_r+0x48>
 80051cc:	6025      	str	r5, [r4, #0]
 80051ce:	e7db      	b.n	8005188 <_malloc_r+0x64>
 80051d0:	20000094 	.word	0x20000094
 80051d4:	20000098 	.word	0x20000098

080051d8 <__sfputc_r>:
 80051d8:	6893      	ldr	r3, [r2, #8]
 80051da:	3b01      	subs	r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	b410      	push	{r4}
 80051e0:	6093      	str	r3, [r2, #8]
 80051e2:	da08      	bge.n	80051f6 <__sfputc_r+0x1e>
 80051e4:	6994      	ldr	r4, [r2, #24]
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	db01      	blt.n	80051ee <__sfputc_r+0x16>
 80051ea:	290a      	cmp	r1, #10
 80051ec:	d103      	bne.n	80051f6 <__sfputc_r+0x1e>
 80051ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051f2:	f7ff bcab 	b.w	8004b4c <__swbuf_r>
 80051f6:	6813      	ldr	r3, [r2, #0]
 80051f8:	1c58      	adds	r0, r3, #1
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	7019      	strb	r1, [r3, #0]
 80051fe:	4608      	mov	r0, r1
 8005200:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005204:	4770      	bx	lr

08005206 <__sfputs_r>:
 8005206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	4614      	mov	r4, r2
 800520e:	18d5      	adds	r5, r2, r3
 8005210:	42ac      	cmp	r4, r5
 8005212:	d101      	bne.n	8005218 <__sfputs_r+0x12>
 8005214:	2000      	movs	r0, #0
 8005216:	e007      	b.n	8005228 <__sfputs_r+0x22>
 8005218:	463a      	mov	r2, r7
 800521a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ffda 	bl	80051d8 <__sfputc_r>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d1f3      	bne.n	8005210 <__sfputs_r+0xa>
 8005228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800522c <_vfiprintf_r>:
 800522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005230:	460c      	mov	r4, r1
 8005232:	b09d      	sub	sp, #116	; 0x74
 8005234:	4617      	mov	r7, r2
 8005236:	461d      	mov	r5, r3
 8005238:	4606      	mov	r6, r0
 800523a:	b118      	cbz	r0, 8005244 <_vfiprintf_r+0x18>
 800523c:	6983      	ldr	r3, [r0, #24]
 800523e:	b90b      	cbnz	r3, 8005244 <_vfiprintf_r+0x18>
 8005240:	f7ff fe34 	bl	8004eac <__sinit>
 8005244:	4b7c      	ldr	r3, [pc, #496]	; (8005438 <_vfiprintf_r+0x20c>)
 8005246:	429c      	cmp	r4, r3
 8005248:	d158      	bne.n	80052fc <_vfiprintf_r+0xd0>
 800524a:	6874      	ldr	r4, [r6, #4]
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	0718      	lsls	r0, r3, #28
 8005250:	d55e      	bpl.n	8005310 <_vfiprintf_r+0xe4>
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d05b      	beq.n	8005310 <_vfiprintf_r+0xe4>
 8005258:	2300      	movs	r3, #0
 800525a:	9309      	str	r3, [sp, #36]	; 0x24
 800525c:	2320      	movs	r3, #32
 800525e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005262:	2330      	movs	r3, #48	; 0x30
 8005264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005268:	9503      	str	r5, [sp, #12]
 800526a:	f04f 0b01 	mov.w	fp, #1
 800526e:	46b8      	mov	r8, r7
 8005270:	4645      	mov	r5, r8
 8005272:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005276:	b10b      	cbz	r3, 800527c <_vfiprintf_r+0x50>
 8005278:	2b25      	cmp	r3, #37	; 0x25
 800527a:	d154      	bne.n	8005326 <_vfiprintf_r+0xfa>
 800527c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005280:	d00b      	beq.n	800529a <_vfiprintf_r+0x6e>
 8005282:	4653      	mov	r3, sl
 8005284:	463a      	mov	r2, r7
 8005286:	4621      	mov	r1, r4
 8005288:	4630      	mov	r0, r6
 800528a:	f7ff ffbc 	bl	8005206 <__sfputs_r>
 800528e:	3001      	adds	r0, #1
 8005290:	f000 80c2 	beq.w	8005418 <_vfiprintf_r+0x1ec>
 8005294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005296:	4453      	add	r3, sl
 8005298:	9309      	str	r3, [sp, #36]	; 0x24
 800529a:	f898 3000 	ldrb.w	r3, [r8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80ba 	beq.w	8005418 <_vfiprintf_r+0x1ec>
 80052a4:	2300      	movs	r3, #0
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295
 80052aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ae:	9304      	str	r3, [sp, #16]
 80052b0:	9307      	str	r3, [sp, #28]
 80052b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052b6:	931a      	str	r3, [sp, #104]	; 0x68
 80052b8:	46a8      	mov	r8, r5
 80052ba:	2205      	movs	r2, #5
 80052bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80052c0:	485e      	ldr	r0, [pc, #376]	; (800543c <_vfiprintf_r+0x210>)
 80052c2:	f7fa ffa5 	bl	8000210 <memchr>
 80052c6:	9b04      	ldr	r3, [sp, #16]
 80052c8:	bb78      	cbnz	r0, 800532a <_vfiprintf_r+0xfe>
 80052ca:	06d9      	lsls	r1, r3, #27
 80052cc:	bf44      	itt	mi
 80052ce:	2220      	movmi	r2, #32
 80052d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052d4:	071a      	lsls	r2, r3, #28
 80052d6:	bf44      	itt	mi
 80052d8:	222b      	movmi	r2, #43	; 0x2b
 80052da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052de:	782a      	ldrb	r2, [r5, #0]
 80052e0:	2a2a      	cmp	r2, #42	; 0x2a
 80052e2:	d02a      	beq.n	800533a <_vfiprintf_r+0x10e>
 80052e4:	9a07      	ldr	r2, [sp, #28]
 80052e6:	46a8      	mov	r8, r5
 80052e8:	2000      	movs	r0, #0
 80052ea:	250a      	movs	r5, #10
 80052ec:	4641      	mov	r1, r8
 80052ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f2:	3b30      	subs	r3, #48	; 0x30
 80052f4:	2b09      	cmp	r3, #9
 80052f6:	d969      	bls.n	80053cc <_vfiprintf_r+0x1a0>
 80052f8:	b360      	cbz	r0, 8005354 <_vfiprintf_r+0x128>
 80052fa:	e024      	b.n	8005346 <_vfiprintf_r+0x11a>
 80052fc:	4b50      	ldr	r3, [pc, #320]	; (8005440 <_vfiprintf_r+0x214>)
 80052fe:	429c      	cmp	r4, r3
 8005300:	d101      	bne.n	8005306 <_vfiprintf_r+0xda>
 8005302:	68b4      	ldr	r4, [r6, #8]
 8005304:	e7a2      	b.n	800524c <_vfiprintf_r+0x20>
 8005306:	4b4f      	ldr	r3, [pc, #316]	; (8005444 <_vfiprintf_r+0x218>)
 8005308:	429c      	cmp	r4, r3
 800530a:	bf08      	it	eq
 800530c:	68f4      	ldreq	r4, [r6, #12]
 800530e:	e79d      	b.n	800524c <_vfiprintf_r+0x20>
 8005310:	4621      	mov	r1, r4
 8005312:	4630      	mov	r0, r6
 8005314:	f7ff fc6c 	bl	8004bf0 <__swsetup_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	d09d      	beq.n	8005258 <_vfiprintf_r+0x2c>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	b01d      	add	sp, #116	; 0x74
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005326:	46a8      	mov	r8, r5
 8005328:	e7a2      	b.n	8005270 <_vfiprintf_r+0x44>
 800532a:	4a44      	ldr	r2, [pc, #272]	; (800543c <_vfiprintf_r+0x210>)
 800532c:	1a80      	subs	r0, r0, r2
 800532e:	fa0b f000 	lsl.w	r0, fp, r0
 8005332:	4318      	orrs	r0, r3
 8005334:	9004      	str	r0, [sp, #16]
 8005336:	4645      	mov	r5, r8
 8005338:	e7be      	b.n	80052b8 <_vfiprintf_r+0x8c>
 800533a:	9a03      	ldr	r2, [sp, #12]
 800533c:	1d11      	adds	r1, r2, #4
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	9103      	str	r1, [sp, #12]
 8005342:	2a00      	cmp	r2, #0
 8005344:	db01      	blt.n	800534a <_vfiprintf_r+0x11e>
 8005346:	9207      	str	r2, [sp, #28]
 8005348:	e004      	b.n	8005354 <_vfiprintf_r+0x128>
 800534a:	4252      	negs	r2, r2
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	9207      	str	r2, [sp, #28]
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	f898 3000 	ldrb.w	r3, [r8]
 8005358:	2b2e      	cmp	r3, #46	; 0x2e
 800535a:	d10e      	bne.n	800537a <_vfiprintf_r+0x14e>
 800535c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005360:	2b2a      	cmp	r3, #42	; 0x2a
 8005362:	d138      	bne.n	80053d6 <_vfiprintf_r+0x1aa>
 8005364:	9b03      	ldr	r3, [sp, #12]
 8005366:	1d1a      	adds	r2, r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	9203      	str	r2, [sp, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	bfb8      	it	lt
 8005370:	f04f 33ff 	movlt.w	r3, #4294967295
 8005374:	f108 0802 	add.w	r8, r8, #2
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	4d33      	ldr	r5, [pc, #204]	; (8005448 <_vfiprintf_r+0x21c>)
 800537c:	f898 1000 	ldrb.w	r1, [r8]
 8005380:	2203      	movs	r2, #3
 8005382:	4628      	mov	r0, r5
 8005384:	f7fa ff44 	bl	8000210 <memchr>
 8005388:	b140      	cbz	r0, 800539c <_vfiprintf_r+0x170>
 800538a:	2340      	movs	r3, #64	; 0x40
 800538c:	1b40      	subs	r0, r0, r5
 800538e:	fa03 f000 	lsl.w	r0, r3, r0
 8005392:	9b04      	ldr	r3, [sp, #16]
 8005394:	4303      	orrs	r3, r0
 8005396:	f108 0801 	add.w	r8, r8, #1
 800539a:	9304      	str	r3, [sp, #16]
 800539c:	f898 1000 	ldrb.w	r1, [r8]
 80053a0:	482a      	ldr	r0, [pc, #168]	; (800544c <_vfiprintf_r+0x220>)
 80053a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053a6:	2206      	movs	r2, #6
 80053a8:	f108 0701 	add.w	r7, r8, #1
 80053ac:	f7fa ff30 	bl	8000210 <memchr>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d037      	beq.n	8005424 <_vfiprintf_r+0x1f8>
 80053b4:	4b26      	ldr	r3, [pc, #152]	; (8005450 <_vfiprintf_r+0x224>)
 80053b6:	bb1b      	cbnz	r3, 8005400 <_vfiprintf_r+0x1d4>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	3307      	adds	r3, #7
 80053bc:	f023 0307 	bic.w	r3, r3, #7
 80053c0:	3308      	adds	r3, #8
 80053c2:	9303      	str	r3, [sp, #12]
 80053c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c6:	444b      	add	r3, r9
 80053c8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ca:	e750      	b.n	800526e <_vfiprintf_r+0x42>
 80053cc:	fb05 3202 	mla	r2, r5, r2, r3
 80053d0:	2001      	movs	r0, #1
 80053d2:	4688      	mov	r8, r1
 80053d4:	e78a      	b.n	80052ec <_vfiprintf_r+0xc0>
 80053d6:	2300      	movs	r3, #0
 80053d8:	f108 0801 	add.w	r8, r8, #1
 80053dc:	9305      	str	r3, [sp, #20]
 80053de:	4619      	mov	r1, r3
 80053e0:	250a      	movs	r5, #10
 80053e2:	4640      	mov	r0, r8
 80053e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053e8:	3a30      	subs	r2, #48	; 0x30
 80053ea:	2a09      	cmp	r2, #9
 80053ec:	d903      	bls.n	80053f6 <_vfiprintf_r+0x1ca>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0c3      	beq.n	800537a <_vfiprintf_r+0x14e>
 80053f2:	9105      	str	r1, [sp, #20]
 80053f4:	e7c1      	b.n	800537a <_vfiprintf_r+0x14e>
 80053f6:	fb05 2101 	mla	r1, r5, r1, r2
 80053fa:	2301      	movs	r3, #1
 80053fc:	4680      	mov	r8, r0
 80053fe:	e7f0      	b.n	80053e2 <_vfiprintf_r+0x1b6>
 8005400:	ab03      	add	r3, sp, #12
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	4622      	mov	r2, r4
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <_vfiprintf_r+0x228>)
 8005408:	a904      	add	r1, sp, #16
 800540a:	4630      	mov	r0, r6
 800540c:	f3af 8000 	nop.w
 8005410:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005414:	4681      	mov	r9, r0
 8005416:	d1d5      	bne.n	80053c4 <_vfiprintf_r+0x198>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	065b      	lsls	r3, r3, #25
 800541c:	f53f af7e 	bmi.w	800531c <_vfiprintf_r+0xf0>
 8005420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005422:	e77d      	b.n	8005320 <_vfiprintf_r+0xf4>
 8005424:	ab03      	add	r3, sp, #12
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	4622      	mov	r2, r4
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <_vfiprintf_r+0x228>)
 800542c:	a904      	add	r1, sp, #16
 800542e:	4630      	mov	r0, r6
 8005430:	f000 f888 	bl	8005544 <_printf_i>
 8005434:	e7ec      	b.n	8005410 <_vfiprintf_r+0x1e4>
 8005436:	bf00      	nop
 8005438:	0800596c 	.word	0x0800596c
 800543c:	080059ac 	.word	0x080059ac
 8005440:	0800598c 	.word	0x0800598c
 8005444:	0800594c 	.word	0x0800594c
 8005448:	080059b2 	.word	0x080059b2
 800544c:	080059b6 	.word	0x080059b6
 8005450:	00000000 	.word	0x00000000
 8005454:	08005207 	.word	0x08005207

08005458 <_printf_common>:
 8005458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800545c:	4691      	mov	r9, r2
 800545e:	461f      	mov	r7, r3
 8005460:	688a      	ldr	r2, [r1, #8]
 8005462:	690b      	ldr	r3, [r1, #16]
 8005464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005468:	4293      	cmp	r3, r2
 800546a:	bfb8      	it	lt
 800546c:	4613      	movlt	r3, r2
 800546e:	f8c9 3000 	str.w	r3, [r9]
 8005472:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005476:	4606      	mov	r6, r0
 8005478:	460c      	mov	r4, r1
 800547a:	b112      	cbz	r2, 8005482 <_printf_common+0x2a>
 800547c:	3301      	adds	r3, #1
 800547e:	f8c9 3000 	str.w	r3, [r9]
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	0699      	lsls	r1, r3, #26
 8005486:	bf42      	ittt	mi
 8005488:	f8d9 3000 	ldrmi.w	r3, [r9]
 800548c:	3302      	addmi	r3, #2
 800548e:	f8c9 3000 	strmi.w	r3, [r9]
 8005492:	6825      	ldr	r5, [r4, #0]
 8005494:	f015 0506 	ands.w	r5, r5, #6
 8005498:	d107      	bne.n	80054aa <_printf_common+0x52>
 800549a:	f104 0a19 	add.w	sl, r4, #25
 800549e:	68e3      	ldr	r3, [r4, #12]
 80054a0:	f8d9 2000 	ldr.w	r2, [r9]
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	42ab      	cmp	r3, r5
 80054a8:	dc28      	bgt.n	80054fc <_printf_common+0xa4>
 80054aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	3300      	adds	r3, #0
 80054b2:	bf18      	it	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	0692      	lsls	r2, r2, #26
 80054b8:	d42d      	bmi.n	8005516 <_printf_common+0xbe>
 80054ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054be:	4639      	mov	r1, r7
 80054c0:	4630      	mov	r0, r6
 80054c2:	47c0      	blx	r8
 80054c4:	3001      	adds	r0, #1
 80054c6:	d020      	beq.n	800550a <_printf_common+0xb2>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	68e5      	ldr	r5, [r4, #12]
 80054cc:	f8d9 2000 	ldr.w	r2, [r9]
 80054d0:	f003 0306 	and.w	r3, r3, #6
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	bf08      	it	eq
 80054d8:	1aad      	subeq	r5, r5, r2
 80054da:	68a3      	ldr	r3, [r4, #8]
 80054dc:	6922      	ldr	r2, [r4, #16]
 80054de:	bf0c      	ite	eq
 80054e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054e4:	2500      	movne	r5, #0
 80054e6:	4293      	cmp	r3, r2
 80054e8:	bfc4      	itt	gt
 80054ea:	1a9b      	subgt	r3, r3, r2
 80054ec:	18ed      	addgt	r5, r5, r3
 80054ee:	f04f 0900 	mov.w	r9, #0
 80054f2:	341a      	adds	r4, #26
 80054f4:	454d      	cmp	r5, r9
 80054f6:	d11a      	bne.n	800552e <_printf_common+0xd6>
 80054f8:	2000      	movs	r0, #0
 80054fa:	e008      	b.n	800550e <_printf_common+0xb6>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4652      	mov	r2, sl
 8005500:	4639      	mov	r1, r7
 8005502:	4630      	mov	r0, r6
 8005504:	47c0      	blx	r8
 8005506:	3001      	adds	r0, #1
 8005508:	d103      	bne.n	8005512 <_printf_common+0xba>
 800550a:	f04f 30ff 	mov.w	r0, #4294967295
 800550e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005512:	3501      	adds	r5, #1
 8005514:	e7c3      	b.n	800549e <_printf_common+0x46>
 8005516:	18e1      	adds	r1, r4, r3
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	2030      	movs	r0, #48	; 0x30
 800551c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005520:	4422      	add	r2, r4
 8005522:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005526:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800552a:	3302      	adds	r3, #2
 800552c:	e7c5      	b.n	80054ba <_printf_common+0x62>
 800552e:	2301      	movs	r3, #1
 8005530:	4622      	mov	r2, r4
 8005532:	4639      	mov	r1, r7
 8005534:	4630      	mov	r0, r6
 8005536:	47c0      	blx	r8
 8005538:	3001      	adds	r0, #1
 800553a:	d0e6      	beq.n	800550a <_printf_common+0xb2>
 800553c:	f109 0901 	add.w	r9, r9, #1
 8005540:	e7d8      	b.n	80054f4 <_printf_common+0x9c>
	...

08005544 <_printf_i>:
 8005544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005548:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800554c:	460c      	mov	r4, r1
 800554e:	7e09      	ldrb	r1, [r1, #24]
 8005550:	b085      	sub	sp, #20
 8005552:	296e      	cmp	r1, #110	; 0x6e
 8005554:	4617      	mov	r7, r2
 8005556:	4606      	mov	r6, r0
 8005558:	4698      	mov	r8, r3
 800555a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800555c:	f000 80b3 	beq.w	80056c6 <_printf_i+0x182>
 8005560:	d822      	bhi.n	80055a8 <_printf_i+0x64>
 8005562:	2963      	cmp	r1, #99	; 0x63
 8005564:	d036      	beq.n	80055d4 <_printf_i+0x90>
 8005566:	d80a      	bhi.n	800557e <_printf_i+0x3a>
 8005568:	2900      	cmp	r1, #0
 800556a:	f000 80b9 	beq.w	80056e0 <_printf_i+0x19c>
 800556e:	2958      	cmp	r1, #88	; 0x58
 8005570:	f000 8083 	beq.w	800567a <_printf_i+0x136>
 8005574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005578:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800557c:	e032      	b.n	80055e4 <_printf_i+0xa0>
 800557e:	2964      	cmp	r1, #100	; 0x64
 8005580:	d001      	beq.n	8005586 <_printf_i+0x42>
 8005582:	2969      	cmp	r1, #105	; 0x69
 8005584:	d1f6      	bne.n	8005574 <_printf_i+0x30>
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	6813      	ldr	r3, [r2, #0]
 800558a:	0605      	lsls	r5, r0, #24
 800558c:	f103 0104 	add.w	r1, r3, #4
 8005590:	d52a      	bpl.n	80055e8 <_printf_i+0xa4>
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6011      	str	r1, [r2, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	da03      	bge.n	80055a2 <_printf_i+0x5e>
 800559a:	222d      	movs	r2, #45	; 0x2d
 800559c:	425b      	negs	r3, r3
 800559e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055a2:	486f      	ldr	r0, [pc, #444]	; (8005760 <_printf_i+0x21c>)
 80055a4:	220a      	movs	r2, #10
 80055a6:	e039      	b.n	800561c <_printf_i+0xd8>
 80055a8:	2973      	cmp	r1, #115	; 0x73
 80055aa:	f000 809d 	beq.w	80056e8 <_printf_i+0x1a4>
 80055ae:	d808      	bhi.n	80055c2 <_printf_i+0x7e>
 80055b0:	296f      	cmp	r1, #111	; 0x6f
 80055b2:	d020      	beq.n	80055f6 <_printf_i+0xb2>
 80055b4:	2970      	cmp	r1, #112	; 0x70
 80055b6:	d1dd      	bne.n	8005574 <_printf_i+0x30>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	f043 0320 	orr.w	r3, r3, #32
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	e003      	b.n	80055ca <_printf_i+0x86>
 80055c2:	2975      	cmp	r1, #117	; 0x75
 80055c4:	d017      	beq.n	80055f6 <_printf_i+0xb2>
 80055c6:	2978      	cmp	r1, #120	; 0x78
 80055c8:	d1d4      	bne.n	8005574 <_printf_i+0x30>
 80055ca:	2378      	movs	r3, #120	; 0x78
 80055cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055d0:	4864      	ldr	r0, [pc, #400]	; (8005764 <_printf_i+0x220>)
 80055d2:	e055      	b.n	8005680 <_printf_i+0x13c>
 80055d4:	6813      	ldr	r3, [r2, #0]
 80055d6:	1d19      	adds	r1, r3, #4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6011      	str	r1, [r2, #0]
 80055dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055e4:	2301      	movs	r3, #1
 80055e6:	e08c      	b.n	8005702 <_printf_i+0x1be>
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6011      	str	r1, [r2, #0]
 80055ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055f0:	bf18      	it	ne
 80055f2:	b21b      	sxthne	r3, r3
 80055f4:	e7cf      	b.n	8005596 <_printf_i+0x52>
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	6825      	ldr	r5, [r4, #0]
 80055fa:	1d18      	adds	r0, r3, #4
 80055fc:	6010      	str	r0, [r2, #0]
 80055fe:	0628      	lsls	r0, r5, #24
 8005600:	d501      	bpl.n	8005606 <_printf_i+0xc2>
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	e002      	b.n	800560c <_printf_i+0xc8>
 8005606:	0668      	lsls	r0, r5, #25
 8005608:	d5fb      	bpl.n	8005602 <_printf_i+0xbe>
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	4854      	ldr	r0, [pc, #336]	; (8005760 <_printf_i+0x21c>)
 800560e:	296f      	cmp	r1, #111	; 0x6f
 8005610:	bf14      	ite	ne
 8005612:	220a      	movne	r2, #10
 8005614:	2208      	moveq	r2, #8
 8005616:	2100      	movs	r1, #0
 8005618:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800561c:	6865      	ldr	r5, [r4, #4]
 800561e:	60a5      	str	r5, [r4, #8]
 8005620:	2d00      	cmp	r5, #0
 8005622:	f2c0 8095 	blt.w	8005750 <_printf_i+0x20c>
 8005626:	6821      	ldr	r1, [r4, #0]
 8005628:	f021 0104 	bic.w	r1, r1, #4
 800562c:	6021      	str	r1, [r4, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d13d      	bne.n	80056ae <_printf_i+0x16a>
 8005632:	2d00      	cmp	r5, #0
 8005634:	f040 808e 	bne.w	8005754 <_printf_i+0x210>
 8005638:	4665      	mov	r5, ip
 800563a:	2a08      	cmp	r2, #8
 800563c:	d10b      	bne.n	8005656 <_printf_i+0x112>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	07db      	lsls	r3, r3, #31
 8005642:	d508      	bpl.n	8005656 <_printf_i+0x112>
 8005644:	6923      	ldr	r3, [r4, #16]
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	bfde      	ittt	le
 800564c:	2330      	movle	r3, #48	; 0x30
 800564e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005652:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005656:	ebac 0305 	sub.w	r3, ip, r5
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	f8cd 8000 	str.w	r8, [sp]
 8005660:	463b      	mov	r3, r7
 8005662:	aa03      	add	r2, sp, #12
 8005664:	4621      	mov	r1, r4
 8005666:	4630      	mov	r0, r6
 8005668:	f7ff fef6 	bl	8005458 <_printf_common>
 800566c:	3001      	adds	r0, #1
 800566e:	d14d      	bne.n	800570c <_printf_i+0x1c8>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	b005      	add	sp, #20
 8005676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800567a:	4839      	ldr	r0, [pc, #228]	; (8005760 <_printf_i+0x21c>)
 800567c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005680:	6813      	ldr	r3, [r2, #0]
 8005682:	6821      	ldr	r1, [r4, #0]
 8005684:	1d1d      	adds	r5, r3, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6015      	str	r5, [r2, #0]
 800568a:	060a      	lsls	r2, r1, #24
 800568c:	d50b      	bpl.n	80056a6 <_printf_i+0x162>
 800568e:	07ca      	lsls	r2, r1, #31
 8005690:	bf44      	itt	mi
 8005692:	f041 0120 	orrmi.w	r1, r1, #32
 8005696:	6021      	strmi	r1, [r4, #0]
 8005698:	b91b      	cbnz	r3, 80056a2 <_printf_i+0x15e>
 800569a:	6822      	ldr	r2, [r4, #0]
 800569c:	f022 0220 	bic.w	r2, r2, #32
 80056a0:	6022      	str	r2, [r4, #0]
 80056a2:	2210      	movs	r2, #16
 80056a4:	e7b7      	b.n	8005616 <_printf_i+0xd2>
 80056a6:	064d      	lsls	r5, r1, #25
 80056a8:	bf48      	it	mi
 80056aa:	b29b      	uxthmi	r3, r3
 80056ac:	e7ef      	b.n	800568e <_printf_i+0x14a>
 80056ae:	4665      	mov	r5, ip
 80056b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80056b4:	fb02 3311 	mls	r3, r2, r1, r3
 80056b8:	5cc3      	ldrb	r3, [r0, r3]
 80056ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056be:	460b      	mov	r3, r1
 80056c0:	2900      	cmp	r1, #0
 80056c2:	d1f5      	bne.n	80056b0 <_printf_i+0x16c>
 80056c4:	e7b9      	b.n	800563a <_printf_i+0xf6>
 80056c6:	6813      	ldr	r3, [r2, #0]
 80056c8:	6825      	ldr	r5, [r4, #0]
 80056ca:	6961      	ldr	r1, [r4, #20]
 80056cc:	1d18      	adds	r0, r3, #4
 80056ce:	6010      	str	r0, [r2, #0]
 80056d0:	0628      	lsls	r0, r5, #24
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	d501      	bpl.n	80056da <_printf_i+0x196>
 80056d6:	6019      	str	r1, [r3, #0]
 80056d8:	e002      	b.n	80056e0 <_printf_i+0x19c>
 80056da:	066a      	lsls	r2, r5, #25
 80056dc:	d5fb      	bpl.n	80056d6 <_printf_i+0x192>
 80056de:	8019      	strh	r1, [r3, #0]
 80056e0:	2300      	movs	r3, #0
 80056e2:	6123      	str	r3, [r4, #16]
 80056e4:	4665      	mov	r5, ip
 80056e6:	e7b9      	b.n	800565c <_printf_i+0x118>
 80056e8:	6813      	ldr	r3, [r2, #0]
 80056ea:	1d19      	adds	r1, r3, #4
 80056ec:	6011      	str	r1, [r2, #0]
 80056ee:	681d      	ldr	r5, [r3, #0]
 80056f0:	6862      	ldr	r2, [r4, #4]
 80056f2:	2100      	movs	r1, #0
 80056f4:	4628      	mov	r0, r5
 80056f6:	f7fa fd8b 	bl	8000210 <memchr>
 80056fa:	b108      	cbz	r0, 8005700 <_printf_i+0x1bc>
 80056fc:	1b40      	subs	r0, r0, r5
 80056fe:	6060      	str	r0, [r4, #4]
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	2300      	movs	r3, #0
 8005706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570a:	e7a7      	b.n	800565c <_printf_i+0x118>
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	462a      	mov	r2, r5
 8005710:	4639      	mov	r1, r7
 8005712:	4630      	mov	r0, r6
 8005714:	47c0      	blx	r8
 8005716:	3001      	adds	r0, #1
 8005718:	d0aa      	beq.n	8005670 <_printf_i+0x12c>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	079b      	lsls	r3, r3, #30
 800571e:	d413      	bmi.n	8005748 <_printf_i+0x204>
 8005720:	68e0      	ldr	r0, [r4, #12]
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	4298      	cmp	r0, r3
 8005726:	bfb8      	it	lt
 8005728:	4618      	movlt	r0, r3
 800572a:	e7a3      	b.n	8005674 <_printf_i+0x130>
 800572c:	2301      	movs	r3, #1
 800572e:	464a      	mov	r2, r9
 8005730:	4639      	mov	r1, r7
 8005732:	4630      	mov	r0, r6
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d09a      	beq.n	8005670 <_printf_i+0x12c>
 800573a:	3501      	adds	r5, #1
 800573c:	68e3      	ldr	r3, [r4, #12]
 800573e:	9a03      	ldr	r2, [sp, #12]
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	42ab      	cmp	r3, r5
 8005744:	dcf2      	bgt.n	800572c <_printf_i+0x1e8>
 8005746:	e7eb      	b.n	8005720 <_printf_i+0x1dc>
 8005748:	2500      	movs	r5, #0
 800574a:	f104 0919 	add.w	r9, r4, #25
 800574e:	e7f5      	b.n	800573c <_printf_i+0x1f8>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1ac      	bne.n	80056ae <_printf_i+0x16a>
 8005754:	7803      	ldrb	r3, [r0, #0]
 8005756:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800575a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575e:	e76c      	b.n	800563a <_printf_i+0xf6>
 8005760:	080059bd 	.word	0x080059bd
 8005764:	080059ce 	.word	0x080059ce

08005768 <_sbrk_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4c06      	ldr	r4, [pc, #24]	; (8005784 <_sbrk_r+0x1c>)
 800576c:	2300      	movs	r3, #0
 800576e:	4605      	mov	r5, r0
 8005770:	4608      	mov	r0, r1
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	f7fc f828 	bl	80017c8 <_sbrk>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_sbrk_r+0x1a>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	b103      	cbz	r3, 8005782 <_sbrk_r+0x1a>
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	2000026c 	.word	0x2000026c

08005788 <__sread>:
 8005788:	b510      	push	{r4, lr}
 800578a:	460c      	mov	r4, r1
 800578c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005790:	f000 f896 	bl	80058c0 <_read_r>
 8005794:	2800      	cmp	r0, #0
 8005796:	bfab      	itete	ge
 8005798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800579a:	89a3      	ldrhlt	r3, [r4, #12]
 800579c:	181b      	addge	r3, r3, r0
 800579e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057a2:	bfac      	ite	ge
 80057a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80057a6:	81a3      	strhlt	r3, [r4, #12]
 80057a8:	bd10      	pop	{r4, pc}

080057aa <__swrite>:
 80057aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ae:	461f      	mov	r7, r3
 80057b0:	898b      	ldrh	r3, [r1, #12]
 80057b2:	05db      	lsls	r3, r3, #23
 80057b4:	4605      	mov	r5, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4616      	mov	r6, r2
 80057ba:	d505      	bpl.n	80057c8 <__swrite+0x1e>
 80057bc:	2302      	movs	r3, #2
 80057be:	2200      	movs	r2, #0
 80057c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c4:	f000 f868 	bl	8005898 <_lseek_r>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	4632      	mov	r2, r6
 80057d6:	463b      	mov	r3, r7
 80057d8:	4628      	mov	r0, r5
 80057da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	f000 b817 	b.w	8005810 <_write_r>

080057e2 <__sseek>:
 80057e2:	b510      	push	{r4, lr}
 80057e4:	460c      	mov	r4, r1
 80057e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ea:	f000 f855 	bl	8005898 <_lseek_r>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	bf15      	itete	ne
 80057f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057fe:	81a3      	strheq	r3, [r4, #12]
 8005800:	bf18      	it	ne
 8005802:	81a3      	strhne	r3, [r4, #12]
 8005804:	bd10      	pop	{r4, pc}

08005806 <__sclose>:
 8005806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580a:	f000 b813 	b.w	8005834 <_close_r>
	...

08005810 <_write_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4c07      	ldr	r4, [pc, #28]	; (8005830 <_write_r+0x20>)
 8005814:	4605      	mov	r5, r0
 8005816:	4608      	mov	r0, r1
 8005818:	4611      	mov	r1, r2
 800581a:	2200      	movs	r2, #0
 800581c:	6022      	str	r2, [r4, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	f7fb ff81 	bl	8001726 <_write>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_write_r+0x1e>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	b103      	cbz	r3, 800582e <_write_r+0x1e>
 800582c:	602b      	str	r3, [r5, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	2000026c 	.word	0x2000026c

08005834 <_close_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4c06      	ldr	r4, [pc, #24]	; (8005850 <_close_r+0x1c>)
 8005838:	2300      	movs	r3, #0
 800583a:	4605      	mov	r5, r0
 800583c:	4608      	mov	r0, r1
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	f7fb ff8d 	bl	800175e <_close>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_close_r+0x1a>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	b103      	cbz	r3, 800584e <_close_r+0x1a>
 800584c:	602b      	str	r3, [r5, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	2000026c 	.word	0x2000026c

08005854 <_fstat_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4c07      	ldr	r4, [pc, #28]	; (8005874 <_fstat_r+0x20>)
 8005858:	2300      	movs	r3, #0
 800585a:	4605      	mov	r5, r0
 800585c:	4608      	mov	r0, r1
 800585e:	4611      	mov	r1, r2
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	f7fb ff88 	bl	8001776 <_fstat>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	d102      	bne.n	8005870 <_fstat_r+0x1c>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	b103      	cbz	r3, 8005870 <_fstat_r+0x1c>
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	bd38      	pop	{r3, r4, r5, pc}
 8005872:	bf00      	nop
 8005874:	2000026c 	.word	0x2000026c

08005878 <_isatty_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4c06      	ldr	r4, [pc, #24]	; (8005894 <_isatty_r+0x1c>)
 800587c:	2300      	movs	r3, #0
 800587e:	4605      	mov	r5, r0
 8005880:	4608      	mov	r0, r1
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	f7fb ff87 	bl	8001796 <_isatty>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_isatty_r+0x1a>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	b103      	cbz	r3, 8005892 <_isatty_r+0x1a>
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	2000026c 	.word	0x2000026c

08005898 <_lseek_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4c07      	ldr	r4, [pc, #28]	; (80058b8 <_lseek_r+0x20>)
 800589c:	4605      	mov	r5, r0
 800589e:	4608      	mov	r0, r1
 80058a0:	4611      	mov	r1, r2
 80058a2:	2200      	movs	r2, #0
 80058a4:	6022      	str	r2, [r4, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	f7fb ff80 	bl	80017ac <_lseek>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_lseek_r+0x1e>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_lseek_r+0x1e>
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	2000026c 	.word	0x2000026c

080058bc <__malloc_lock>:
 80058bc:	4770      	bx	lr

080058be <__malloc_unlock>:
 80058be:	4770      	bx	lr

080058c0 <_read_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4c07      	ldr	r4, [pc, #28]	; (80058e0 <_read_r+0x20>)
 80058c4:	4605      	mov	r5, r0
 80058c6:	4608      	mov	r0, r1
 80058c8:	4611      	mov	r1, r2
 80058ca:	2200      	movs	r2, #0
 80058cc:	6022      	str	r2, [r4, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f7fb ff0c 	bl	80016ec <_read>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_read_r+0x1e>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	b103      	cbz	r3, 80058de <_read_r+0x1e>
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	2000026c 	.word	0x2000026c

080058e4 <_init>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	bf00      	nop
 80058e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ea:	bc08      	pop	{r3}
 80058ec:	469e      	mov	lr, r3
 80058ee:	4770      	bx	lr

080058f0 <_fini>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr
